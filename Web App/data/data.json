{"Title":{"0":"ANN","1":"Apply Mapping","2":"CNN (text)","3":"CSS Variables","4":"Continuous to Categorical","5":"Custom Scroll Bar","6":"Deal with Large Numbers","7":"Device Breakpoints","8":"Difference Between Rows","9":"Directory Manipulations","10":"Directory Walk","11":"Docstring","12":"Dynamic Attributes","13":"Equal Height Columns","14":"Eval()","15":"Exploding a List","16":"Flatten a list","17":"Function Annotations","18":"Generate Secret Key","19":"IgnoreWarnings","20":"Image Shadow","21":"List Filter","22":"Modules from Directory","23":"Most Common Words","24":"Multiple files single 'with'","25":"Named Tuple","26":"Pandas Display Settings","27":"Password in command line","28":"RNN (text)","29":"Read GET Data","30":"SettingWithCopyWarning","31":"Shebang","32":"Smooth Scrolling","33":"Split in Multiple Columns","34":"Stopwords","35":"Text Preprocessing","36":"TimeStamp","37":"Tracking Loops","38":"Trim in JavaScript","39":"Unpacking","40":"VADER Sentiment Analysis","41":"Webscraping","42":"Word Cloud","43":"is vs =="},"Description":{"0":"(python)","1":"To a DataFrame using Dictionary (python)","2":"(python)","3":"(web)","4":"(pandas dataframe) (python)","5":"(web)","6":"(python)","7":"(css media-queries) (web)","8":"(Pandas DataFrame) (python)","9":"(python)","10":"(python)","11":"(python)","12":"(python)","13":"(css) (web)","14":"(python)","15":"(pandas dataframe) (python)","16":"(python)","17":"(python)","18":"(python)","19":"(python)","20":"(web)","21":"(web)","22":"(python)","23":"In a DataFrame (python)","24":"(python)","25":"(python)","26":"(python)","27":"(python)","28":"(python)","29":"(javascript) (web)","30":"(pandas) (python)","31":"Shebang line for anaconda virtual environments (python)","32":"(css jquery) (web)","33":"(pandas dataframe) (python)","34":"List of Stopwords(text)","35":"(python)","36":"(python)","37":"(python)","38":"(web)","39":"(python)","40":"(python)","41":"(python)","42":"(python)","43":"(python)"},"Code":{"0":"from keras.models import Sequential\nfrom keras.laeyrs import Dense, Dropout\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras import optimizers\n# optimizers.SGD()\n# optimizers.RMSProp()\n# optimizers.Adagrad()\n# optimizers.Adadelta()\n# optimizers.Adam()\n\nes = EarlyStopping(monitor='loss', mode='min', verbose=1)\nfilepath = \"model.h5\"\nckpt = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')\n\ndef build_network():\n    model = Sequential()\n    model.add(Dense(160,input_dim=40, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(320, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(365, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(125, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(25, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer=, metrics=['accuracy'])\n    model.summary()\n    return model\n\nmodel = build_network()\n\nmodel.fit(scaled_data, train_label[0], validation_split=0.3, epochs=25, callbacks=[es, ckpt])\n\n\nfrom keras.models import load_model\nnew_model = load_model(\"model.h5\")","1":"mapping = {'male':0, 'female':1}\n\n\ncols = ['A', 'B', 'C']\ndf[cols] = df[cols].applymap(mapping.get())","2":"from keras.models import Sequential\nfrom keras.laeyrs import Dense, Dropout, Flatten, Embedding, Convolution1D, MaxPooling1D\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras import optimizers\n# optimizers.SGD()\n# optimizers.RMSProp()\n# optimizers.Adagrad()\n# optimizers.Adadelta()\n# optimizers.Adam()\n\nvocabulary_size = 7500\npad_length = 1000\ntokenizer = Tokenizer(num_words= vocabulary_size)\ntokenizer.fit_on_texts(X)\nsequences = tokenizer.texts_to_sequences(X)\npadded_sequences = pad_sequences(sequences, maxlen=pad_length)\n\nes = EarlyStopping(monitor='loss', mode='min', verbose=1)\nfilepath = \"model.h5\"\nckpt = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')\n\ndef build_network():\n    model = Sequential()\n    model.add(Embedding(vocabulary_size, 1024, input_length=pad_length))\n    model.add(Convolution1D(1024, kernel_size=5, activation='tanh', strides=2))\n    model.add(MaxPooling1D(pool_size=5))\n    model.add(Dense(160,input_dim=40, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(320, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(365, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(125, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(25, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer=, metrics=['accuracy'])\n    model.summary()\n    return model\n\nmodel = build_network()\n\nmodel.fit(scaled_data, train_label[0], validation_split=0.3, epochs=25, callbacks=[es, ckpt])\n\n\nfrom keras.models import load_model\nnew_model = load_model(\"model.h5\")","3":":root {\n  --main-bg-color: coral; \n}\n\n#div1 {\n  background-color: var(--main-bg-color); \n}","4":"df['age_groups'] = pd.cut(df.age, bins=[0, 18, 65, 99], labels=['child', 'adult', 'elderly'])\n\n# 0 to 18 -> 'child'\n# 18 to 65 -> 'adult'\n# 65 to 99 -> 'elderly'","5":"\/* width *\/\n::-webkit-scrollbar {\n  width: 10px;\n}\n\n\/* Track *\/\n::-webkit-scrollbar-track {\n  background: #f1f1f1; \n}\n\n\/* Handle *\/\n::-webkit-scrollbar-thumb {\n  background: #888; \n}\n\n\/* Handle on hover *\/\n::-webkit-scrollbar-thumb:hover {\n  background: #555; \n}","6":"num1 = 100_000_000_000  # Visually chunk large numbers\nnum2 =   1_000_000_000  # without affecting the functionality\ntotal = num1 + num2\nprint(f'{total:,}')     # 101,000,000,000","7":"\/* Extra small devices (phones, 600px and down) *\/\n@media only screen and (max-width: 600px) {...}\n\n\/* Small devices (portrait tablets and large phones, 600px and up) *\/\n@media only screen and (min-width: 600px) {...}\n\n\/* Medium devices (landscape tablets, 768px and up) *\/\n@media only screen and (min-width: 768px) {...}\n\n\/* Large devices (laptops\/desktops, 992px and up) *\/\n@media only screen and (min-width: 992px) {...}\n\n\/* Extra large devices (large laptops and desktops, 1200px and up) *\/\n@media only screen and (min-width: 1200px) {...}","8":"df['Change'] = df.col.diff()\ndf['Percent Change'] = df.col.pct_change()*100\ndf.style.format({'Percent Change':'{:.2f}%'})","9":"# Current working directory\nos.getcwd()\n\n# Change the CWD\nos.chdir(PATH)\n\n# Delete any directory\nos.rmdir(PATH)\n\n# Create a new directory\nos.mkdir(PATH)\n\n# Rename a directory\nos.rename(OLD, NEW)\n\n# Delete entire directory tree\nshutil.rmtree(PATH)\n\n# Copy entire directory tree\nshutil.copytree(SRC, DST)\n\n# Move file or directory\nshutil.move(SRC, DST)","10":"import os\n\nfor folderName, subfolders, filenames in os.walk('DIRECTORY'):\n    print('The current folder is ' + folderName)\n\n    for subfolder in subfolders:\n        print('SUBFOLDER OF ' + folderName + ': ' + subfolder)\n    for filename in filenames:\n        print('FILE INSIDE ' + folderName + ': '+ filename)\n\n    print('')","11":"def add(a, b):\n   \"\"\"this function takes 2 numbers and return their sum\"\"\"\n   return a+b\n\nprint(add.__doc__)\n\n# Output:\n# this function takes 2 numbers and return their sum\n\n\nclass Car():\n   \"\"\"this is a class\"\"\"\n   pass\n\nprint(Car.__doc__)\n\n# Output:\n# this is a class","12":"class Person():\n    pass\n\nperson = Person()\n\np_key = 'name'\np_value = 'Ritvik'\n\n\nsetattr(person, p_key, p_value)\nname = getattr(person, p_key)","13":".col-container {\n    display: table; \/* Make the container element behave like a table *\/\n    width: 100%; \/* Set full-width to expand the whole page *\/\n}\n\n.col {\n    display: table-cell; \/* Make elements inside the container behave like table cells *\/\n}\n\n\n\/* If the browser window is smaller than 600px, make the columns stack on top of each other *\/\n@media only screen and (max-width: 600px) {\n  .col {\n    display: block;\n    width: 100%;\n  }\n}","14":"# it is a builtin function that allows us to\n# execute arbitrry strings in python\n\nadd = \"1+5+6\"\ndisplay = \"print('Hello')\"\n\nprint (eval(add))  # 12\neval(display)      # Hello","15":">>> df = pd.DataFrame({'sandwich':  ['PB&J', 'BLT', 'cheese'],\n      'ingredients':[['peanut butter', 'jelly'],\n                    ['bacon', 'lettuce', 'tomato'],\n                    ['swiss cheese']]})\n>>> df\n    sandwich    ingredients\n0   PB&J        [peanut butter, jelly]\n1   BLT         [bacon, lettuce, tomato]\n2   cheese      [swiss cheese]\n>>> df.explode('ingredients')\n    sandwich    ingredients\n0   PB&J        peanut butter\n0   PB&J        jelly\n1   BLT         bacon\n1   BLT         lettuce\n1   BLT         tomato\n2   cheese      swiss cheese","16":"flat_list = [item for sublist in l for item in sublist]","17":"def power(a: int, b:int) ->int:\n    return a**b\n\nprint(power.__annotations__)\n\n# Output:\n# {'a': <class 'int'>, 'b': <class 'int'>, 'return': <class 'int'>}","18":">>> import secrets\n>>> secrets.token_hex(16)\n'79e9d3b5d183b6e620e3776f77d95f4b'","19":"import warnings\r\nwarnings.filterwarnings(\"ignore\")","20":"filter: drop-shadow(0 15px 17px rgba(38,38,143,.37));","21":"function listFilter(inputEl, listEl, element) {\n    var input, filter, ul, li, a, i, txtValue;\n    input = document.getElementById(inputEl);\n    filter = input.value.toUpperCase();\n    ul = document.getElementById(listEl);\n    li = ul.getElementsByTagName(\"li\");\n    for (i = 0; i < li.length; i++) {\n        a = li[i].getElementsByTagName(element)[0];\n        txtValue = a.textContent || a.innerText;\n        if (txtValue.toUpperCase().indexOf(filter) > -1) {\n            li[i].style.display = \"\";\n        } else {\n            li[i].style.display = \"none\";\n        }\n    }\n}","22":"import sys, os\nsys.path.append(os.path.join(sys.path[0], 'modules'))\n\nimport module1","23":"pd.Series(' '.join(df['text']).split()).value_counts()[:n]","24":"with \\\n    open('a.txt') as a,\\\n    open('b.txt', 'w') as b:\n    for line in a:\n        b.write(line)","25":"from collections import namedtuple\n\nColor = namedtuple('Color', ['red', 'green', 'blue'])\ncolor = Color(55,155,255)\n\nprint(color[0])    # 55\nprint(color.red)   # 55","26":"pd.options.display.max_columns = 10\npd.options.display.max_colwidth = -1","27":"from getpass import getpass\nusername = input('Enter Username...')   # User Input is displayed in the commandline\npassword = getpass('Enter Password...') # User Input is not displayed in the commandline","28":"from keras.models import Sequential\nfrom keras.laeyrs import Dense, Dropout, LSTM, Embedding\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras import optimizers\n# optimizers.SGD()\n# optimizers.RMSProp()\n# optimizers.Adagrad()\n# optimizers.Adadelta()\n# optimizers.Adam()\n\nvocabulary_size = 7500\npad_length = 1000\ntokenizer = Tokenizer(num_words= vocabulary_size)\ntokenizer.fit_on_texts(X)\nsequences = tokenizer.texts_to_sequences(X)\npadded_sequences = pad_sequences(sequences, maxlen=pad_length)\n\nes = EarlyStopping(monitor='loss', mode='min', verbose=1)\nfilepath = \"model.h5\"\nckpt = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')\n\ndef build_network():\n    model = Sequential()\n    model.add(Embedding(vocabulary_size, 1024, input_length=pad_length))\n    model.add(LSTM(1024, dropout=0.2, recurrent_dropout=0.2))\n    model.add(Dense(160,input_dim=40, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(320, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(365, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(125, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(25, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer=, metrics=['accuracy'])\n    model.summary()\n    return model\n\nmodel = build_network()\n\nmodel.fit(scaled_data, train_label[0], validation_split=0.3, epochs=25, callbacks=[es, ckpt])\n\n\nfrom keras.models import load_model\nnew_model = load_model(\"model.h5\")","29":"\/\/ www.example.com?q=something\n\nvar params = new URLSearchParams(location.search);\nvar q = params.get('q')\nif (q == null){\n\n}else if (q == 'something'){\n\n}else{\n\n}","30":"# instead of \ndf[df['gender'] == 'F']['gender'] = 'Female'\n# do\ndf.loc[df['gender'] == 'F', 'gender'] = 'Female'","31":"#!D:\\Users\\Ritvik\\Anaconda3\\envs\\datascience\\python.exe","32":"html {\n  scroll-behavior: smooth;\n}\n\n\/\/For browsers that do not support the scroll-behavior property\n\n$(document).ready(function(){\n  $(\"a\").on('click', function(event) {\n    if (this.hash !== \"\") {\n      event.preventDefault();\n      var hash = this.hash;\n      $('html, body').animate({\n        scrollTop: $(hash).offset().top\n      }, 800, function(){\n        window.location.hash = hash;\n      });\n    }\n  });\n});","33":"df[['fisrt', 'middle', 'last']] = df.name.str.split(' ', expand=True)","34":"a\nabout\nabove\nacross\nafter\nafterwards\nagain\nagainst\nall\nalmost\nalone\nalong\nalready\nalso\nalthough\nalways\nam\namong\namongst\namoungst\namount\nan\nand\nanother\nany\nanyhow\nanyone\nanything\nanyway\nanywhere\nare\naround\nas\nat\nback\nbe\nbecame\nbecause\nbecome\nbecomes\nbecoming\nbeen\nbefore\nbeforehand\nbehind\nbeing\nbelow\nbeside\nbesides\nbetween\nbeyond\nbill\nboth\nbottom\nbut\nby\ncall\ncan\ncannot\ncant\nco\ncomputer\ncon\ncould\ncouldnt\ncry\nde\ndescribe\ndetail\ndo\ndone\ndown\ndue\nduring\neach\neg\neight\neither\neleven\nelse\nelsewhere\nempty\nenough\netc\neven\never\nevery\neveryone\neverything\neverywhere\nexcept\nfew\nfifteen\nfify\nfill\nfind\nfire\nfirst\nfive\nfor\nformer\nformerly\nforty\nfound\nfour\nfrom\nfront\nfull\nfurther\nget\ngive\ngo\nhad\nhas\nhasnt\nhave\nhe\nhence\nher\nhere\nhereafter\nhereby\nherein\nhereupon\nhers\nherse\"\nhim\nhimse\"\nhis\nhow\nhowever\nhundred\ni\nie\nif\nin\ninc\nindeed\ninterest\ninto\nis\nit\nits\nitse\"\nkeep\nlast\nlatter\nlatterly\nleast\nless\nltd\nmade\nmany\nmay\nme\nmeanwhile\nmight\nmill\nmine\nmore\nmoreover\nmost\nmostly\nmove\nmuch\nmust\nmy\nmyse\"\nname\nnamely\nneither\nnever\nnevertheless\nnext\nnine\nno\nnobody\nnone\nnoone\nnor\nnot\nnothing\nnow\nnowhere\nof\noff\noften\non\nonce\none\nonly\nonto\nor\nother\nothers\notherwise\nour\nours\nourselves\nout\nover\nown\npart\nper\nperhaps\nplease\nput\nrather\nre\nsame\nsee\nseem\nseemed\nseeming\nseems\nserious\nseveral\nshe\nshould\nshow\nside\nsince\nsincere\nsix\nsixty\nso\nsome\nsomehow\nsomeone\nsomething\nsometime\nsometimes\nsomewhere\nstill\nsuch\nsystem\ntake\nten\nthan\nthat\nthe\ntheir\nthem\nthemselves\nthen\nthence\nthere\nthereafter\nthereby\ntherefore\ntherein\nthereupon\nthese\nthey\nthick\nthin\nthird\nthis\nthose\nthough\nthree\nthrough\nthroughout\nthru\nthus\nto\ntogether\ntoo\ntop\ntoward\ntowards\ntwelve\ntwenty\ntwo\nun\nunder\nuntil\nup\nupon\nus\nvery\nvia\nwas\nwe\nwell\nwere\nwhat\nwhatever\nwhen\nwhence\nwhenever\nwhere\nwhereafter\nwhereas\nwhereby\nwherein\nwhereupon\nwherever\nwhether\nwhich\nwhile\nwhither\nwho\nwhoever\nwhole\nwhom\nwhose\nwhy\nwill\nwith\nwithin\nwithout\nwould\nyet\nyou\nyour\nyours\nyourself\nyourselves\nwhom\nm\ncouldn't\nuntil\nduring\nunder\nwasn\nboth\nout\ndidn\nbefore\naren't\nweren\nwhy\neach\nmightn\ndoesn\nbelow\nshould\nhers\nherself\nwho\ntoo\nmost\nand\nso\nabout\nshould've\nme\nyou'll\nno\nup\nshouldn\ncan\noff\nthan\njust\nonce\nain\nisn\nwon't\nthat'll\nthose\ndon\nhadn't\nisn't\nwhich\nshouldn't\nto\nthemselves\nyourself\nwas\non\nother\no\nhad\nher\nourselves\nmightn't\nhe\ndoes\nany\nyour\nthese\ndoing\nan\nby\nthrough\nwe\nfrom\nmy\nits\nit\nhaven\nma\nhasn't\nbeing\nve\nsome\nshan't\nover\nmustn't\nhimself\ntheirs\nwhere\nif\nmyself\ndo\ndon't\nwouldn't\nthe\nof\nneedn\nwere\naren\nin\nwasn't\nfew\nnow\nmustn\ns\ny\nyou're\ntheir\nbeen\nour\ni\nbecause\nnot\nbe\nthen\nagainst\nd\nhaven't\nhis\nagain\nhow\nall\nas\nweren't\nmore\nwouldn\nwill\ninto\nthis\nyou\nshe's\nare\nyourselves\ndidn't\nabove\nown\nneedn't\nwith\nyou'd\nhave\nam\nfurther\nthere\nvery\nnor\ndoesn't\nwhat\ndid\nthat\nwhile\nthem\nsuch\nhadn\nshe\nbetween\nhaving\ncouldn\nhas\na\nwon\nhim\nhere\nit's\nyou've\nat\nshan\nis\nonly\nthey\nll\nours\nbut\nafter\nhasn\nfor\nwhen\ndown\nsame\nor\nyours\nt\nre\nitself","35":"import nltk, re\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.stem import WordNetLemmatizer\n\ndef expand_contractions(text):\n    text = re.sub(r\"can't\", \"can not\", text)\n    text = re.sub(r\"what's\", \"what is \", text)\n    text = re.sub(r\"'s\", \" \", text)\n    text = re.sub(r\"'ve\", \" have \", text)\n    text = re.sub(r\"n't\", \" not \", text)\n    text = re.sub(r\"i'm\", \"i am \", text)\n    text = re.sub(r\"'re\", \" are \", text)\n    text = re.sub(r\"'d\", \" would \", text)\n    text = re.sub(r\"'ll\", \" will \", text)\n    return text\n\ndef remove_url(text):\n    URL_REGEX = re.compile(r'''((http[s]?:\/\/)[^ <>'\"{}|\\^`[\\]]*)''')\n    return URL_REGEX.sub(r' ', text)\n\ndef remove_handles(text):\n    HANDLES_REGEX = re.compile(r'@\\S+')\n    return HANDLES_REGEX.sub(r' ', text)\n\ndef remove_incomplete_last_word(text):\n    INCOMPLETE_LAST_WORD_REGEX = re.compile(r'\\S+\u2026')\n    return INCOMPLETE_LAST_WORD_REGEX.sub(r' ', text )\n\nremove_punc = lambda x : re.sub(r\"\\W\", ' ', x)\n\nremove_num = lambda x : re.sub(r\"\\d\", ' ', x)\n\nremove_extra_spaces = lambda x : re.sub(r\"\\s+\", ' ', x)\n\nremove_shortwords = lambda x: ' '.join(word for word in x.split() if len(word) > 2)\n\nlower_case = lambda x : x.lower()\n\nwith open('stopwords.txt') as f:\n    sw = map(lambda x : x.strip(), f.readlines())\nstop_words = set(nltk.corpus.stopwords.words('english'))|set(sw)\nremove_stopwords = lambda x: ' '.join(word for word in x.split() if word not in stop_words)\n\nps = PorterStemmer()\nps_stem = lambda x: ' '.join(ps.stem(word) for word in x.split())\n\nwnl = WordNetLemmatizer()\nwnl_lemmatize = lambda x: ' '.join(wnl.lemmatize(word) for word in x.split())\n\ndef tag_pos(x):\n    tag_list =  nltk.pos_tag(nltk.word_tokenize(x))\n    pos = \"\"\n    for t in tag_list:\n        pos += t[0] +'(' + t[1] +')' + ' '\n    return pos\n\ndef cleanText(x, rsw, stm, lem, tgps):\n    x = str(x)\n    x = remove_url(x)\n    x = lower_case(x)\n    x = expand_contractions(x)\n    x = remove_punc(x)\n    x = remove_num(x)\n    x = remove_extra_spaces(x)\n    x = remove_shortwords(x)\n    \n    if rsw:\n        x = remove_stopwords(x)\n    if stm:\n        x = ps_stem(x)\n    if lem:\n        x = wnl_lemmatize(x)\n    if tgps:\n        x = tag_pos(x)\n    return x","36":"import time, datetime\r\n\r\ndef timestamp():\r\n    ts = time.time()\r\n    st = datetime.datetime.fromtimestamp(ts).strftime('%Y%m%d%H%M%S')\r\n    return st","37":"from IPython.display import clear_output\nfor i in range(n):\n    clear_output(wait=True)\n\n    print('Current Progress', i, '\/', n)","38":"function trim(x) {\n    return x.replace(\/^\\s+|\\s+$\/g, '');\n}","39":"a, b, *c, d = (1,2,3,4,5)\n\nprint(a) # 1\nprint(b) # 2\nprint(c) # [3,4]\nprint(d) # 5","40":"from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer \n\ndef sentiment_scores(sentence): \n    sia_obj = SentimentIntensityAnalyzer() \n    sentiment_dict = sia_obj.polarity_scores(sentence) \n    if sentiment_dict['compound'] >= 0.05 : \n        return 1\n    elif sentiment_dict['compound'] <= - 0.05 : \n        return -1\n    else : \n        return 0","41":"headers = {\n    'User-Agent': 'Mozilla\/5.0 (Windows NT 6.1)'\n}\n\nres = requests.get(url, headers=headers)\nif res.status_code == requests.codes.ok:\n    ressoup = bs4.BeautifulSoup(res.text, 'lxml')\n    elems = ressoup.select('.link')\n    elems[i].getText()\n    elems[i].get('attr')\nelse:\n    print('Something went wrong')","42":"import numpy as np\nimport pandas as pd\n\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\ndef buildWordCloud(text):\n    wordcloud = WordCloud(width = W, height = H,\n                background_color =BGC,\n                min_font_size = 10,\n                max_words = mw).generate(text)\n    plt.figure(figsize = (W\/\/100, H\/\/100), facecolor = None)\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")\n    plt.tight_layout(pad = 0)\n    plt.show()","43":"# == tests equality\n# is test identity\n\nl1 = [1,2,3,4]\nl2 = [1,2,3,4]\n\nprint(l1 == l2) # True\nprint(l1 is l2) # False\n\nl3 = l1\nl1[0] = 5\n\nprint(l1 == l3) # True\nprint(l1 is l3) # True\nprint(l1, id(l1))       # [5, 2, 3, 4] 2391232377608\nprint(l3, id(l3))       # [5, 2, 3, 4] 2391232377608"}}