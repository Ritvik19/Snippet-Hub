{"Title":{"0":"AJAX and JSON","1":"ANN","2":"API Access Token","3":"Apply Mapping","4":"Broken Image","5":"CNN","6":"CNN (text)","7":"CSS Variables","8":"Call py func","9":"Combine Smaller Categories","10":"Continuous to Categorical","11":"Custom Scroll Bar","12":"Deal with Large Numbers","13":"Device Breakpoints","14":"Dict to XML","15":"Difference Between Rows","16":"Directory Manipulations","17":"Directory Walk","18":"Docstring","19":"Download a file","20":"Dynamic Attributes","21":"Editable HTML element","22":"Equal Height Columns","23":"Eval()","24":"Exploding a List","25":"Filtering","26":"Flask Template","27":"Flask templating","28":"Flatten a list","29":"Function Annotations","30":"GET request Flask","31":"Generate Secret Key","32":"Horizontal Scroll","33":"IgnoreWarnings","34":"Image Shadow","35":"Image as Text Background","36":"JSON-dict","37":"Keras Classification Metrics","38":"Key Press JavaScript","39":"Lighten\/Darken Colors","40":"List Filter","41":"Modules from Directory","42":"Most Common Words","43":"Multiple files single 'with'","44":"Multiple plots","45":"Multiple plots (Stacked)","46":"Navigator Object","47":"New HTML Window - JavaScript","48":"Notifications in Windows10","49":"Object Representation","50":"Open URLs JavaScript","51":"Pandas Display Settings","52":"Parallax Effect","53":"Password in command line","54":"Percentages in CrossTabs","55":"RNN (text)","56":"Read GET Data","57":"Sending Mails","58":"SettingWithCopyWarning","59":"Shebang","60":"Shuffle Children","61":"Smooth Scrolling","62":"Split in Multiple Columns","63":"Static Imports","64":"Stopwords","65":"Text Preprocessing","66":"Text Selection Color","67":"TimeStamp","68":"Tracking Loops","69":"Trim in JavaScript","70":"Truncate Strings","71":"Try Else","72":"Unpacking","73":"VADER Sentiment Analysis","74":"Webscraping","75":"Word Cloud","76":"XML Parsing","77":"all() and any()","78":"collections.Counter()","79":"collections.OrderedDict()","80":"collections.defalutdict()","81":"collections.deque()","82":"collections.namedtuple()","83":"dir","84":"is vs ==","85":"itertools.combinations()","86":"itertools.permutations()","87":"itertools.product()","88":"re.findall()","89":"re.group()"},"Description":{"0":"(javascript) (web)","1":"(python)","2":"(python)","3":"To a DataFrame using Dictionary (python)","4":"(css)(web)","5":"(keras) (python)","6":"(python)","7":"(web)","8":"(flask) (python)","9":"in a Series\n(pandas) (python)","10":"(pandas dataframe) (python)","11":"(web)","12":"(python)","13":"(css media-queries) (web)","14":"(python)","15":"(Pandas DataFrame) (python)","16":"(python)","17":"(python)","18":"(python)","19":"(python)","20":"(python)","21":"(html) (web)","22":"(css) (web)","23":"(python)","24":"(pandas dataframe) (python)","25":"(web)","26":"(flask) (python)","27":"(flask) (python)","28":"(python)","29":"(python)","30":"(flask) (python)","31":"(python)","32":"(javascript)(Mouse Wheel plugin)(web)","33":"(python)","34":"(web)","35":"(css) (web)","36":"(python)","37":"(keras) (python)","38":"(javascript) (web)","39":"(javascript)(web)","40":"(web)","41":"(python)","42":"In a DataFrame (python)","43":"(python)","44":"(python)","45":"(python)","46":"(javascript) (web)","47":"(javascript) (web)","48":"(python)","49":"__repr__ (python)","50":"(javascript) (web)","51":"(python)","52":"(css) (web)","53":"(python)","54":"(pandas)(python)","55":"(python)","56":"(javascript) (web)","57":"(python)","58":"(pandas) (python)","59":"Shebang line for anaconda virtual environments (python)","60":"(javascript)(jquery)(web)","61":"(css jquery) (web)","62":"(pandas dataframe) (python)","63":"(flask) (python)","64":"List of Stopwords(text)","65":"(python)","66":"(css)(web)","67":"(python)","68":"(python)","69":"(web)","70":"(css)(web)","71":"(python)","72":"(python)","73":"(python)","74":"(python)","75":"(python)","76":"(python)","77":"(python)","78":"(python)","79":"(python)","80":"(python)","81":"(python)","82":"(python)","83":"(python)","84":"(python)","85":"(python)","86":"(python)","87":"(python)","88":"(python)","89":"(python)"},"Code":{"0":"function loadCode(p, q, e)\n{\n  var xhttp = new XMLHttpRequest();\n  var filepath = '..\/..\/..'\n  console.log(filepath)\n  xhttp.onreadystatechange = function() {\n    if (this.readyState == 4 && this.status == 200) {\n     var dataObj = JSON.parse(this.responseText);\n     col1 = dataObj['col1']\n     content = ''\n     var i = 0;\n     while(typeof program_name[i] !== \"undefined\")\n     {\n        content += col1[i]+'\n'\n     }\n     document.getElementById(\"demo\").innerHTML = content;\n    }\n  };\n  xhttp.open(\"GET\", filepath, true);\n  xhttp.send();\n}","1":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras import optimizers\n# optimizers.SGD()\n# optimizers.RMSProp()\n# optimizers.Adagrad()\n# optimizers.Adadelta()\n# optimizers.Adam()\n\nes = EarlyStopping(monitor='loss', mode='min', verbose=1)\nfilepath = \"model.h5\"\nckpt = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')\n\ndef build_network():\n    model = Sequential()\n    model.add(Dense(160,input_dim=40, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(320, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(365, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(125, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(25, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer=, metrics=['accuracy'])\n    model.summary()\n    return model\n\nmodel = build_network()\n\nmodel.fit(scaled_data, train_label[0], validation_split=0.3, epochs=25, callbacks=[es, ckpt])\n\n\nfrom keras.models import load_model\nnew_model = load_model(\"model.h5\")","2":">>> from secrets import token_hex, token_urlsafe\n\n>>> token_hex(16)  \n'f9bf78b9a18ce6d46a0cd2b0b86df9da'\n\n>>> token_urlsafe(16)  \n'Drmhze6EPcv0fN_81Bj-nA'","3":"mapping = {'male':0, 'female':1}\n\n\ncols = ['A', 'B', 'C']\ndf[cols] = df[cols].applymap(mapping.get())","4":"\/* Add \" (PDF)\" text after links that go to PDFs *\/\na[href$=\".pdf\"]:after { content: \" (PDF)\"; }\n\n\/* If file size specified as data attribute, use that too *\/\na[href$=\".pdf\"][data-size]:after { content: \" (PDF, \" attr(data-size) \")\"; }\n\n\n<p>Watch out for the <a href=\"some.pdf\">PDF bomb<\/a> here!<\/p>\n\/\/ Watch out for the PDF bomb (PDF) here!\n\n\n<p>Watch out for the <a href=\"some.pdf\" data-size=\"2 MB\">PDF bomb<\/a> here!<\/p>\n\/\/ Watch out for the PDF bomb (PDF, 2 MB) here!","5":"import numpy as np\nimport pandas as pd\n\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing import image\n\nfrom keras import backend as K\n\n\ndef recall_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n        recall = true_positives \/ (possible_positives + K.epsilon())\n        return recall\n\ndef precision_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n        precision = true_positives \/ (predicted_positives + K.epsilon())\n        return precision\n\ndef f1_m(y_true, y_pred):\n    precision = precision_m(y_true, y_pred)\n    recall = recall_m(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))\n\n\nes = EarlyStopping(monitor='loss', mode='min', verbose=1)\nfilepath = \"model.h5\"\nckpt = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')\n\nimage_size = (90, 60)\n\ndatagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True,\n                                   validation_split=0.3)\n\ntraining_set = datagen.flow_from_directory('\/Train Images',\n                                                 target_size = image_size,\n                                                 batch_size = 32,\n                                                 class_mode = 'binary',\n                                                 subset='training')\n\nvalidation_set = datagen.flow_from_directory('\/Train Images',\n                                                 target_size = image_size,\n                                                 batch_size = 32,\n                                                 class_mode = 'binary',\n                                                 subset='validation')\n\n\ndef cnn(image_size):\n    classifier = Sequential()\n    classifier.add(Conv2D(32, (3, 3), input_shape = (*image_size, 3), activation = 'relu'))\n    classifier.add(Dropout(0.2))\n    classifier.add(Conv2D(32, (3, 3), activation = 'relu'))\n    classifier.add(MaxPooling2D(pool_size = (2, 2)))\n    classifier.add(Flatten())\n    classifier.add(Dense(units = 128, activation = 'relu'))\n    classifier.add(Dropout(0.2))\n    classifier.add(Dense(units = 1, activation = 'sigmoid'))\n    classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['acc',f1_m,precision_m, recall_m])\n    return classifier\n\n\nneuralnetwork = cnn(image_size)\n\n\nneuralnetwork.summary()\n\n\nneuralnetwork.fit_generator(training_set,\n                         steps_per_epoch = 8000,\n                         epochs = 25,\n                         validation_data = validation_set,\n                         validation_steps = 2000, \n                         callbacks=[es, ckpt])\n                         \n                         \n# Predictions\n\nimport numpy as np\nimport pandas as pd\nfrom keras.preprocessing import image\nfrom keras.models import load_model\nfrom keras import backend as K\n\ndef recall_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n        recall = true_positives \/ (possible_positives + K.epsilon())\n        return recall\n\ndef precision_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n        precision = true_positives \/ (predicted_positives + K.epsilon())\n        return precision\n\ndef f1_m(y_true, y_pred):\n    precision = precision_m(y_true, y_pred)\n    recall = recall_m(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))\n\nneuralnetwork = load_model('model.h5', custom_objects={'f1_m':f1_m, 'precision_m':precision_m, 'recall_m':recall_m})\n\ntest_image = image.load_img(f'\/Test Images\/{image_path}', target_size = (90, 60))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nclass_index = neuralnetwork.predict(test_image)[0][0]\nprobability = neuralnetwork.predict_proba(test_image)[0][0]","6":"from keras.models import Sequential\nfrom keras.laeyrs import Dense, Dropout, Flatten, Embedding, Convolution1D, MaxPooling1D\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras import optimizers\n# optimizers.SGD()\n# optimizers.RMSProp()\n# optimizers.Adagrad()\n# optimizers.Adadelta()\n# optimizers.Adam()\n\nvocabulary_size = 7500\npad_length = 1000\ntokenizer = Tokenizer(num_words= vocabulary_size)\ntokenizer.fit_on_texts(X)\nsequences = tokenizer.texts_to_sequences(X)\npadded_sequences = pad_sequences(sequences, maxlen=pad_length)\n\nes = EarlyStopping(monitor='loss', mode='min', verbose=1)\nfilepath = \"model.h5\"\nckpt = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')\n\ndef build_network():\n    model = Sequential()\n    model.add(Embedding(vocabulary_size, 1024, input_length=pad_length))\n    model.add(Convolution1D(1024, kernel_size=5, activation='tanh', strides=2))\n    model.add(MaxPooling1D(pool_size=5))\n    model.add(Dense(160,input_dim=40, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(320, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(365, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(125, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(25, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer=, metrics=['accuracy'])\n    model.summary()\n    return model\n\nmodel = build_network()\n\nmodel.fit(scaled_data, train_label[0], validation_split=0.3, epochs=25, callbacks=[es, ckpt])\n\n\nfrom keras.models import load_model\nnew_model = load_model(\"model.h5\")","7":":root {\n  --main-bg-color: coral; \n}\n\n#div1 {\n  background-color: var(--main-bg-color); \n}","8":"from flask import Flask, render_template, Response, request, redirect, url_for\n\napp = Flask(__name__)\n\n@app.route(\"\/\")\ndef index():\n    return render_template('index.html')\n\n@app.route(\"\/forward\/\", methods=['POST'])\ndef move_forward():\n    #Moving forward code\n    forward_message = \"Moving Forward...\"\n    return render_template('index.html', forward_message=forward_message);\n\n\nif __name__ == '__main__':\n    app.run(debug=True) \n    \n    \n    \n\/\/Then in your html, use this:\n<form action=\"\/forward\/\" method=\"post\">\n    <button name=\"forwardBtn\" type=\"submit\">Forward<\/button>\n<\/form>\n\/\/To execute your moving forward code. And include this:\n{{ forward_message }}","9":"top_five = data.value_counts().n_largest(5).index\ndata_updated = data.where(data.isin(top_five), other='Other')","10":"df['age_groups'] = pd.cut(df.age, bins=[0, 18, 65, 99], labels=['child', 'adult', 'elderly'])\n\n# 0 to 18 -> 'child'\n# 18 to 65 -> 'adult'\n# 65 to 99 -> 'elderly'","11":"\/* width *\/\n::-webkit-scrollbar {\n  width: 10px;\n}\n\n\/* Track *\/\n::-webkit-scrollbar-track {\n  background: #f1f1f1; \n}\n\n\/* Handle *\/\n::-webkit-scrollbar-thumb {\n  background: #888; \n}\n\n\/* Handle on hover *\/\n::-webkit-scrollbar-thumb:hover {\n  background: #555; \n}","12":"num1 = 100_000_000_000  # Visually chunk large numbers\nnum2 =   1_000_000_000  # without affecting the functionality\ntotal = num1 + num2\nprint(f'{total:,}')     # 101,000,000,000","13":"\/* Extra small devices (phones, 600px and down) *\/\n@media only screen and (max-width: 600px) {...}\n\n\/* Small devices (portrait tablets and large phones, 600px and up) *\/\n@media only screen and (min-width: 600px) {...}\n\n\/* Medium devices (landscape tablets, 768px and up) *\/\n@media only screen and (min-width: 768px) {...}\n\n\/* Large devices (laptops\/desktops, 992px and up) *\/\n@media only screen and (min-width: 992px) {...}\n\n\/* Extra large devices (large laptops and desktops, 1200px and up) *\/\n@media only screen and (min-width: 1200px) {...}","14":"from xml.etree import ElementTree\n\ndef convert_to_xml(tag, dct):\n    tree = ElementTree.ElementTree()\n    elem = ElementTree.Element(tag)\n    \n    for k, v in dct.items():\n        child = ElementTree.Element(k)\n        for subkey, subval in v.items():\n            grandchild = ElementTree.Element(subkey)\n            grandchild.text = str(subval)\n            child.append(grandchild)\n        elem.append(child)\n        tree._setroot(elem)\n    return tree\n    \n    \nconvert_to_xml('data', data_dct).write('data.xml')","15":"df['Change'] = df.col.diff()\ndf['Percent Change'] = df.col.pct_change()*100\ndf.style.format({'Percent Change':'{:.2f}%'})","16":"# Current working directory\nos.getcwd()\n\n# Change the CWD\nos.chdir(PATH)\n\n# Delete any directory\nos.rmdir(PATH)\n\n# Create a new directory\nos.mkdir(PATH)\n\n# Rename a directory\nos.rename(OLD, NEW)\n\n# Delete entire directory tree\nshutil.rmtree(PATH)\n\n# Copy entire directory tree\nshutil.copytree(SRC, DST)\n\n# Move file or directory\nshutil.move(SRC, DST)","17":"import os\n\nfor folderName, subfolders, filenames in os.walk('DIRECTORY'):\n    print('The current folder is ' + folderName)\n\n    for subfolder in subfolders:\n        print('SUBFOLDER OF ' + folderName + ': ' + subfolder)\n    for filename in filenames:\n        print('FILE INSIDE ' + folderName + ': '+ filename)\n\n    print('')","18":"def add(a, b):\n   \"\"\"this function takes 2 numbers and return their sum\"\"\"\n   return a+b\n\nprint(add.__doc__)\n\n# Output:\n# this function takes 2 numbers and return their sum\n\n\nclass Car():\n   \"\"\"this is a class\"\"\"\n   pass\n\nprint(Car.__doc__)\n\n# Output:\n# this is a class","19":"import requests\nres = requests.get('file\/url')\nres.raise_for_status()\nwith open('file.txt', 'wb') as f:\n    for chunk in res.iter_content(100000):\n        f.write(chunk)","20":"class Person():\n    pass\n\nperson = Person()\n\np_key = 'name'\np_value = 'Ritvik'\n\n\nsetattr(person, p_key, p_value)\nname = getattr(person, p_key)","21":"<div contenteditable='true'>This div is editable<\/div>","22":".col-container {\n    display: table; \/* Make the container element behave like a table *\/\n    width: 100%; \/* Set full-width to expand the whole page *\/\n}\n\n.col {\n    display: table-cell; \/* Make elements inside the container behave like table cells *\/\n}\n\n\n\/* If the browser window is smaller than 600px, make the columns stack on top of each other *\/\n@media only screen and (max-width: 600px) {\n  .col {\n    display: block;\n    width: 100%;\n  }\n}","23":"# it is a builtin function that allows us to\n# execute arbitrry strings in python\n\nadd = \"1+5+6\"\ndisplay = \"print('Hello')\"\n\nprint (eval(add))  # 12\neval(display)      # Hello","24":">>> df = pd.DataFrame({'sandwich':  ['PB&J', 'BLT', 'cheese'],\n      'ingredients':[['peanut butter', 'jelly'],\n                    ['bacon', 'lettuce', 'tomato'],\n                    ['swiss cheese']]})\n>>> df\n    sandwich    ingredients\n0   PB&J        [peanut butter, jelly]\n1   BLT         [bacon, lettuce, tomato]\n2   cheese      [swiss cheese]\n>>> df.explode('ingredients')\n    sandwich    ingredients\n0   PB&J        peanut butter\n0   PB&J        jelly\n1   BLT         bacon\n1   BLT         lettuce\n1   BLT         tomato\n2   cheese      swiss cheese","25":"<h2>PORTFOLIO<\/h2>\n<div id=\"myBtnContainer\">\n  <button class=\"btn active\" onclick=\"filterSelection('all')\"> Show all<\/button>\n  <button class=\"btn\" onclick=\"filterSelection('nature')\"> Nature<\/button>\n  <button class=\"btn\" onclick=\"filterSelection('cars')\"> Cars<\/button>\n  <button class=\"btn\" onclick=\"filterSelection('people')\"> People<\/button>\n<\/div>\n\n<!-- Portfolio Gallery Grid -->\n<div class=\"row\">\n  <div class=\"column nature\">\n    <div class=\"content\">\n      <img src=\"\/w3images\/mountains.jpg\" alt=\"Mountains\" style=\"width:100%\">\n      <h4>Mountains<\/h4>\n      <p>Lorem ipsum dolor..<\/p>\n    <\/div>\n  <\/div>\n  <div class=\"column nature\">\n    <div class=\"content\">\n      <img src=\"\/w3images\/lights.jpg\" alt=\"Lights\" style=\"width:100%\">\n      <h4>Lights<\/h4>\n      <p>Lorem ipsum dolor..<\/p>\n    <\/div>\n  <\/div>\n  <div class=\"column nature\">\n    <div class=\"content\">\n      <img src=\"\/w3images\/nature.jpg\" alt=\"Nature\" style=\"width:100%\">\n      <h4>Forest<\/h4>\n      <p>Lorem ipsum dolor..<\/p>\n    <\/div>\n  <\/div>\n\n  <div class=\"column cars\">\n    <div class=\"content\">\n      <img src=\"\/w3images\/cars1.jpg\" alt=\"Car\" style=\"width:100%\">\n      <h4>Retro<\/h4>\n      <p>Lorem ipsum dolor..<\/p>\n    <\/div>\n  <\/div>\n  <div class=\"column cars\">\n    <div class=\"content\">\n      <img src=\"\/w3images\/cars2.jpg\" alt=\"Car\" style=\"width:100%\">\n      <h4>Fast<\/h4>\n      <p>Lorem ipsum dolor..<\/p>\n    <\/div>\n  <\/div>\n  <div class=\"column cars\">\n    <div class=\"content\">\n      <img src=\"\/w3images\/cars3.jpg\" alt=\"Car\" style=\"width:100%\">\n      <h4>Classic<\/h4>\n      <p>Lorem ipsum dolor..<\/p>\n    <\/div>\n  <\/div>\n\n  <div class=\"column people\">\n    <div class=\"content\">\n      <img src=\"\/w3images\/people1.jpg\" alt=\"People\" style=\"width:100%\">\n      <h4>Girl<\/h4>\n      <p>Lorem ipsum dolor..<\/p>\n    <\/div>\n  <\/div>\n  <div class=\"column people\">\n    <div class=\"content\">\n      <img src=\"\/w3images\/people2.jpg\" alt=\"People\" style=\"width:100%\">\n      <h4>Man<\/h4>\n      <p>Lorem ipsum dolor..<\/p>\n    <\/div>\n  <\/div>\n  <div class=\"column people\">\n    <div class=\"content\">\n      <img src=\"\/w3images\/people3.jpg\" alt=\"People\" style=\"width:100%\">\n      <h4>Woman<\/h4>\n      <p>Lorem ipsum dolor..<\/p>\n    <\/div>\n  <\/div>\n<!-- END GRID -->\n<\/div>\n\n\/* Center website *\/\n.main {\n  max-width: 1000px;\n  margin: auto;\n}\n\nh1 {\n  font-size: 50px;\n  word-break: break-all;\n}\n\n.row {\n  margin: 8px -16px;\n}\n\n\/* Add padding BETWEEN each column (if you want) *\/\n.row,\n.row > .column {\n  padding: 8px;\n}\n\n\/* Create three equal columns that floats next to each other *\/\n.column {\n  float: left;\n  width: 33.33%;\n  display: none; \/* Hide columns by default *\/\n}\n\n\/* Clear floats after rows *\/\n.row:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n\n\/* Content *\/\n.content {\n  background-color: white;\n  padding: 10px;\n}\n\n\/* The \"show\" class is added to the filtered elements *\/\n.show {\n  display: block;\n}\n\n\/* Style the buttons *\/\n.btn {\n  border: none;\n  outline: none;\n  padding: 12px 16px;\n  background-color: white;\n  cursor: pointer;\n}\n\n\/* Add a grey background color on mouse-over *\/\n.btn:hover {\n  background-color: #ddd;\n}\n\n\/* Add a dark background color to the active button *\/\n.btn.active {\n  background-color: #666;\n   color: white;\n}\n\nfilterSelection(\"all\") \/\/ Execute the function and show all columns\nfunction filterSelection(c) {\n  var x, i;\n  x = document.getElementsByClassName(\"column\");\n  if (c == \"all\") c = \"\";\n  \/\/ Add the \"show\" class (display:block) to the filtered elements, and remove the \"show\" class from the elements that are not selected\n  for (i = 0; i < x.length; i++) {\n    w3RemoveClass(x[i], \"show\");\n    if (x[i].className.indexOf(c) > -1) w3AddClass(x[i], \"show\");\n  }\n}\n\n\/\/ Show filtered elements\nfunction w3AddClass(element, name) {\n  var i, arr1, arr2;\n  arr1 = element.className.split(\" \");\n  arr2 = name.split(\" \");\n  for (i = 0; i < arr2.length; i++) {\n    if (arr1.indexOf(arr2[i]) == -1) {\n      element.className += \" \" + arr2[i];\n    }\n  }\n}\n\n\/\/ Hide elements that are not selected\nfunction w3RemoveClass(element, name) {\n  var i, arr1, arr2;\n  arr1 = element.className.split(\" \");\n  arr2 = name.split(\" \");\n  for (i = 0; i < arr2.length; i++) {\n    while (arr1.indexOf(arr2[i]) > -1) {\n      arr1.splice(arr1.indexOf(arr2[i]), 1);\n    }\n  }\n  element.className = arr1.join(\" \");\n}\n\n\/\/ Add active class to the current button (highlight it)\nvar btnContainer = document.getElementById(\"myBtnContainer\");\nvar btns = btnContainer.getElementsByClassName(\"btn\");\nfor (var i = 0; i < btns.length; i++) {\n  btns[i].addEventListener(\"click\", function(){\n    var current = document.getElementsByClassName(\"active\");\n    current[0].className = current[0].className.replace(\" active\", \"\");\n    this.className += \" active\";\n  });\n}","26":"from flask import Flask, render_template\n\napp = Flask(__name__)\n\n\n@app.route('\/')\ndef home():\n    return render_template('index.html', message=message)\n\n\nif __name__ == '__main__':\n    app.run(debug=True)","27":"layout.html\n.\n.\n{% block content %}\n\n{% endblock %}\n.\n.\n\n\nindex.html\n{% extends \"layout.html\" %}\n{% block content %}\n.\n.\n{% endblock %}","28":"flat_list = [item for sublist in l for item in sublist]","29":"def power(a: int, b:int) ->int:\n    return a**b\n\nprint(power.__annotations__)\n\n# Output:\n# {'a': <class 'int'>, 'b': <class 'int'>, 'return': <class 'int'>}","30":"from flask import request\n\n@app.route('\/data')\ndef data():\n    # here we want to get the value of user (i.e. ?user=some-value)\n    user = request.args.get('user')","31":">>> import secrets\n>>> secrets.token_hex(16)\n'79e9d3b5d183b6e620e3776f77d95f4b'","32":"<script type='text\/javascript' src='http:\/\/ajax.googleapis.com\/ajax\/libs\/jquery\/1.3.2\/jquery.min.js?ver=1.3.2'><\/script>\n<script type='text\/javascript' src='\/js\/jquery.mousewheel.min.js'><\/script>\n\n$(function() {\n   $(\"body\").mousewheel(function(event, delta) {\n      this.scrollLeft -= (delta * 30);\n      event.preventDefault();\n   });\n});","33":"import warnings\r\nwarnings.filterwarnings(\"ignore\")","34":"filter: drop-shadow(0 15px 17px rgba(38,38,143,.37));","35":"<h1 class=\"text\"> Hello <\/h1>\n\n.text{\n    background-image: url('img.jpg');\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: 100%;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent\n    \n}","36":"import json\n\nwith open('model.json', 'w') as f:\n    k = model.keys() \n    v = model.values() \n    k1 = [str(i) for i in k]\n    json.dump(json.dumps(dict(zip(*[k1,v]))),f)   \n    \n    \nwith open('model.json', 'r') as f:\n    data = json.load(f)\n    dic = json.loads(data)\n    k = dic.keys() \n    v = dic.values() \n    k1 = [eval(i) for i in k] \n    model =  dict(zip(*[k1,v]))","37":"from keras import backend as K\n\ndef recall_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n        recall = true_positives \/ (possible_positives + K.epsilon())\n        return recall\n\ndef precision_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n        precision = true_positives \/ (predicted_positives + K.epsilon())\n        return precision\n\ndef f1_m(y_true, y_pred):\n    precision = precision_m(y_true, y_pred)\n    recall = recall_m(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))\n\n# compile the model\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc',f1_m,precision_m, recall_m])","38":"function go(e){\n    if(e.keyCode === 13){\n      e.preventDefault(); \/\/ Ensure it is only this code that rusn\n      alert(\"Enter was pressed\");\n    } \n}\n\n\/\/call: go(event)","39":"function LightenDarkenColor(col, amt) {\n  \n    var usePound = false;\n  \n    if (col[0] == \"#\") {\n        col = col.slice(1);\n        usePound = true;\n    }\n \n    var num = parseInt(col,16);\n \n    var r = (num >> 16) + amt;\n \n    if (r > 255) r = 255;\n    else if  (r < 0) r = 0;\n \n    var b = ((num >> 8) & 0x00FF) + amt;\n \n    if (b > 255) b = 255;\n    else if  (b < 0) b = 0;\n \n    var g = (num & 0x0000FF) + amt;\n \n    if (g > 255) g = 255;\n    else if (g < 0) g = 0;\n \n    return (usePound?\"#\":\"\") + (g | (b << 8) | (r << 16)).toString(16);\n  \n}\n\n\/\/ Lighten\nvar NewColor = LightenDarkenColor(\"#F06D06\", 20); \n\n\/\/ Darken\nvar NewColor = LightenDarkenColor(\"#F06D06\", -20);","40":"function listFilter(inputEl, listEl, element) {\n    var input, filter, ul, li, a, i, txtValue;\n    input = document.getElementById(inputEl);\n    filter = input.value.toUpperCase();\n    ul = document.getElementById(listEl);\n    li = ul.getElementsByTagName(\"li\");\n    for (i = 0; i < li.length; i++) {\n        a = li[i].getElementsByTagName(element)[0];\n        txtValue = a.textContent || a.innerText;\n        if (txtValue.toUpperCase().indexOf(filter) > -1) {\n            li[i].style.display = \"\";\n        } else {\n            li[i].style.display = \"none\";\n        }\n    }\n}","41":"import sys, os\nsys.path.append(os.path.join(sys.path[0], 'modules'))\n\nimport module1","42":"pd.Series(' '.join(df['text']).split()).value_counts()[:n]","43":"with \\\n    open('a.txt') as a,\\\n    open('b.txt', 'w') as b:\n    for line in a:\n        b.write(line)","44":"fig, ax1 = plt.subplots()\n\nax1.set_xlabel('Team')\nax1.set_ylabel('count')\n# plot 1\n\nax2 = ax1.twinx()\n\ncolor = 'tab:blue'\nax2.set_ylabel('count', color=color)\n# plot 2\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()\nplt.show()","45":"fig, ax = plt.subplots(figsize=(30, 16), nrows=4, ncols=1, frameon=False)\nfig.subplots_adjust(hspace=0)\nax[0].spines['bottom'].set_visible(False)\nax[1].spines['top'].set_visible(False)\nax[1].spines['bottom'].set_visible(False)\nax[2].spines['top'].set_visible(False)\nax[2].spines['bottom'].set_visible(False)\nax[3].spines['top'].set_visible(False)\n\n#plot 1\n#plot 2\n#plot 3\n#plot 4\n\nfor i in range(4):\n    ax[i].legend(loc=1, prop={'size': 12})\n\nplt.xticks(rotation=0)","46":"navigator.onLine          \/\/Determines whether the browser is online\nnavigator.cookieEnabled   \/\/Determines whether cookies are enabled\nnavigator.language        \/\/Returns the language of the browser\nnavigator.appVersion      \/\/Returns the version information of the browser\nnavigator.platform        \/\/Returns for which platform the platform is compiled\nnavigator.appName         \/\/Returns the name of the browser","47":"var win = window.open(\"\", \"Title\", \"toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=780,height=200,top=\"+(screen.height-400)+\",left=\"+(screen.width-840));\nwin.document.body.innerHTML = \"HTML\";","48":"# pip install win10toast pypiwin32 setuptools\n\nfrom win10toast import ToastNotifier\n\ntoaster = ToastNotifier()\n\ndef notification(title, message, duration=5, icon=None):\n    if icon:\n        toaster.show_toast(title, message, duration=duration, threaded=True, icon_path=icon)\n    else:\n        toaster.show_toast(title, message, duration=duration, threaded=True)\n\nnotification('Hey', 'Model Trained')","49":"When defining a class or an object in Python, it is useful to provide an \u2018official\u2019 way of representing that object as a string. For example:\n\n>>> file = open('file.txt', 'r')\n>>> print(file)\n<open file 'file.txt', mode 'r' at 0x10d30aaf0>\n\nThis makes debugging code a lot easier. Add it to your class definitions as below:\n\nclass someClass:\n    def __repr__(self):\n        return \"<some description here>\"\n        \nsomeInstance = someClass()\n\n# prints <some description here>\nprint(someInstance)","50":"window.open('url', '_blank');","51":"pd.options.display.max_columns = 10\npd.options.display.max_colwidth = -1","52":"<style>\n.parallax {\n  \/* The image used *\/\n  background-image: url(\"img_parallax.jpg\");\n\n  \/* Set a specific height *\/\n  height: 500px;\n\n  \/* Create the parallax scrolling effect *\/\n  background-attachment: fixed;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n}\n<\/style>\n\n<!-- Container element -->\n<div class=\"parallax\"><\/div>\n\n\/* Turn off parallax scrolling for all tablets and phones. Increase\/decrease the pixels if needed *\/\n@media only screen and (max-device-width: 1366px) {\n  .parallax {\n    background-attachment: scroll;\n  }\n}","53":"from getpass import getpass\nusername = input('Enter Username...')   # User Input is displayed in the commandline\npassword = getpass('Enter Password...') # User Input is not displayed in the commandline","54":"pd.crosstab(df.A, df.B).apply(lambda r: r\/r.sum(), axis=1)","55":"from keras.models import Sequential\nfrom keras.laeyrs import Dense, Dropout, LSTM, Embedding\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras import optimizers\n# optimizers.SGD()\n# optimizers.RMSProp()\n# optimizers.Adagrad()\n# optimizers.Adadelta()\n# optimizers.Adam()\n\nvocabulary_size = 7500\npad_length = 1000\ntokenizer = Tokenizer(num_words= vocabulary_size)\ntokenizer.fit_on_texts(X)\nsequences = tokenizer.texts_to_sequences(X)\npadded_sequences = pad_sequences(sequences, maxlen=pad_length)\n\nes = EarlyStopping(monitor='loss', mode='min', verbose=1)\nfilepath = \"model.h5\"\nckpt = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')\n\ndef build_network():\n    model = Sequential()\n    model.add(Embedding(vocabulary_size, 1024, input_length=pad_length))\n    model.add(LSTM(1024, dropout=0.2, recurrent_dropout=0.2))\n    model.add(Dense(160,input_dim=40, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(320, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(365, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(125, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(25, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer=, metrics=['accuracy'])\n    model.summary()\n    return model\n\nmodel = build_network()\n\nmodel.fit(scaled_data, train_label[0], validation_split=0.3, epochs=25, callbacks=[es, ckpt])\n\n\nfrom keras.models import load_model\nnew_model = load_model(\"model.h5\")","56":"\/\/ www.example.com?q=something\n\nvar params = new URLSearchParams(location.search);\nvar q = params.get('q')\nif (q == null){\n\n}else if (q == 'something'){\n\n}else{\n\n}","57":"import smtplib, ssl\n\nsmtp_server = \"smtp.gmail.com\"\nport = 587  # For starttls\nsender_email = \"@gmail.com\"\npassword = \"\"\n\n# Create a secure SSL context\ncontext = ssl.create_default_context()\n\n# Try to log in to server and send email\ntry:\n    server = smtplib.SMTP(smtp_server,port)\n    server.ehlo() # Can be omitted\n    server.starttls(context=context) # Secure the connection\n    server.ehlo() # Can be omitted\n    server.login(sender_email, password)\n    # TODO: Send email here\n    server.sendmail(sender_email, receiver_email, message)\nexcept Exception as e:\n    # Print any error messages to stdout\n    print(e)\nfinally:\n    server.quit()","58":"# instead of \ndf[df['gender'] == 'F']['gender'] = 'Female'\n# do\ndf.loc[df['gender'] == 'F', 'gender'] = 'Female'","59":"#!D:\\Users\\Ritvik\\Anaconda3\\envs\\datascience\\python.exe","60":"$.fn.shuffleChildren = function() {\n    $.each(this.get(), function(index, el) {\n        var $el = $(el);\n        var $find = $el.children();\n\n        $find.sort(function() {\n            return 0.5 - Math.random();\n        });\n\n        $el.empty();\n        $find.appendTo($el);\n    });\n};\n\n$(\".parent-element\").shuffleChildren();","61":"html {\n  scroll-behavior: smooth;\n}\n\n\/\/For browsers that do not support the scroll-behavior property\n\n$(document).ready(function(){\n  $(\"a\").on('click', function(event) {\n    if (this.hash !== \"\") {\n      event.preventDefault();\n      var hash = this.hash;\n      $('html, body').animate({\n        scrollTop: $(hash).offset().top\n      }, 800, function(){\n        window.location.hash = hash;\n      });\n    }\n  });\n});","62":"df[['fisrt', 'middle', 'last']] = df.name.str.split(' ', expand=True)","63":"{{ \" url_for('static', filename=\"filename\")\"}}","64":"a\nabout\nabove\nacross\nafter\nafterwards\nagain\nagainst\nall\nalmost\nalone\nalong\nalready\nalso\nalthough\nalways\nam\namong\namongst\namoungst\namount\nan\nand\nanother\nany\nanyhow\nanyone\nanything\nanyway\nanywhere\nare\naround\nas\nat\nback\nbe\nbecame\nbecause\nbecome\nbecomes\nbecoming\nbeen\nbefore\nbeforehand\nbehind\nbeing\nbelow\nbeside\nbesides\nbetween\nbeyond\nbill\nboth\nbottom\nbut\nby\ncall\ncan\ncannot\ncant\nco\ncomputer\ncon\ncould\ncouldnt\ncry\nde\ndescribe\ndetail\ndo\ndone\ndown\ndue\nduring\neach\neg\neight\neither\neleven\nelse\nelsewhere\nempty\nenough\netc\neven\never\nevery\neveryone\neverything\neverywhere\nexcept\nfew\nfifteen\nfify\nfill\nfind\nfire\nfirst\nfive\nfor\nformer\nformerly\nforty\nfound\nfour\nfrom\nfront\nfull\nfurther\nget\ngive\ngo\nhad\nhas\nhasnt\nhave\nhe\nhence\nher\nhere\nhereafter\nhereby\nherein\nhereupon\nhers\nherse\"\nhim\nhimse\"\nhis\nhow\nhowever\nhundred\ni\nie\nif\nin\ninc\nindeed\ninterest\ninto\nis\nit\nits\nitse\"\nkeep\nlast\nlatter\nlatterly\nleast\nless\nltd\nmade\nmany\nmay\nme\nmeanwhile\nmight\nmill\nmine\nmore\nmoreover\nmost\nmostly\nmove\nmuch\nmust\nmy\nmyse\"\nname\nnamely\nneither\nnever\nnevertheless\nnext\nnine\nno\nnobody\nnone\nnoone\nnor\nnot\nnothing\nnow\nnowhere\nof\noff\noften\non\nonce\none\nonly\nonto\nor\nother\nothers\notherwise\nour\nours\nourselves\nout\nover\nown\npart\nper\nperhaps\nplease\nput\nrather\nre\nsame\nsee\nseem\nseemed\nseeming\nseems\nserious\nseveral\nshe\nshould\nshow\nside\nsince\nsincere\nsix\nsixty\nso\nsome\nsomehow\nsomeone\nsomething\nsometime\nsometimes\nsomewhere\nstill\nsuch\nsystem\ntake\nten\nthan\nthat\nthe\ntheir\nthem\nthemselves\nthen\nthence\nthere\nthereafter\nthereby\ntherefore\ntherein\nthereupon\nthese\nthey\nthick\nthin\nthird\nthis\nthose\nthough\nthree\nthrough\nthroughout\nthru\nthus\nto\ntogether\ntoo\ntop\ntoward\ntowards\ntwelve\ntwenty\ntwo\nun\nunder\nuntil\nup\nupon\nus\nvery\nvia\nwas\nwe\nwell\nwere\nwhat\nwhatever\nwhen\nwhence\nwhenever\nwhere\nwhereafter\nwhereas\nwhereby\nwherein\nwhereupon\nwherever\nwhether\nwhich\nwhile\nwhither\nwho\nwhoever\nwhole\nwhom\nwhose\nwhy\nwill\nwith\nwithin\nwithout\nwould\nyet\nyou\nyour\nyours\nyourself\nyourselves\nwhom\nm\ncouldn't\nuntil\nduring\nunder\nwasn\nboth\nout\ndidn\nbefore\naren't\nweren\nwhy\neach\nmightn\ndoesn\nbelow\nshould\nhers\nherself\nwho\ntoo\nmost\nand\nso\nabout\nshould've\nme\nyou'll\nno\nup\nshouldn\ncan\noff\nthan\njust\nonce\nain\nisn\nwon't\nthat'll\nthose\ndon\nhadn't\nisn't\nwhich\nshouldn't\nto\nthemselves\nyourself\nwas\non\nother\no\nhad\nher\nourselves\nmightn't\nhe\ndoes\nany\nyour\nthese\ndoing\nan\nby\nthrough\nwe\nfrom\nmy\nits\nit\nhaven\nma\nhasn't\nbeing\nve\nsome\nshan't\nover\nmustn't\nhimself\ntheirs\nwhere\nif\nmyself\ndo\ndon't\nwouldn't\nthe\nof\nneedn\nwere\naren\nin\nwasn't\nfew\nnow\nmustn\ns\ny\nyou're\ntheir\nbeen\nour\ni\nbecause\nnot\nbe\nthen\nagainst\nd\nhaven't\nhis\nagain\nhow\nall\nas\nweren't\nmore\nwouldn\nwill\ninto\nthis\nyou\nshe's\nare\nyourselves\ndidn't\nabove\nown\nneedn't\nwith\nyou'd\nhave\nam\nfurther\nthere\nvery\nnor\ndoesn't\nwhat\ndid\nthat\nwhile\nthem\nsuch\nhadn\nshe\nbetween\nhaving\ncouldn\nhas\na\nwon\nhim\nhere\nit's\nyou've\nat\nshan\nis\nonly\nthey\nll\nours\nbut\nafter\nhasn\nfor\nwhen\ndown\nsame\nor\nyours\nt\nre\nitself","65":"import nltk, re\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.stem import WordNetLemmatizer\n\ndef expand_contractions(text):\n    text = re.sub(r\"can't\", \"can not\", text)\n    text = re.sub(r\"what's\", \"what is \", text)\n    text = re.sub(r\"'s\", \" \", text)\n    text = re.sub(r\"'ve\", \" have \", text)\n    text = re.sub(r\"n't\", \" not \", text)\n    text = re.sub(r\"i'm\", \"i am \", text)\n    text = re.sub(r\"'re\", \" are \", text)\n    text = re.sub(r\"'d\", \" would \", text)\n    text = re.sub(r\"'ll\", \" will \", text)\n    return text\n\ndef remove_url(text):\n    URL_REGEX = re.compile(r'''((http[s]?:\/\/)[^ <>'\"{}|\\^`[\\]]*)''')\n    return URL_REGEX.sub(r' ', text)\n\ndef remove_handles(text):\n    HANDLES_REGEX = re.compile(r'@\\S+')\n    return HANDLES_REGEX.sub(r' ', text)\n\ndef remove_incomplete_last_word(text):\n    INCOMPLETE_LAST_WORD_REGEX = re.compile(r'\\S+\u2026')\n    return INCOMPLETE_LAST_WORD_REGEX.sub(r' ', text )\n\nremove_punc = lambda x : re.sub(r\"\\W\", ' ', x)\n\nremove_num = lambda x : re.sub(r\"\\d\", ' ', x)\n\nremove_extra_spaces = lambda x : re.sub(r\"\\s+\", ' ', x)\n\nremove_shortwords = lambda x: ' '.join(word for word in x.split() if len(word) > 2)\n\nlower_case = lambda x : x.lower()\n\nwith open('stopwords.txt') as f:\n    sw = map(lambda x : x.strip(), f.readlines())\nstop_words = set(nltk.corpus.stopwords.words('english'))|set(sw)\nremove_stopwords = lambda x: ' '.join(word for word in x.split() if word not in stop_words)\n\nps = PorterStemmer()\nps_stem = lambda x: ' '.join(ps.stem(word) for word in x.split())\n\nwnl = WordNetLemmatizer()\nwnl_lemmatize = lambda x: ' '.join(wnl.lemmatize(word) for word in x.split())\n\ndef tag_pos(x):\n    tag_list =  nltk.pos_tag(nltk.word_tokenize(x))\n    pos = \"\"\n    for t in tag_list:\n        pos += t[0] +'(' + t[1] +')' + ' '\n    return pos\n\ndef cleanText(x, rsw, stm, lem, tgps):\n    x = str(x)\n    x = remove_url(x)\n    x = lower_case(x)\n    x = expand_contractions(x)\n    x = remove_punc(x)\n    x = remove_num(x)\n    x = remove_extra_spaces(x)\n    x = remove_shortwords(x)\n    \n    if rsw:\n        x = remove_stopwords(x)\n    if stm:\n        x = ps_stem(x)\n    if lem:\n        x = wnl_lemmatize(x)\n    if tgps:\n        x = tag_pos(x)\n    return x","66":"::selection {\n  background-color: #FFA;\n  color: #000;\n}","67":"import time, datetime\r\n\r\ndef timestamp():\r\n    ts = time.time()\r\n    st = datetime.datetime.fromtimestamp(ts).strftime('%Y%m%d%H%M%S')\r\n    return st","68":"from IPython.display import clear_output\nfor i in range(n):\n    clear_output(wait=True)\n\n    print('Current Progress', i, '\/', n)","69":"function trim(x) {\n    return x.replace(\/^\\s+|\\s+$\/g, '');\n}","70":".truncate {\n  width: 250px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}","71":"try:\n    2*3\nexcept TypeError:\n    print(\"An exception was raised\")\nelse:\n    print(\"Thank God, no exceptions were raised.\")","72":"a, b, *c, d = (1,2,3,4,5)\n\nprint(a) # 1\nprint(b) # 2\nprint(c) # [3,4]\nprint(d) # 5","73":"from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer \n\ndef sentiment_scores(sentence): \n    sia_obj = SentimentIntensityAnalyzer() \n    sentiment_dict = sia_obj.polarity_scores(sentence) \n    if sentiment_dict['compound'] >= 0.05 : \n        return 1\n    elif sentiment_dict['compound'] <= - 0.05 : \n        return -1\n    else : \n        return 0","74":"headers = {\n    'User-Agent': 'Mozilla\/5.0 (Windows NT 6.1)'\n}\n\nres = requests.get(url, headers=headers)\nif res.status_code == requests.codes.ok:\n    ressoup = bs4.BeautifulSoup(res.text, 'lxml')\n    elems = ressoup.select('.link')\n    elems[i].getText()\n    elems[i].get('attr')\nelse:\n    print('Something went wrong')","75":"import numpy as np\nimport pandas as pd\n\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\ndef buildWordCloud(text):\n    wordcloud = WordCloud(width = W, height = H,\n                background_color =BGC,\n                min_font_size = 10,\n                max_words = mw).generate(text)\n    plt.figure(figsize = (W\/\/100, H\/\/100), facecolor = None)\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")\n    plt.tight_layout(pad = 0)\n    plt.show()","76":"import xml.etree.ElementTree as etree\ntree = etree.ElementTree(etree.fromstring(xml_string))\nroot = tree.getroot()\nroot.getchildren()\nnode.attrib","77":"# any()\n# This expression returns True if any element of the iterable is true.\n# If the iterable is empty, it will return False.\n\n>>> any([1>0,1==0,1<0])\nTrue\n>>> any([1<0,2<1,3<2])\nFalse\n\n# all()\n# This expression returns True if all of the elements of the iterable are true. \n# If the iterable is empty, it will return True.\n\n>>> all(['a'<'b','b'<'c'])\nTrue\n>>> all(['a'<'b','c'<'b'])\nFalse","78":">>> from collections import Counter\n>>> \n>>> myList = [1,1,2,3,4,5,3,2,3,4,2,1,2,3]\n>>> print Counter(myList)\nCounter({2: 4, 3: 4, 1: 3, 4: 2, 5: 1})\n>>>\n>>> print Counter(myList).items()\n[(1, 3), (2, 4), (3, 4), (4, 2), (5, 1)]\n>>> \n>>> print Counter(myList).keys()\n[1, 2, 3, 4, 5]\n>>> \n>>> print Counter(myList).values()\n[3, 4, 4, 2, 1]","79":">>> from collections import OrderedDict\n>>> \n>>> ordinary_dictionary = {}\n>>> ordinary_dictionary['a'] = 1\n>>> ordinary_dictionary['b'] = 2\n>>> ordinary_dictionary['c'] = 3\n>>> ordinary_dictionary['d'] = 4\n>>> ordinary_dictionary['e'] = 5\n>>> \n>>> print ordinary_dictionary\n{'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4}\n>>> \n>>> ordered_dictionary = OrderedDict()\n>>> ordered_dictionary['a'] = 1\n>>> ordered_dictionary['b'] = 2\n>>> ordered_dictionary['c'] = 3\n>>> ordered_dictionary['d'] = 4\n>>> ordered_dictionary['e'] = 5\n>>> \n>>> print ordered_dictionary\nOrderedDict([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)])","80":"# The defaultdict tool is a container in the collections class of Python. \n# It's similar to the usual dictionary (dict) container, \n# but the only difference is that a defaultdict will have a default value if that key has not been set yet. \n# If you didn't use a defaultdict you'd have to check to see if that key exists, \n# and if it doesn't, set it to what you want.\n>>> from collections import defaultdict\n>>> d = defaultdict(list)\n>>> d['python'].append(\"awesome\")\n>>> d['something-else'].append(\"not relevant\")\n>>> d['python'].append(\"language\")\n>>> for i in d.items():\n...     print(i)\n...\n('python', ['awesome', 'language'])\n('something-else', ['not relevant'])","81":">>> from collections import deque\n>>> d = deque()\n>>> d.append(1)\n>>> print d\ndeque([1])\n>>> d.appendleft(2)\n>>> print d\ndeque([2, 1])\n>>> d.clear()\n>>> print d\ndeque([])\n>>> d.extend('1')\n>>> print d\ndeque(['1'])\n>>> d.extendleft('234')\n>>> print d\ndeque(['4', '3', '2', '1'])\n>>> d.count('1')\n1\n>>> d.pop()\n'1'\n>>> print d\ndeque(['4', '3', '2'])\n>>> d.popleft()\n'4'\n>>> print d\ndeque(['3', '2'])\n>>> d.extend('7896')\n>>> print d\ndeque(['3', '2', '7', '8', '9', '6'])\n>>> d.remove('2')\n>>> print d\ndeque(['3', '7', '8', '9', '6'])\n>>> d.reverse()\n>>> print d\ndeque(['6', '9', '8', '7', '3'])\n>>> d.rotate(3)\n>>> print d\ndeque(['8', '7', '3', '6', '9'])","82":">>> from collections import namedtuple\n>>> Point = namedtuple('Point','x,y')\n>>> pt1 = Point(1,2)\n>>> pt2 = Point(3,4)\n>>> dot_product = ( pt1.x * pt2.x ) +( pt1.y * pt2.y )\n>>> print dot_product\n11\n\n>>> from collections import namedtuple\n>>> Car = namedtuple('Car','Price Mileage Colour Class')\n>>> xyz = Car(Price = 100000, Mileage = 30, Colour = 'Cyan', Class = 'Y')\n>>> print xyz\nCar(Price=100000, Mileage=30, Colour='Cyan', Class='Y')\n>>> print xyz.Class\nY","83":"look inside a Python object and see what attributes it has\n\n>>> dir()\n>>> dir(\"Hello World\")\n>>> dir(dir)\n\nThis can be a really useful feature when running Python interactively, and for dynamically exploring objects and modules you are working with.","84":"# == tests equality\n# is test identity\n\nl1 = [1,2,3,4]\nl2 = [1,2,3,4]\n\nprint(l1 == l2) # True\nprint(l1 is l2) # False\n\nl3 = l1\nl1[0] = 5\n\nprint(l1 == l3) # True\nprint(l1 is l3) # True\nprint(l1, id(l1))       # [5, 2, 3, 4] 2391232377608\nprint(l3, id(l3))       # [5, 2, 3, 4] 2391232377608","85":">>> from itertools import combinations\n>>> \n>>> print list(combinations('12345',2))\n[('1', '2'), ('1', '3'), ('1', '4'), ('1', '5'), ('2', '3'), ('2', '4'), ('2', '5'), ('3', '4'), ('3', '5'), ('4', '5')]\n>>> \n>>> A = [1,1,3,3,3]\n>>> print list(combinations(A,4))\n[(1, 1, 3, 3), (1, 1, 3, 3), (1, 1, 3, 3), (1, 3, 3, 3), (1, 3, 3, 3)]\n>>> from itertools import combinations_with_replacement\n>>> \n>>> print list(combinations_with_replacement('12345',2))\n[('1', '1'), ('1', '2'), ('1', '3'), ('1', '4'), ('1', '5'), ('2', '2'), ('2', '3'), ('2', '4'), ('2', '5'), ('3', '3'), ('3', '4'), ('3', '5'), ('4', '4'), ('4', '5'), ('5', '5')]\n>>> \n>>> A = [1,1,3,3,3]\n>>> print list(combinations(A,2))\n[(1, 1), (1, 3), (1, 3), (1, 3), (1, 3), (1, 3), (1, 3), (3, 3), (3, 3), (3, 3)]","86":">>> from itertools import permutations\n>>> print permutations(['1','2','3'])\n<itertools.permutations object at 0x02A45210>\n>>> \n>>> print list(permutations(['1','2','3']))\n[('1', '2', '3'), ('1', '3', '2'), ('2', '1', '3'), ('2', '3', '1'), ('3', '1', '2'), ('3', '2', '1')]\n>>> \n>>> print list(permutations(['1','2','3'],2))\n[('1', '2'), ('1', '3'), ('2', '1'), ('2', '3'), ('3', '1'), ('3', '2')]\n>>>\n>>> print list(permutations('abc',3))\n[('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]","87":">>> from itertools import product\n>>>\n>>> print list(product([1,2,3],repeat = 2))\n[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]\n>>>\n>>> print list(product([1,2,3],[3,4]))\n[(1, 3), (1, 4), (2, 3), (2, 4), (3, 3), (3, 4)]\n>>>\n>>> A = [[1,2,3],[3,4,5]]\n>>> print list(product(*A))\n[(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 3), (3, 4), (3, 5)]\n>>>\n>>> B = [[1,2,3],[3,4,5],[7,8]]\n>>> print list(product(*B))\n[(1, 3, 7), (1, 3, 8), (1, 4, 7), (1, 4, 8), (1, 5, 7), (1, 5, 8), (2, 3, 7), (2, 3, 8), (2, 4, 7), (2, 4, 8), (2, 5, 7), (2, 5, 8), (3, 3, 7), (3, 3, 8), (3, 4, 7), (3, 4, 8), (3, 5, 7), (3, 5, 8)]","88":">>> import re\n>>> re.findall(r'\\w','http:\/\/www.hackerrank.com\/')\n['h', 't', 't', 'p', 'w', 'w', 'w', 'h', 'a', 'c', 'k', 'e', 'r', 'r', 'a', 'n', 'k', 'c', 'o', 'm']\n\n>>> import re\n>>> re.finditer(r'\\w','http:\/\/www.hackerrank.com\/')\n<callable-iterator object at 0x0266C790>\n>>> map(lambda x: x.group(),re.finditer(r'\\w','http:\/\/www.hackerrank.com\/'))\n['h', 't', 't', 'p', 'w', 'w', 'w', 'h', 'a', 'c', 'k', 'e', 'r', 'r', 'a', 'n', 'k', 'c', 'o', 'm']","89":">>> import re\n>>> m = re.match(r'(\\w+)@(\\w+)\\.(\\w+)','username@hackerrank.com')\n>>> m.group(0)       # The entire match \n'username@hackerrank.com'\n>>> m.group(1)       # The first parenthesized subgroup.\n'username'\n>>> m.group(2)       # The second parenthesized subgroup.\n'hackerrank'\n>>> m.group(3)       # The third parenthesized subgroup.\n'com'\n>>> m.group(1,2,3)   # Multiple arguments give us a tuple.\n('username', 'hackerrank', 'com')\n\n>>> import re\n>>> m = re.match(r'(\\w+)@(\\w+)\\.(\\w+)','username@hackerrank.com')\n>>> m.groups()\n('username', 'hackerrank', 'com')\n\n>>> m = re.match(r'(?P<user>\\w+)@(?P<website>\\w+)\\.(?P<extension>\\w+)','myname@hackerrank.com')\n>>> m.groupdict()\n{'website': 'hackerrank', 'user': 'myname', 'extension': 'com'}"}}