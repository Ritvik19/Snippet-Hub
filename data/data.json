{"Title":{"0":"AJAX and JSON","1":"ANN","2":"API Access Token","3":"Apply - Multiple Columns","4":"Apply Mapping","5":"Broken Image","6":"CNN","7":"CNN (text)","8":"CSS Variables","9":"Call py func","10":"Combine Smaller Categories","11":"Continuous to Categorical","12":"Controlling What Can Be Imported","13":"Custom Scroll Bar","14":"Deal with Large Numbers","15":"Device Breakpoints","16":"Dict to XML","17":"Difference Between Rows","18":"Directory Manipulations","19":"Directory Walk","20":"Docstring","21":"Download a file","22":"Dynamic Attributes","23":"Editable HTML element","24":"Equal Height Columns","25":"Eval()","26":"Exploding a List","27":"Filtering","28":"Flask Template","29":"Flask templating","30":"Flatten a list","31":"Function Annotations","32":"GET request Flask","33":"Generate Secret Key","34":"Geo Plotting","35":"HTML Template","36":"Horizontal Scroll","37":"IgnoreWarnings","38":"Image Shadow","39":"Image as Text Background","40":"JSON-dict","41":"JavaScript Utilities","42":"Keras Classification Metrics","43":"Key Press JavaScript","44":"Lighten\/Darken Colors","45":"List Filter","46":"Logging","47":"Logging- Function Decorator","48":"MarkUp Tag Generation","49":"Modules from Directory","50":"Most Common Words","51":"Multiple files single 'with'","52":"Multiple plots","53":"Multiple plots (Stacked)","54":"Navigator Object","55":"New Column at Specific Loc","56":"New HTML Window - JavaScript","57":"Notifications in Windows10","58":"Object Representation","59":"Open URLs JavaScript","60":"Pandas Display Settings","61":"Parallax Effect","62":"Password Hashing","63":"Password in command line","64":"Percentages in CrossTabs","65":"RNN (text)","66":"Read GET Data","67":"Saving np Array","68":"Sending Mails","69":"SettingWithCopyWarning","70":"Shebang","71":"Shuffle Children","72":"Slicing an Iterator","73":"Smooth Scrolling","74":"Social Share Links","75":"Split in Multiple Columns","76":"Static Imports","77":"Stopwords","78":"Support for with Statements","79":"Text Preprocessing","80":"Text Selection Color","81":"TimeStamp","82":"Timming- Function Decorator","83":"Tracking Loops","84":"Trim in JavaScript","85":"Truncate Strings","86":"Try Else","87":"Unpacking","88":"VADER Sentiment Analysis","89":"Webscraping","90":"Word Cloud","91":"XML Parsing","92":"all() and any()","93":"collections.Counter()","94":"collections.OrderedDict()","95":"collections.defalutdict()","96":"collections.deque()","97":"collections.namedtuple()","98":"dir","99":"is vs ==","100":"itertools.combinations()","101":"itertools.permutations()","102":"itertools.product()","103":"js-127: Rest parameter syntax","104":"js-127: all","105":"js-127: allEqual","106":"js-127: approximatelyEqual","107":"js-127: arrayToCSV","108":"js-127: arrayToHtmlList","109":"js-127: attempt","110":"js-127: bifurcate","111":"js-127: bifurcateBy","112":"js-127: bottomVisible","113":"js-127: byteSize","114":"js-127: capitalize","115":"js-127: capitalizeEveryWord","116":"js-127: castArray","117":"js-127: compact","118":"js-127: countOccurrences","119":"js-127: currentURL","120":"js-127: deepFlatten","121":"js-127: default","122":"js-127: digitize","123":"js-127: elementContains","124":"js-127: filterNonUnique","125":"js-127: findKey","126":"js-127: getDaysDiffBetweenDates","127":"js-127: getType","128":"js-127: hide","129":"js-127: httpsRedirect","130":"js-127: insertAfter","131":"js-127: insertBefore","132":"js-127: is","133":"js-127: isAnagram","134":"js-127: isArrayLike","135":"js-127: isBrowser","136":"js-127: isBrowserTabFocused","137":"js-127: isNil","138":"js-127: isValidJSON","139":"js-127: matches","140":"js-127: nodeListToArray","141":"js-127: pad","142":"js-127: redirect","143":"js-127: round","144":"js-127: sample","145":"js-127: sampleSize","146":"js-127: scrollToTop","147":"js-127: serializeCookie","148":"js-127: show","149":"js-127: smoothScroll","150":"js-127: sortCharactersInString","151":"js-127: stripHTMLTags","152":"js-127: timeTaken","153":"js-127: toCurrency","154":"js-127: toDecimalMark","155":"js-127: validateNumber","156":"js-127: words","157":"js-console: HTML elements","158":"js-console: JSON table","159":"js-console: add css","160":"js-console: console.assert( )","161":"js-console: console.count( )","162":"js-console: console.memory( )","163":"js-console: console.time( )","164":"js-console: console.trace( )","165":"js-console: group the messages","166":"js-console: json representation","167":"js-console: placeholders","168":"js-console: various logging Methods","169":"re.findall()","170":"re.group()"},"Description":{"0":"(javascript) (web)","1":"(python)","2":"(python)","3":"(pandas)(python)","4":"To a DataFrame using Dictionary (python)","5":"(css)(web)","6":"(keras) (python)","7":"(python)","8":"(web)","9":"(flask) (python)","10":"in a Series\n(pandas) (python)","11":"(pandas dataframe) (python)","12":"(python)","13":"(web)","14":"(python)","15":"(css media-queries) (web)","16":"(python)","17":"(Pandas DataFrame) (python)","18":"(python)","19":"(python)","20":"(python)","21":"(python)","22":"(python)","23":"(html) (web)","24":"(css) (web)","25":"(python)","26":"(pandas dataframe) (python)","27":"(web)","28":"(flask) (python)","29":"(flask) (python)","30":"(python)","31":"(python)","32":"(flask) (python)","33":"(python)","34":"(plotly)(python)","35":"(html)(web)","36":"(javascript)(Mouse Wheel plugin)(web)","37":"(python)","38":"(web)","39":"(css) (web)","40":"(python)","41":"(javascript)(web)","42":"(keras) (python)","43":"(javascript) (web)","44":"(javascript)(web)","45":"(web)","46":"(logging)(python)","47":"(python)","48":"(python)","49":"(python)","50":"In a DataFrame (python)","51":"(python)","52":"(python)","53":"(python)","54":"(javascript) (web)","55":"(pandas)(python)","56":"(javascript) (web)","57":"(python)","58":"__repr__ (python)","59":"(javascript) (web)","60":"(python)","61":"(css) (web)","62":"(flask)(python)","63":"(python)","64":"(pandas)(python)","65":"(python)","66":"(javascript) (web)","67":"(numpy)(python)","68":"(python)","69":"(pandas) (python)","70":"Shebang line for anaconda virtual environments (python)","71":"(javascript)(jquery)(web)","72":"(python)","73":"(css jquery) (web)","74":"(html)(web)","75":"(pandas dataframe) (python)","76":"(flask) (python)","77":"List of Stopwords(text)","78":"(python)","79":"(python)","80":"(css)(web)","81":"(python)","82":"(python)","83":"(python)","84":"(web)","85":"(css)(web)","86":"(python)","87":"(python)","88":"(python)","89":"(python)","90":"(python)","91":"(python)","92":"(python)","93":"(python)","94":"(python)","95":"(python)","96":"(python)","97":"(python)","98":"(python)","99":"(python)","100":"(python)","101":"(python)","102":"(python)","103":"(javascript)","104":"(javascript)","105":"(javascript)","106":"(javascript)","107":"(javascript)","108":"(javascript)","109":"(javascript)","110":"(javascript)","111":"(javascript)","112":"(javascript)","113":"(javascript)","114":"(javascript)","115":"(javascript)","116":"(javascript)","117":"(javascript)","118":"(javascript)","119":"(javascript)","120":"(javascript)","121":"(javascript)","122":"(javascript)","123":"(javascript)","124":"(javascript)","125":"(javascript)","126":"(javascript)","127":"(javascript)","128":"(javascript)","129":"(javascript)","130":"(javascript)","131":"(javascript)","132":"(javascript)","133":"(javascript)","134":"(javascript)","135":"(javascript)","136":"(javascript)","137":"(javascript)","138":"(javascript)","139":"(javascript)","140":"(javascript)","141":"(javascript)","142":"(javascript)","143":"(javascript)","144":"(javascript)","145":"(javascript)","146":"(javascript)","147":"(javascript)","148":"(javascript)","149":"(javascript)","150":"(javascript)","151":"(javascript)","152":"(javascript)","153":"(javascript)","154":"(javascript)","155":"(javascript)","156":"(javascript)","157":"(javascript)(web)","158":"(javascript)(web)","159":"(javascript)(web)","160":"(javascript)(web)","161":"(javascript)(web)","162":"(javascript)(web)","163":"(javascript)(web)","164":"(javascript)(web)","165":"(javascript)(web)","166":"(javascript)(web)","167":"(javascript)(web)","168":"(javascript)(web)","169":"(python)","170":"(python)"},"Code":{"0":"function loadCode(p, q, e)\n{\n  var xhttp = new XMLHttpRequest();\n  var filepath = '..\/..\/..'\n  console.log(filepath)\n  xhttp.onreadystatechange = function() {\n    if (this.readyState == 4 && this.status == 200) {\n     var dataObj = JSON.parse(this.responseText);\n     col1 = dataObj['col1']\n     content = ''\n     var i = 0;\n     while(typeof program_name[i] !== \"undefined\")\n     {\n        content += col1[i]+'\n'\n     }\n     document.getElementById(\"demo\").innerHTML = content;\n    }\n  };\n  xhttp.open(\"GET\", filepath, true);\n  xhttp.send();\n}","1":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras import optimizers\n# optimizers.SGD()\n# optimizers.RMSProp()\n# optimizers.Adagrad()\n# optimizers.Adadelta()\n# optimizers.Adam()\n\nes = EarlyStopping(monitor='loss', mode='min', verbose=1)\nfilepath = \"model.h5\"\nckpt = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')\n\ndef build_network():\n    model = Sequential()\n    model.add(Dense(160,input_dim=40, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(320, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(365, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(125, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(25, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer=, metrics=['accuracy'])\n    model.summary()\n    return model\n\nmodel = build_network()\n\nmodel.fit(scaled_data, train_label[0], validation_split=0.3, epochs=25, callbacks=[es, ckpt])\n\n\nfrom keras.models import load_model\nnew_model = load_model(\"model.h5\")","2":"&gt;&gt;&gt; from secrets import token_hex, token_urlsafe\n\n&gt;&gt;&gt; token_hex(16)  \n'f9bf78b9a18ce6d46a0cd2b0b86df9da'\n\n&gt;&gt;&gt; token_urlsafe(16)  \n'Drmhze6EPcv0fN_81Bj-nA'","3":"df['c'] = df[['a', 'b']].apply(lambda row: row['a'] + row['b'], axis=1)","4":"mapping = {'male':0, 'female':1}\n\n\ncols = ['A', 'B', 'C']\ndf[cols] = df[cols].applymap(mapping.get())","5":"\/* Add \" (PDF)\" text after links that go to PDFs *\/\na[href$=\".pdf\"]:after { content: \" (PDF)\"; }\n\n\/* If file size specified as data attribute, use that too *\/\na[href$=\".pdf\"][data-size]:after { content: \" (PDF, \" attr(data-size) \")\"; }\n\n\n&lt;p&gt;Watch out for the &lt;a href=\"some.pdf\"&gt;PDF bomb&lt;\/a&gt; here!&lt;\/p&gt;\n\/\/ Watch out for the PDF bomb (PDF) here!\n\n\n&lt;p&gt;Watch out for the &lt;a href=\"some.pdf\" data-size=\"2 MB\"&gt;PDF bomb&lt;\/a&gt; here!&lt;\/p&gt;\n\/\/ Watch out for the PDF bomb (PDF, 2 MB) here!","6":"import numpy as np\nimport pandas as pd\n\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing import image\n\nfrom keras import backend as K\n\n\ndef recall_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n        recall = true_positives \/ (possible_positives + K.epsilon())\n        return recall\n\ndef precision_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n        precision = true_positives \/ (predicted_positives + K.epsilon())\n        return precision\n\ndef f1_m(y_true, y_pred):\n    precision = precision_m(y_true, y_pred)\n    recall = recall_m(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))\n\n\nes = EarlyStopping(monitor='loss', mode='min', verbose=1)\nfilepath = \"model.h5\"\nckpt = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')\n\nimage_size = (90, 60)\n\ndatagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True,\n                                   validation_split=0.3)\n\ntraining_set = datagen.flow_from_directory('\/Train Images',\n                                                 target_size = image_size,\n                                                 batch_size = 32,\n                                                 class_mode = 'binary',\n                                                 subset='training')\n\nvalidation_set = datagen.flow_from_directory('\/Train Images',\n                                                 target_size = image_size,\n                                                 batch_size = 32,\n                                                 class_mode = 'binary',\n                                                 subset='validation')\n\n\ndef cnn(image_size):\n    classifier = Sequential()\n    classifier.add(Conv2D(32, (3, 3), input_shape = (*image_size, 3), activation = 'relu'))\n    classifier.add(Dropout(0.2))\n    classifier.add(Conv2D(32, (3, 3), activation = 'relu'))\n    classifier.add(MaxPooling2D(pool_size = (2, 2)))\n    classifier.add(Flatten())\n    classifier.add(Dense(units = 128, activation = 'relu'))\n    classifier.add(Dropout(0.2))\n    classifier.add(Dense(units = 1, activation = 'sigmoid'))\n    classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['acc',f1_m,precision_m, recall_m])\n    return classifier\n\n\nneuralnetwork = cnn(image_size)\n\n\nneuralnetwork.summary()\n\n\nneuralnetwork.fit_generator(training_set,\n                         steps_per_epoch = 8000,\n                         epochs = 25,\n                         validation_data = validation_set,\n                         validation_steps = 2000, \n                         callbacks=[es, ckpt])\n                         \n                         \n# Predictions\n\nimport numpy as np\nimport pandas as pd\nfrom keras.preprocessing import image\nfrom keras.models import load_model\nfrom keras import backend as K\n\ndef recall_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n        recall = true_positives \/ (possible_positives + K.epsilon())\n        return recall\n\ndef precision_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n        precision = true_positives \/ (predicted_positives + K.epsilon())\n        return precision\n\ndef f1_m(y_true, y_pred):\n    precision = precision_m(y_true, y_pred)\n    recall = recall_m(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))\n\nneuralnetwork = load_model('model.h5', custom_objects={'f1_m':f1_m, 'precision_m':precision_m, 'recall_m':recall_m})\n\ntest_image = image.load_img(f'\/Test Images\/{image_path}', target_size = (90, 60))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nclass_index = neuralnetwork.predict(test_image)[0][0]\nprobability = neuralnetwork.predict_proba(test_image)[0][0]","7":"from keras.models import Sequential\nfrom keras.laeyrs import Dense, Dropout, Flatten, Embedding, Convolution1D, MaxPooling1D\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras import optimizers\n# optimizers.SGD()\n# optimizers.RMSProp()\n# optimizers.Adagrad()\n# optimizers.Adadelta()\n# optimizers.Adam()\n\nvocabulary_size = 7500\npad_length = 1000\ntokenizer = Tokenizer(num_words= vocabulary_size)\ntokenizer.fit_on_texts(X)\nsequences = tokenizer.texts_to_sequences(X)\npadded_sequences = pad_sequences(sequences, maxlen=pad_length)\n\nes = EarlyStopping(monitor='loss', mode='min', verbose=1)\nfilepath = \"model.h5\"\nckpt = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')\n\ndef build_network():\n    model = Sequential()\n    model.add(Embedding(vocabulary_size, 1024, input_length=pad_length))\n    model.add(Convolution1D(1024, kernel_size=5, activation='tanh', strides=2))\n    model.add(MaxPooling1D(pool_size=5))\n    model.add(Dense(160,input_dim=40, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(320, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(365, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(125, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(25, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer=, metrics=['accuracy'])\n    model.summary()\n    return model\n\nmodel = build_network()\n\nmodel.fit(scaled_data, train_label[0], validation_split=0.3, epochs=25, callbacks=[es, ckpt])\n\n\nfrom keras.models import load_model\nnew_model = load_model(\"model.h5\")","8":":root {\n  --main-bg-color: coral; \n}\n\n#div1 {\n  background-color: var(--main-bg-color); \n}","9":"from flask import Flask, render_template, Response, request, redirect, url_for\n\napp = Flask(__name__)\n\n@app.route(\"\/\")\ndef index():\n    return render_template('index.html')\n\n@app.route(\"\/forward\/\", methods=['POST'])\ndef move_forward():\n    #Moving forward code\n    forward_message = \"Moving Forward...\"\n    return render_template('index.html', forward_message=forward_message);\n\n\nif __name__ == '__main__':\n    app.run(debug=True) \n    \n    \n    \n\/\/Then in your html, use this:\n&lt;form action=\"\/forward\/\" method=\"post\"&gt;\n    &lt;button name=\"forwardBtn\" type=\"submit\"&gt;Forward&lt;\/button&gt;\n&lt;\/form&gt;\n\/\/To execute your moving forward code. And include this:\n{{ forward_message }}","10":"top_five = data.value_counts().n_largest(5).index\ndata_updated = data.where(data.isin(top_five), other='Other')","11":"df['age_groups'] = pd.cut(df.age, bins=[0, 18, 65, 99], labels=['child', 'adult', 'elderly'])\n\n# 0 to 18 -&gt; 'child'\n# 18 to 65 -&gt; 'adult'\n# 65 to 99 -&gt; 'elderly'","12":"def foo():\n    pass\n\ndef bar():\n    pass\n\n__all__ = [\"bar\"]\n\n\n# Based on code snippet above, we know that only bar function will be exported.","13":"\/* width *\/\n::-webkit-scrollbar {\n  width: 10px;\n}\n\n\/* Track *\/\n::-webkit-scrollbar-track {\n  background: #f1f1f1; \n}\n\n\/* Handle *\/\n::-webkit-scrollbar-thumb {\n  background: #888; \n}\n\n\/* Handle on hover *\/\n::-webkit-scrollbar-thumb:hover {\n  background: #555; \n}","14":"num1 = 100_000_000_000  # Visually chunk large numbers\nnum2 =   1_000_000_000  # without affecting the functionality\ntotal = num1 + num2\nprint(f'{total:,}')     # 101,000,000,000","15":"\/* Extra small devices (phones, 600px and down) *\/\n@media only screen and (max-width: 600px) {...}\n\n\/* Small devices (portrait tablets and large phones, 600px and up) *\/\n@media only screen and (min-width: 600px) {...}\n\n\/* Medium devices (landscape tablets, 768px and up) *\/\n@media only screen and (min-width: 768px) {...}\n\n\/* Large devices (laptops\/desktops, 992px and up) *\/\n@media only screen and (min-width: 992px) {...}\n\n\/* Extra large devices (large laptops and desktops, 1200px and up) *\/\n@media only screen and (min-width: 1200px) {...}","16":"from xml.etree import ElementTree\n\ndef convert_to_xml(tag, dct):\n    tree = ElementTree.ElementTree()\n    elem = ElementTree.Element(tag)\n    \n    for k, v in dct.items():\n        child = ElementTree.Element(k)\n        for subkey, subval in v.items():\n            grandchild = ElementTree.Element(subkey)\n            grandchild.text = str(subval)\n            child.append(grandchild)\n        elem.append(child)\n        tree._setroot(elem)\n    return tree\n    \n    \nconvert_to_xml('data', data_dct).write('data.xml')","17":"df['Change'] = df.col.diff()\ndf['Percent Change'] = df.col.pct_change()*100\ndf.style.format({'Percent Change':'{:.2f}%'})","18":"# Current working directory\nos.getcwd()\n\n# Change the CWD\nos.chdir(PATH)\n\n# Delete any directory\nos.rmdir(PATH)\n\n# Create a new directory\nos.mkdir(PATH)\n\n# Rename a directory\nos.rename(OLD, NEW)\n\n# Delete entire directory tree\nshutil.rmtree(PATH)\n\n# Copy entire directory tree\nshutil.copytree(SRC, DST)\n\n# Move file or directory\nshutil.move(SRC, DST)","19":"import os\n\nfor folderName, subfolders, filenames in os.walk('DIRECTORY'):\n    print('The current folder is ' + folderName)\n\n    for subfolder in subfolders:\n        print('SUBFOLDER OF ' + folderName + ': ' + subfolder)\n    for filename in filenames:\n        print('FILE INSIDE ' + folderName + ': '+ filename)\n\n    print('')","20":"def add(a, b):\n   \"\"\"this function takes 2 numbers and return their sum\"\"\"\n   return a+b\n\nprint(add.__doc__)\n\n# Output:\n# this function takes 2 numbers and return their sum\n\n\nclass Car():\n   \"\"\"this is a class\"\"\"\n   pass\n\nprint(Car.__doc__)\n\n# Output:\n# this is a class","21":"import requests\nres = requests.get('file\/url')\nres.raise_for_status()\nwith open('file.txt', 'wb') as f:\n    for chunk in res.iter_content(100000):\n        f.write(chunk)","22":"class Person():\n    pass\n\nperson = Person()\n\np_key = 'name'\np_value = 'Ritvik'\n\n\nsetattr(person, p_key, p_value)\nname = getattr(person, p_key)","23":"&lt;div contenteditable='true'&gt;This div is editable&lt;\/div&gt;","24":".col-container {\n    display: table; \/* Make the container element behave like a table *\/\n    width: 100%; \/* Set full-width to expand the whole page *\/\n}\n\n.col {\n    display: table-cell; \/* Make elements inside the container behave like table cells *\/\n}\n\n\n\/* If the browser window is smaller than 600px, make the columns stack on top of each other *\/\n@media only screen and (max-width: 600px) {\n  .col {\n    display: block;\n    width: 100%;\n  }\n}","25":"# it is a builtin function that allows us to\n# execute arbitrry strings in python\n\nadd = \"1+5+6\"\ndisplay = \"print('Hello')\"\n\nprint (eval(add))  # 12\neval(display)      # Hello","26":"&gt;&gt;&gt; df = pd.DataFrame({'sandwich':  ['PB&J', 'BLT', 'cheese'],\n      'ingredients':[['peanut butter', 'jelly'],\n                    ['bacon', 'lettuce', 'tomato'],\n                    ['swiss cheese']]})\n&gt;&gt;&gt; df\n    sandwich    ingredients\n0   PB&J        [peanut butter, jelly]\n1   BLT         [bacon, lettuce, tomato]\n2   cheese      [swiss cheese]\n&gt;&gt;&gt; df.explode('ingredients')\n    sandwich    ingredients\n0   PB&J        peanut butter\n0   PB&J        jelly\n1   BLT         bacon\n1   BLT         lettuce\n1   BLT         tomato\n2   cheese      swiss cheese","27":"&lt;h2&gt;PORTFOLIO&lt;\/h2&gt;\n&lt;div id=\"myBtnContainer\"&gt;\n  &lt;button class=\"btn active\" onclick=\"filterSelection('all')\"&gt; Show all&lt;\/button&gt;\n  &lt;button class=\"btn\" onclick=\"filterSelection('nature')\"&gt; Nature&lt;\/button&gt;\n  &lt;button class=\"btn\" onclick=\"filterSelection('cars')\"&gt; Cars&lt;\/button&gt;\n  &lt;button class=\"btn\" onclick=\"filterSelection('people')\"&gt; People&lt;\/button&gt;\n&lt;\/div&gt;\n\n&lt;!-- Portfolio Gallery Grid --&gt;\n&lt;div class=\"row\"&gt;\n  &lt;div class=\"column nature\"&gt;\n    &lt;div class=\"content\"&gt;\n      &lt;img src=\"\/w3images\/mountains.jpg\" alt=\"Mountains\" style=\"width:100%\"&gt;\n      &lt;h4&gt;Mountains&lt;\/h4&gt;\n      &lt;p&gt;Lorem ipsum dolor..&lt;\/p&gt;\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n  &lt;div class=\"column nature\"&gt;\n    &lt;div class=\"content\"&gt;\n      &lt;img src=\"\/w3images\/lights.jpg\" alt=\"Lights\" style=\"width:100%\"&gt;\n      &lt;h4&gt;Lights&lt;\/h4&gt;\n      &lt;p&gt;Lorem ipsum dolor..&lt;\/p&gt;\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n  &lt;div class=\"column nature\"&gt;\n    &lt;div class=\"content\"&gt;\n      &lt;img src=\"\/w3images\/nature.jpg\" alt=\"Nature\" style=\"width:100%\"&gt;\n      &lt;h4&gt;Forest&lt;\/h4&gt;\n      &lt;p&gt;Lorem ipsum dolor..&lt;\/p&gt;\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n\n  &lt;div class=\"column cars\"&gt;\n    &lt;div class=\"content\"&gt;\n      &lt;img src=\"\/w3images\/cars1.jpg\" alt=\"Car\" style=\"width:100%\"&gt;\n      &lt;h4&gt;Retro&lt;\/h4&gt;\n      &lt;p&gt;Lorem ipsum dolor..&lt;\/p&gt;\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n  &lt;div class=\"column cars\"&gt;\n    &lt;div class=\"content\"&gt;\n      &lt;img src=\"\/w3images\/cars2.jpg\" alt=\"Car\" style=\"width:100%\"&gt;\n      &lt;h4&gt;Fast&lt;\/h4&gt;\n      &lt;p&gt;Lorem ipsum dolor..&lt;\/p&gt;\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n  &lt;div class=\"column cars\"&gt;\n    &lt;div class=\"content\"&gt;\n      &lt;img src=\"\/w3images\/cars3.jpg\" alt=\"Car\" style=\"width:100%\"&gt;\n      &lt;h4&gt;Classic&lt;\/h4&gt;\n      &lt;p&gt;Lorem ipsum dolor..&lt;\/p&gt;\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n\n  &lt;div class=\"column people\"&gt;\n    &lt;div class=\"content\"&gt;\n      &lt;img src=\"\/w3images\/people1.jpg\" alt=\"People\" style=\"width:100%\"&gt;\n      &lt;h4&gt;Girl&lt;\/h4&gt;\n      &lt;p&gt;Lorem ipsum dolor..&lt;\/p&gt;\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n  &lt;div class=\"column people\"&gt;\n    &lt;div class=\"content\"&gt;\n      &lt;img src=\"\/w3images\/people2.jpg\" alt=\"People\" style=\"width:100%\"&gt;\n      &lt;h4&gt;Man&lt;\/h4&gt;\n      &lt;p&gt;Lorem ipsum dolor..&lt;\/p&gt;\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n  &lt;div class=\"column people\"&gt;\n    &lt;div class=\"content\"&gt;\n      &lt;img src=\"\/w3images\/people3.jpg\" alt=\"People\" style=\"width:100%\"&gt;\n      &lt;h4&gt;Woman&lt;\/h4&gt;\n      &lt;p&gt;Lorem ipsum dolor..&lt;\/p&gt;\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n&lt;!-- END GRID --&gt;\n&lt;\/div&gt;\n\n\/* Center website *\/\n.main {\n  max-width: 1000px;\n  margin: auto;\n}\n\nh1 {\n  font-size: 50px;\n  word-break: break-all;\n}\n\n.row {\n  margin: 8px -16px;\n}\n\n\/* Add padding BETWEEN each column (if you want) *\/\n.row,\n.row &gt; .column {\n  padding: 8px;\n}\n\n\/* Create three equal columns that floats next to each other *\/\n.column {\n  float: left;\n  width: 33.33%;\n  display: none; \/* Hide columns by default *\/\n}\n\n\/* Clear floats after rows *\/\n.row:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n\n\/* Content *\/\n.content {\n  background-color: white;\n  padding: 10px;\n}\n\n\/* The \"show\" class is added to the filtered elements *\/\n.show {\n  display: block;\n}\n\n\/* Style the buttons *\/\n.btn {\n  border: none;\n  outline: none;\n  padding: 12px 16px;\n  background-color: white;\n  cursor: pointer;\n}\n\n\/* Add a grey background color on mouse-over *\/\n.btn:hover {\n  background-color: #ddd;\n}\n\n\/* Add a dark background color to the active button *\/\n.btn.active {\n  background-color: #666;\n   color: white;\n}\n\nfilterSelection(\"all\") \/\/ Execute the function and show all columns\nfunction filterSelection(c) {\n  var x, i;\n  x = document.getElementsByClassName(\"column\");\n  if (c == \"all\") c = \"\";\n  \/\/ Add the \"show\" class (display:block) to the filtered elements, and remove the \"show\" class from the elements that are not selected\n  for (i = 0; i &lt; x.length; i++) {\n    w3RemoveClass(x[i], \"show\");\n    if (x[i].className.indexOf(c) &gt; -1) w3AddClass(x[i], \"show\");\n  }\n}\n\n\/\/ Show filtered elements\nfunction w3AddClass(element, name) {\n  var i, arr1, arr2;\n  arr1 = element.className.split(\" \");\n  arr2 = name.split(\" \");\n  for (i = 0; i &lt; arr2.length; i++) {\n    if (arr1.indexOf(arr2[i]) == -1) {\n      element.className += \" \" + arr2[i];\n    }\n  }\n}\n\n\/\/ Hide elements that are not selected\nfunction w3RemoveClass(element, name) {\n  var i, arr1, arr2;\n  arr1 = element.className.split(\" \");\n  arr2 = name.split(\" \");\n  for (i = 0; i &lt; arr2.length; i++) {\n    while (arr1.indexOf(arr2[i]) &gt; -1) {\n      arr1.splice(arr1.indexOf(arr2[i]), 1);\n    }\n  }\n  element.className = arr1.join(\" \");\n}\n\n\/\/ Add active class to the current button (highlight it)\nvar btnContainer = document.getElementById(\"myBtnContainer\");\nvar btns = btnContainer.getElementsByClassName(\"btn\");\nfor (var i = 0; i &lt; btns.length; i++) {\n  btns[i].addEventListener(\"click\", function(){\n    var current = document.getElementsByClassName(\"active\");\n    current[0].className = current[0].className.replace(\" active\", \"\");\n    this.className += \" active\";\n  });\n}","28":"from flask import Flask, render_template\n\napp = Flask(__name__)\n\n\n@app.route('\/')\ndef home():\n    return render_template('index.html', message=message)\n\n\nif __name__ == '__main__':\n    app.run(debug=True)","29":"layout.html\n.\n.\n{% block content %}\n\n{% endblock %}\n.\n.\n\n\nindex.html\n{% extends \"layout.html\" %}\n{% block content %}\n.\n.\n{% endblock %}","30":"flat_list = [item for sublist in l for item in sublist]","31":"def power(a: int, b:int) -&gt;int:\n    return a**b\n\nprint(power.__annotations__)\n\n# Output:\n# {'a': &lt;class 'int'&gt;, 'b': &lt;class 'int'&gt;, 'return': &lt;class 'int'&gt;}","32":"from flask import request\n\n@app.route('\/data')\ndef data():\n    # here we want to get the value of user (i.e. ?user=some-value)\n    user = request.args.get('user')","33":"&gt;&gt;&gt; import secrets\n&gt;&gt;&gt; secrets.token_hex(16)\n'79e9d3b5d183b6e620e3776f77d95f4b'","34":"import plotly.graph_objs as go \n\ndata = dict(type = 'choropleth',\n            locations = ['India', 'Russia', 'Australia'],\n            locationmode = 'country names',\n            colorscale= 'Portland',\n            z=[1.0,2.0,3.0],\n            colorbar = {'title':'Colorbar Title'})\n\nlayout = dict(geo = {'scope':'world'})\n\nfig = go.Figure(data = [data],layout = layout)\nfig.update_layout(\n    title= TITLE,\n    font=dict(\n        family='Courier New, monospace',\n        size=18,\n        color='#7f7f7f'\n    )\n)\n\nfig.show()\n\nhtml_content = fig.to_html()\nwith open('abc.html', 'w') as f:\n    f.write(html_content)","35":"&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;&lt;\/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/materialize\/1.0.0\/css\/materialize.min.css\"&gt;\n    &lt;link href=\"https:\/\/fonts.googleapis.com\/icon?family=Material+Icons\" rel=\"stylesheet\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"https:\/\/www.w3schools.com\/w3css\/4\/w3.css\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"css\/master.css\"&gt;\n  &lt;\/head&gt;\n  &lt;body&gt;\n\n    &lt;script src=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/jquery\/3.4.1\/core.js\"&gt;&lt;\/script&gt;\n    &lt;script src=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/materialize\/1.0.0\/js\/materialize.min.js\"&gt;&lt;\/script&gt;\n    &lt;script src=\"js\/main.js\"&gt;&lt;\/script&gt;\n  &lt;\/body&gt;\n&lt;\/html&gt;","36":"&lt;script type='text\/javascript' src='http:\/\/ajax.googleapis.com\/ajax\/libs\/jquery\/1.3.2\/jquery.min.js?ver=1.3.2'&gt;&lt;\/script&gt;\n&lt;script type='text\/javascript' src='\/js\/jquery.mousewheel.min.js'&gt;&lt;\/script&gt;\n\n$(function() {\n   $(\"body\").mousewheel(function(event, delta) {\n      this.scrollLeft -= (delta * 30);\n      event.preventDefault();\n   });\n});","37":"import warnings\r\nwarnings.filterwarnings(\"ignore\")","38":"filter: drop-shadow(0 15px 17px rgba(38,38,143,.37));","39":"&lt;h1 class=\"text\"&gt; Hello &lt;\/h1&gt;\n\n.text{\n    background-image: url('img.jpg');\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: 100%;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent\n    \n}","40":"import json\n\nwith open('model.json', 'w') as f:\n    k = model.keys() \n    v = model.values() \n    k1 = [str(i) for i in k]\n    json.dump(json.dumps(dict(zip(*[k1,v]))),f)   \n    \n    \nwith open('model.json', 'r') as f:\n    data = json.load(f)\n    dic = json.loads(data)\n    k = dic.keys() \n    v = dic.values() \n    k1 = [eval(i) for i in k] \n    model =  dict(zip(*[k1,v]))","41":"1. some\nParameters\npredicate - Function that returns true or false.\narray - List of items to test.\nDescription\nIf predicate returns true for any item, some returns true. Otherwise it returns false.\n\nImplementation\nconst some = (predicate, array) =&gt;\n  array.reduce((acc, value) =&gt; acc || predicate(value), false);\nUsage\nconst equals3 = (x) =&gt; x === 3;\n\nsome(equals3, [3]); \/\/ true\nsome(equals3, [3, 3, 3]); \/\/ true\nsome(equals3, [1, 2, 3]); \/\/ true\nsome(equals3, [2]); \/\/ false\n\n2. all\nParameters\npredicate - Function that returns true or false.\narray - List of items to test.\nDescription\nIf predicate returns true for every item, all returns true. Otherwise it returns false.\n\nImplementation\nconst all = (predicate, array) =&gt;\n  array.reduce((acc, value) =&gt; acc && predicate(value), true);\nUsage\nconst equals3 = (x) =&gt; x === 3;\n\nall(equals3, [3]); \/\/ true\nall(equals3, [3, 3, 3]); \/\/ true\nall(equals3, [1, 2, 3]); \/\/ false\nall(equals3, [3, 2, 3]; \/\/ false\n\n3. none\nParameters\npredicate - Function that returns true or false.\narray - List of items to test.\nDescription\nIf predicate returns false for every item, none returns true. Otherwise it returns false.\n\nImplementation\nconst none = (predicate, array) =&gt;\n  array.reduce((acc, value) =&gt; !acc && !predicate(value), false);\nUsage\nconst isEven = (x) =&gt; x % 2 === 0;\n\nnone(isEven, [1, 3, 5]); \/\/ true\nnone(isEven, [1, 3, 4]); \/\/ false\nnone(equals3, [1, 2, 4]); \/\/ true\nnone(equals3, [1, 2, 3]); \/\/ false\n\n4. map\nParameters\ntransformFunction - Function to run on each element.\narray - List of items to transform.\nDescription\nReturns a new array of items, each one transformed according to the given transformFunction.\n\nImplementation\nconst map = (transformFunction, array) =&gt;\n  array.reduce((newArray, item) =&gt; {\n    newArray.push(transformFunction(item));\n\n    return newArray;\n  }, []);\nUsage\nconst double = (x) =&gt; x * 2;\nconst reverseString = (string) =&gt;\n  string\n    .split('')\n    .reverse()\n    .join('');\n\nmap(double, [100, 200, 300]);\n\/\/ [200, 400, 600]\n\nmap(reverseString, ['Hello World', 'I love map']);\n\/\/ ['dlroW olleH', 'pam evol I']\n\n5. filter\nParameters\npredicate - Function that returns true or false.\narray - List of items to filter.\nDescription\nReturns a new array. If predicate returns true, that item is added to the new array. Otherwise that item is excluded from the new array.\n\nImplementation\nconst filter = (predicate, array) =&gt;\n  array.reduce((newArray, item) =&gt; {\n    if (predicate(item) === true) {\n      newArray.push(item);\n    }\n\n    return newArray;\n  }, []);\nUsage\nconst isEven = (x) =&gt; x % 2 === 0;\n\nfilter(isEven, [1, 2, 3]);\n\/\/ [2]\n\nfilter(equals3, [1, 2, 3, 4, 3]);\n\/\/ [3, 3]\n\n6. reject\nParameters\npredicate - Function that returns true or false.\narray - List of items to filter.\nDescription\nJust like filter, but with the opposite behavior.\n\nIf predicate returns false, that item is added to the new array. Otherwise that item is excluded from the new array.\n\nImplementation\nconst reject = (predicate, array) =&gt;\n  array.reduce((newArray, item) =&gt; {\n    if (predicate(item) === false) {\n      newArray.push(item);\n    }\n\n    return newArray;\n  }, []);\nUsage\nconst isEven = (x) =&gt; x % 2 === 0;\n\nreject(isEven, [1, 2, 3]);\n\/\/ [1, 3]\n\nreject(equals3, [1, 2, 3, 4, 3]);\n\/\/ [1, 2, 4]\n\n7. find\nParameters\npredicate - Function that returns true or false.\narray - List of items to search.\nDescription\nReturns the first element that matches the given predicate. If no element matches then undefined is returned.\n\nImplementation\nconst find = (predicate, array) =&gt;\n  array.reduce((result, item) =&gt; {\n    if (result !== undefined) {\n      return result;\n    }\n\n    if (predicate(item) === true) {\n      return item;\n    }\n\n    return undefined;\n  }, undefined);\nUsage\nconst isEven = (x) =&gt; x % 2 === 0;\n\nfind(isEven, []); \/\/ undefined\nfind(isEven, [1, 2, 3]); \/\/ 2\nfind(isEven, [1, 3, 5]); \/\/ undefined\nfind(equals3, [1, 2, 3, 4, 3]); \/\/ 3\nfind(equals3, [1, 2, 4]); \/\/ undefined\n\n8. partition\nParameters\npredicate - Function that returns true or false.\narray - List of items.\nDescription\n\"Partitions\" or splits an array into two based on the predicate. If predicate returns true, the item goes into list 1. Otherwise the item goes into list 2.\n\nImplementation\nconst partition = (predicate, array) =&gt;\n  array.reduce(\n    (result, item) =&gt; {\n      const [list1, list2] = result;\n\n      if (predicate(item) === true) {\n        list1.push(item);\n      } else {\n        list2.push(item);\n      }\n\n      return result;\n    },\n    [[], []]\n  );\nUsage\nconst isEven = (x) =&gt; x % 2 === 0;\n\npartition(isEven, [1, 2, 3]);\n\/\/ [[2], [1, 3]]\n\npartition(isEven, [1, 3, 5]);\n\/\/ [[], [1, 3, 5]]\n\npartition(equals3, [1, 2, 3, 4, 3]);\n\/\/ [[3, 3], [1, 2, 4]]\n\npartition(equals3, [1, 2, 4]);\n\/\/ [[], [1, 2, 4]]\n\n9. pluck\nParameters\nkey - Key name to pluck from the object\narray - List of items.\nDescription\nPlucks the given key off of each item in the array. Returns a new array of these values.\n\nImplementation\nconst pluck = (key, array) =&gt;\n  array.reduce((values, current) =&gt; {\n    values.push(current[key]);\n\n    return values;\n  }, []);\nUsage\npluck('name', [{ name: 'Batman' }, { name: 'Robin' }, { name: 'Joker' }]);\n\/\/ ['Batman', 'Robin', 'Joker']\n\npluck(0, [[1, 2, 3], [4, 5, 6], [7, 8, 9]]);\n\/\/ [1, 4, 7]\n\n10. scan\nParameters\nreducer - Standard reducer function that receives two parameters - the accumulator and current element from the array.\ninitialValue - The initial value for the accumulator.\narray - List of items.\nDescription\nWorks just like reduce but instead just the single result, it returns a list of every reduced value on the way to the single result.\n\nImplementation\nconst scan = (reducer, initialValue, array) =&gt; {\n  const reducedValues = [];\n\n  array.reduce((acc, current) =&gt; {\n    const newAcc = reducer(acc, current);\n\n    reducedValues.push(newAcc);\n\n    return newAcc;\n  }, initialValue);\n\n  return reducedValues;\n};\nUsage\nconst add = (x, y) =&gt; x + y;\nconst multiply = (x, y) =&gt; x * y;\n\nscan(add, 0, [1, 2, 3, 4, 5, 6]);\n\/\/ [1, 3, 6, 10, 15, 21] - Every number added from 1-6\n\nscan(multiply, 1, [1, 2, 3, 4, 5, 6]);\n\/\/ [1, 2, 6, 24, 120, 720] - Every number multiplied from 1-6","42":"from keras import backend as K\n\ndef recall_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n        recall = true_positives \/ (possible_positives + K.epsilon())\n        return recall\n\ndef precision_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n        precision = true_positives \/ (predicted_positives + K.epsilon())\n        return precision\n\ndef f1_m(y_true, y_pred):\n    precision = precision_m(y_true, y_pred)\n    recall = recall_m(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))\n\n# compile the model\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc',f1_m,precision_m, recall_m])","43":"function go(e){\n    if(e.keyCode === 13){\n      e.preventDefault(); \/\/ Ensure it is only this code that rusn\n      alert(\"Enter was pressed\");\n    } \n}\n\n\/\/call: go(event)","44":"function LightenDarkenColor(col, amt) {\n  \n    var usePound = false;\n  \n    if (col[0] == \"#\") {\n        col = col.slice(1);\n        usePound = true;\n    }\n \n    var num = parseInt(col,16);\n \n    var r = (num &gt;&gt; 16) + amt;\n \n    if (r &gt; 255) r = 255;\n    else if  (r &lt; 0) r = 0;\n \n    var b = ((num &gt;&gt; 8) & 0x00FF) + amt;\n \n    if (b &gt; 255) b = 255;\n    else if  (b &lt; 0) b = 0;\n \n    var g = (num & 0x0000FF) + amt;\n \n    if (g &gt; 255) g = 255;\n    else if (g &lt; 0) g = 0;\n \n    return (usePound?\"#\":\"\") + (g | (b &lt;&lt; 8) | (r &lt;&lt; 16)).toString(16);\n  \n}\n\n\/\/ Lighten\nvar NewColor = LightenDarkenColor(\"#F06D06\", 20); \n\n\/\/ Darken\nvar NewColor = LightenDarkenColor(\"#F06D06\", -20);","45":"function listFilter(inputEl, listEl, element) {\n    var input, filter, ul, li, a, i, txtValue;\n    input = document.getElementById(inputEl);\n    filter = input.value.toUpperCase();\n    ul = document.getElementById(listEl);\n    li = ul.getElementsByTagName(\"li\");\n    for (i = 0; i &lt; li.length; i++) {\n        a = li[i].getElementsByTagName(element)[0];\n        txtValue = a.textContent || a.innerText;\n        if (txtValue.toUpperCase().indexOf(filter) &gt; -1) {\n            li[i].style.display = \"\";\n        } else {\n            li[i].style.display = \"none\";\n        }\n    }\n}","46":"import logging\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\nformatter = logging.Formatter('%(asctime)s : %(levelname)s : %(name)s : %(message)s')\n\nfile_handler = logging.FileHandler('sample.log')\nfile_handler.setFormatter(formatter)\n\nstream_handler = logging.StreamHandler()\nstream_handler.setFormatter(formatter)\n\nlogger.addHandler(file_handler)\nlogger.addHandler(stream_handler)\n\n\nlogger.debug('debug message')\nlogger.info('info message')\nlogger.warning('warning message')\nlogger.error('error message')\nlogger.exception('exception message')\nlogger.critical('critical message')","47":"from functools import wraps\n\ndef logger(orig_func):\n    import logging\n    logging.basicConfig(filename='{}.log'.format(orig_func.__name__), level=logging.INFO)\n\n    @wraps(orig_func)\n    def wrapper(*args, **kwargs):\n        logging.info(\n            'Ran with args: {}, and kwargs: {}'.format(args, kwargs))\n        return orig_func(*args, **kwargs)\n\n    return wrapper\n\n@logger\ndef display_info(name, age):\n    print('display_info ran with arguments ({}, {})'.format(name, age))\n\ndisplay_info('Tom', 22)","48":"def tag(name):\n    \n    def data(*content, **attrs):\n        attr_str = ''.join(f' {attr}=\"{value}\"' for attr, value in sorted(attrs.items())) if attrs else ''\n        if content:\n            return '\\n'.join(f'&lt;{name}{attr_str}&gt;{c}&lt;\/{name}&gt;' for c in content)\n        else:\n            return f'&lt;{name}{attr_str}\/&gt;'\n    \n    return data\n    \ntag('h1')('Hey')","49":"import sys, os\nsys.path.append(os.path.join(sys.path[0], 'modules'))\n\nimport module1","50":"pd.Series(' '.join(df['text']).split()).value_counts()[:n]","51":"with \\\n    open('a.txt') as a,\\\n    open('b.txt', 'w') as b:\n    for line in a:\n        b.write(line)","52":"fig, ax1 = plt.subplots()\n\nax1.set_xlabel('Team')\nax1.set_ylabel('count')\n# plot 1\n\nax2 = ax1.twinx()\n\ncolor = 'tab:blue'\nax2.set_ylabel('count', color=color)\n# plot 2\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()\nplt.show()","53":"fig, ax = plt.subplots(figsize=(30, 16), nrows=4, ncols=1, frameon=False)\nfig.subplots_adjust(hspace=0)\nax[0].spines['bottom'].set_visible(False)\nax[1].spines['top'].set_visible(False)\nax[1].spines['bottom'].set_visible(False)\nax[2].spines['top'].set_visible(False)\nax[2].spines['bottom'].set_visible(False)\nax[3].spines['top'].set_visible(False)\n\n#plot 1\n#plot 2\n#plot 3\n#plot 4\n\nfor i in range(4):\n    ax[i].legend(loc=1, prop={'size': 12})\n\nplt.xticks(rotation=0)","54":"navigator.onLine          \/\/Determines whether the browser is online\nnavigator.cookieEnabled   \/\/Determines whether cookies are enabled\nnavigator.language        \/\/Returns the language of the browser\nnavigator.appVersion      \/\/Returns the version information of the browser\nnavigator.platform        \/\/Returns for which platform the platform is compiled\nnavigator.appName         \/\/Returns the name of the browser","55":"# df\n# A B C D E F\n# 1 2 3 4 5 6\n# 4 5 6 7 8 9\n\ndf.insert(3, 'C2', df['C']*2)\n\n# df\n# A B C C2 D E F\n# 1 2 3 6  4 5 6\n# 4 5 6 12 7 8 9","56":"var win = window.open(\"\", \"Title\", \"toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=780,height=200,top=\"+(screen.height-400)+\",left=\"+(screen.width-840));\nwin.document.body.innerHTML = \"HTML\";","57":"# pip install win10toast pypiwin32 setuptools\n\nfrom win10toast import ToastNotifier\n\ntoaster = ToastNotifier()\n\ndef notification(title, message, duration=5, icon=None):\n    if icon:\n        toaster.show_toast(title, message, duration=duration, threaded=True, icon_path=icon)\n    else:\n        toaster.show_toast(title, message, duration=duration, threaded=True)\n\nnotification('Hey', 'Model Trained')","58":"When defining a class or an object in Python, it is useful to provide an \u00c3\u0192\u00c6\u2019\u00c3\u2020\u00e2\u20ac\u2122\u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00a2\u00c3\u0192\u00c6\u2019\u00c3\u201a\u00c2\u00a2\u00c3\u0192\u00c2\u00a2\u00c3\u00a2\u00e2\u20ac\u0161\u00c2\u00ac\u00c3\u2026\u00c2\u00a1\u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00ac\u00c3\u0192\u00c6\u2019\u00c3\u00a2\u00e2\u201a\u00ac\u00c2\u00b9\u00c3\u0192\u00e2\u20ac\u00a6\u00c3\u00a2\u00e2\u201a\u00ac\u00c5\u201cofficial\u00c3\u0192\u00c6\u2019\u00c3\u2020\u00e2\u20ac\u2122\u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00a2\u00c3\u0192\u00c6\u2019\u00c3\u201a\u00c2\u00a2\u00c3\u0192\u00c2\u00a2\u00c3\u00a2\u00e2\u20ac\u0161\u00c2\u00ac\u00c3\u2026\u00c2\u00a1\u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00ac\u00c3\u0192\u00c6\u2019\u00c3\u201a\u00c2\u00a2\u00c3\u0192\u00c2\u00a2\u00c3\u00a2\u00e2\u20ac\u0161\u00c2\u00ac\u00c3\u2026\u00c2\u00be\u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00a2 way of representing that object as a string. For example:\n\n&gt;&gt;&gt; file = open('file.txt', 'r')\n&gt;&gt;&gt; print(file)\n&lt;open file 'file.txt', mode 'r' at 0x10d30aaf0&gt;\n\nThis makes debugging code a lot easier. Add it to your class definitions as below:\n\nclass someClass:\n    def __repr__(self):\n        return \"&lt;some description here&gt;\"\n        \nsomeInstance = someClass()\n\n# prints &lt;some description here&gt;\nprint(someInstance)","59":"window.open('url', '_blank');","60":"pd.options.display.max_columns = 10\npd.options.display.max_colwidth = -1","61":"&lt;style&gt;\n.parallax {\n  \/* The image used *\/\n  background-image: url(\"img_parallax.jpg\");\n\n  \/* Set a specific height *\/\n  height: 500px;\n\n  \/* Create the parallax scrolling effect *\/\n  background-attachment: fixed;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n}\n&lt;\/style&gt;\n\n&lt;!-- Container element --&gt;\n&lt;div class=\"parallax\"&gt;&lt;\/div&gt;\n\n\/* Turn off parallax scrolling for all tablets and phones. Increase\/decrease the pixels if needed *\/\n@media only screen and (max-device-width: 1366px) {\n  .parallax {\n    background-attachment: scroll;\n  }\n}","62":"# pip install flask-bcrypt\n\nfrom flask_bcrypt import Bcrypt\n\n\nbcrypt = Bcrypt()\nbcrypt.generate_password_hash('p@ssword').decode('utf-8')\n\n\nbcrypt.check_password_hash(hashed_password, 'p@ssword')","63":"from getpass import getpass\nusername = input('Enter Username...')   # User Input is displayed in the commandline\npassword = getpass('Enter Password...') # User Input is not displayed in the commandline","64":"pd.crosstab(df.A, df.B).apply(lambda r: r\/r.sum(), axis=1)","65":"from keras.models import Sequential\nfrom keras.laeyrs import Dense, Dropout, LSTM, Embedding\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras import optimizers\n# optimizers.SGD()\n# optimizers.RMSProp()\n# optimizers.Adagrad()\n# optimizers.Adadelta()\n# optimizers.Adam()\n\nvocabulary_size = 7500\npad_length = 1000\ntokenizer = Tokenizer(num_words= vocabulary_size)\ntokenizer.fit_on_texts(X)\nsequences = tokenizer.texts_to_sequences(X)\npadded_sequences = pad_sequences(sequences, maxlen=pad_length)\n\nes = EarlyStopping(monitor='loss', mode='min', verbose=1)\nfilepath = \"model.h5\"\nckpt = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')\n\ndef build_network():\n    model = Sequential()\n    model.add(Embedding(vocabulary_size, 1024, input_length=pad_length))\n    model.add(LSTM(1024, dropout=0.2, recurrent_dropout=0.2))\n    model.add(Dense(160,input_dim=40, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(320, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(365, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(125, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(25, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer=, metrics=['accuracy'])\n    model.summary()\n    return model\n\nmodel = build_network()\n\nmodel.fit(scaled_data, train_label[0], validation_split=0.3, epochs=25, callbacks=[es, ckpt])\n\n\nfrom keras.models import load_model\nnew_model = load_model(\"model.h5\")","66":"\/\/ www.example.com?q=something\n\nvar params = new URLSearchParams(location.search);\nvar q = params.get('q')\nif (q == null){\n\n}else if (q == 'something'){\n\n}else{\n\n}","67":"np.savetxt('arr.txt', arr, fmt = '%.6f')\narr = np.loadtxt('arr.txt', dtype=np.float64)","68":"import smtplib, ssl\n\nsmtp_server = \"smtp.gmail.com\"\nport = 587  # For starttls\nsender_email = \"@gmail.com\"\npassword = \"\"\n\n# Create a secure SSL context\ncontext = ssl.create_default_context()\n\n# Try to log in to server and send email\ntry:\n    server = smtplib.SMTP(smtp_server,port)\n    server.ehlo() # Can be omitted\n    server.starttls(context=context) # Secure the connection\n    server.ehlo() # Can be omitted\n    server.login(sender_email, password)\n    # TODO: Send email here\n    server.sendmail(sender_email, receiver_email, message)\nexcept Exception as e:\n    # Print any error messages to stdout\n    print(e)\nfinally:\n    server.quit()","69":"# instead of \ndf[df['gender'] == 'F']['gender'] = 'Female'\n# do\ndf.loc[df['gender'] == 'F', 'gender'] = 'Female'","70":"#!D:\\Users\\Ritvik\\Anaconda3\\envs\\datascience\\python.exe","71":"$.fn.shuffleChildren = function() {\n    $.each(this.get(), function(index, el) {\n        var $el = $(el);\n        var $find = $el.children();\n\n        $find.sort(function() {\n            return 0.5 - Math.random();\n        });\n\n        $el.empty();\n        $find.appendTo($el);\n    });\n};\n\n$(\".parent-element\").shuffleChildren();","72":"import itertools\n\ns = itertools.islice(range(50), 10, 20)\nfor val in s:\n    pass","73":"html {\n  scroll-behavior: smooth;\n}\n\n\/\/For browsers that do not support the scroll-behavior property\n\n$(document).ready(function(){\n  $(\"a\").on('click', function(event) {\n    if (this.hash !== \"\") {\n      event.preventDefault();\n      var hash = this.hash;\n      $('html, body').animate({\n        scrollTop: $(hash).offset().top\n      }, 800, function(){\n        window.location.hash = hash;\n      });\n    }\n  });\n});","74":"\/\/ LinkedIn\nhttp:\/\/www.linkedin.com\/shareArticle?mini=true&url=URL\n\n\/\/ Twitter\nhttps:\/\/twitter.com\/share?url=URL\n\n\/\/ Facebook\nhttps:\/\/www.facebook.com\/sharer\/sharer.php?u=URL\n\n\/\/ WhatsApp\n &lt;a target=\"_blank\" data-action=\"share\/whatsapp\/share\" href=\"whatsapp:\/\/send?text=TEXT\"&gt;SHARE&lt;\/a&gt;","75":"df[['fisrt', 'middle', 'last']] = df.name.str.split(' ', expand=True)","76":"{{ \" url_for('static', filename=\"filename\")\"}}","77":"a\nabout\nabove\nacross\nafter\nafterwards\nagain\nagainst\nall\nalmost\nalone\nalong\nalready\nalso\nalthough\nalways\nam\namong\namongst\namoungst\namount\nan\nand\nanother\nany\nanyhow\nanyone\nanything\nanyway\nanywhere\nare\naround\nas\nat\nback\nbe\nbecame\nbecause\nbecome\nbecomes\nbecoming\nbeen\nbefore\nbeforehand\nbehind\nbeing\nbelow\nbeside\nbesides\nbetween\nbeyond\nbill\nboth\nbottom\nbut\nby\ncall\ncan\ncannot\ncant\nco\ncomputer\ncon\ncould\ncouldnt\ncry\nde\ndescribe\ndetail\ndo\ndone\ndown\ndue\nduring\neach\neg\neight\neither\neleven\nelse\nelsewhere\nempty\nenough\netc\neven\never\nevery\neveryone\neverything\neverywhere\nexcept\nfew\nfifteen\nfify\nfill\nfind\nfire\nfirst\nfive\nfor\nformer\nformerly\nforty\nfound\nfour\nfrom\nfront\nfull\nfurther\nget\ngive\ngo\nhad\nhas\nhasnt\nhave\nhe\nhence\nher\nhere\nhereafter\nhereby\nherein\nhereupon\nhers\nherse\"\nhim\nhimse\"\nhis\nhow\nhowever\nhundred\ni\nie\nif\nin\ninc\nindeed\ninterest\ninto\nis\nit\nits\nitse\"\nkeep\nlast\nlatter\nlatterly\nleast\nless\nltd\nmade\nmany\nmay\nme\nmeanwhile\nmight\nmill\nmine\nmore\nmoreover\nmost\nmostly\nmove\nmuch\nmust\nmy\nmyse\"\nname\nnamely\nneither\nnever\nnevertheless\nnext\nnine\nno\nnobody\nnone\nnoone\nnor\nnot\nnothing\nnow\nnowhere\nof\noff\noften\non\nonce\none\nonly\nonto\nor\nother\nothers\notherwise\nour\nours\nourselves\nout\nover\nown\npart\nper\nperhaps\nplease\nput\nrather\nre\nsame\nsee\nseem\nseemed\nseeming\nseems\nserious\nseveral\nshe\nshould\nshow\nside\nsince\nsincere\nsix\nsixty\nso\nsome\nsomehow\nsomeone\nsomething\nsometime\nsometimes\nsomewhere\nstill\nsuch\nsystem\ntake\nten\nthan\nthat\nthe\ntheir\nthem\nthemselves\nthen\nthence\nthere\nthereafter\nthereby\ntherefore\ntherein\nthereupon\nthese\nthey\nthick\nthin\nthird\nthis\nthose\nthough\nthree\nthrough\nthroughout\nthru\nthus\nto\ntogether\ntoo\ntop\ntoward\ntowards\ntwelve\ntwenty\ntwo\nun\nunder\nuntil\nup\nupon\nus\nvery\nvia\nwas\nwe\nwell\nwere\nwhat\nwhatever\nwhen\nwhence\nwhenever\nwhere\nwhereafter\nwhereas\nwhereby\nwherein\nwhereupon\nwherever\nwhether\nwhich\nwhile\nwhither\nwho\nwhoever\nwhole\nwhom\nwhose\nwhy\nwill\nwith\nwithin\nwithout\nwould\nyet\nyou\nyour\nyours\nyourself\nyourselves\nwhom\nm\ncouldn't\nuntil\nduring\nunder\nwasn\nboth\nout\ndidn\nbefore\naren't\nweren\nwhy\neach\nmightn\ndoesn\nbelow\nshould\nhers\nherself\nwho\ntoo\nmost\nand\nso\nabout\nshould've\nme\nyou'll\nno\nup\nshouldn\ncan\noff\nthan\njust\nonce\nain\nisn\nwon't\nthat'll\nthose\ndon\nhadn't\nisn't\nwhich\nshouldn't\nto\nthemselves\nyourself\nwas\non\nother\no\nhad\nher\nourselves\nmightn't\nhe\ndoes\nany\nyour\nthese\ndoing\nan\nby\nthrough\nwe\nfrom\nmy\nits\nit\nhaven\nma\nhasn't\nbeing\nve\nsome\nshan't\nover\nmustn't\nhimself\ntheirs\nwhere\nif\nmyself\ndo\ndon't\nwouldn't\nthe\nof\nneedn\nwere\naren\nin\nwasn't\nfew\nnow\nmustn\ns\ny\nyou're\ntheir\nbeen\nour\ni\nbecause\nnot\nbe\nthen\nagainst\nd\nhaven't\nhis\nagain\nhow\nall\nas\nweren't\nmore\nwouldn\nwill\ninto\nthis\nyou\nshe's\nare\nyourselves\ndidn't\nabove\nown\nneedn't\nwith\nyou'd\nhave\nam\nfurther\nthere\nvery\nnor\ndoesn't\nwhat\ndid\nthat\nwhile\nthem\nsuch\nhadn\nshe\nbetween\nhaving\ncouldn\nhas\na\nwon\nhim\nhere\nit's\nyou've\nat\nshan\nis\nonly\nthey\nll\nours\nbut\nafter\nhasn\nfor\nwhen\ndown\nsame\nor\nyours\nt\nre\nitself","78":"class Connection:\n    def __init__(self):\n        ...\n\n    def __enter__(self):\n        # Initialize connection...\n\n    def __exit__(self, type, value, traceback):\n        # Close connection...\n\nwith Connection() as c:\n    # __enter__() executes\n    ...\n    # conn.__exit__() executes\n    \n##################################################\nfrom contextlib import contextmanager\n\n@contextmanager\ndef tag(name):\n    print(f\"&lt;{name}&gt;\")\n    yield\n    print(f\"&lt;\/{name}&gt;\")\n\nwith tag(\"h1\"):\n    print(\"This is Title.\")","79":"import nltk, re\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.stem import WordNetLemmatizer\n\ndef expand_contractions(text):\n    text = re.sub(r\"can't\", \"can not\", text)\n    text = re.sub(r\"what's\", \"what is \", text)\n    text = re.sub(r\"'s\", \" \", text)\n    text = re.sub(r\"'ve\", \" have \", text)\n    text = re.sub(r\"n't\", \" not \", text)\n    text = re.sub(r\"i'm\", \"i am \", text)\n    text = re.sub(r\"'re\", \" are \", text)\n    text = re.sub(r\"'d\", \" would \", text)\n    text = re.sub(r\"'ll\", \" will \", text)\n    return text\n\ndef remove_url(text):\n    URL_REGEX = re.compile(r'''((http[s]?:\/\/)[^ &lt;&gt;'\"{}|\\^`[\\]]*)''')\n    return URL_REGEX.sub(r' ', text)\n\ndef remove_handles(text):\n    HANDLES_REGEX = re.compile(r'@\\S+')\n    return HANDLES_REGEX.sub(r' ', text)\n\ndef remove_incomplete_last_word(text):\n    INCOMPLETE_LAST_WORD_REGEX = re.compile(r'\\S+\u00c3\u0192\u00c6\u2019\u00c3\u2020\u00e2\u20ac\u2122\u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00a2\u00c3\u0192\u00c6\u2019\u00c3\u201a\u00c2\u00a2\u00c3\u0192\u00c2\u00a2\u00c3\u00a2\u00e2\u20ac\u0161\u00c2\u00ac\u00c3\u2026\u00c2\u00a1\u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00ac\u00c3\u0192\u00c6\u2019\u00c3\u00a2\u00e2\u201a\u00ac\u00c5\u00a1\u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00a6')\n    return INCOMPLETE_LAST_WORD_REGEX.sub(r' ', text )\n\nremove_punc = lambda x : re.sub(r\"\\W\", ' ', x)\n\nremove_num = lambda x : re.sub(r\"\\d\", ' ', x)\n\nremove_extra_spaces = lambda x : re.sub(r\"\\s+\", ' ', x)\n\nremove_shortwords = lambda x: ' '.join(word for word in x.split() if len(word) &gt; 2)\n\nlower_case = lambda x : x.lower()\n\nwith open('stopwords.txt') as f:\n    sw = map(lambda x : x.strip(), f.readlines())\nstop_words = set(nltk.corpus.stopwords.words('english'))|set(sw)\nremove_stopwords = lambda x: ' '.join(word for word in x.split() if word not in stop_words)\n\nps = PorterStemmer()\nps_stem = lambda x: ' '.join(ps.stem(word) for word in x.split())\n\nwnl = WordNetLemmatizer()\nwnl_lemmatize = lambda x: ' '.join(wnl.lemmatize(word) for word in x.split())\n\ndef tag_pos(x):\n    tag_list =  nltk.pos_tag(nltk.word_tokenize(x))\n    pos = \"\"\n    for t in tag_list:\n        pos += t[0] +'(' + t[1] +')' + ' '\n    return pos\n\ndef cleanText(x, rsw, stm, lem, tgps):\n    x = str(x)\n    x = remove_url(x)\n    x = lower_case(x)\n    x = expand_contractions(x)\n    x = remove_punc(x)\n    x = remove_num(x)\n    x = remove_extra_spaces(x)\n    x = remove_shortwords(x)\n    \n    if rsw:\n        x = remove_stopwords(x)\n    if stm:\n        x = ps_stem(x)\n    if lem:\n        x = wnl_lemmatize(x)\n    if tgps:\n        x = tag_pos(x)\n    return x","80":"::selection {\n  background-color: #FFA;\n  color: #000;\n}","81":"import time, datetime\r\n\r\ndef timestamp():\r\n    ts = time.time()\r\n    st = datetime.datetime.fromtimestamp(ts).strftime('%Y%m%d%H%M%S')\r\n    return st","82":"from functools import wraps\n\ndef timer(orig_func):\n    import time\n\n    @wraps(orig_func)\n    def wrapper(*args, **kwargs):\n        t1 = time.time()\n        result = orig_func(*args, **kwargs)\n        t2 = time.time() - t1\n        print('{} ran in: {} sec'.format(orig_func.__name__, t2))\n        return result\n\n    return wrapper\n\n@timer\ndef display_info(name, age):\n    print('display_info ran with arguments ({}, {})'.format(name, age))\n\ndisplay_info('Tom', 22)","83":"from IPython.display import clear_output\nfor i in range(n):\n    clear_output(wait=True)\n\n    print('Current Progress', i, '\/', n)","84":"function trim(x) {\n    return x.replace(\/^\\s+|\\s+$\/g, '');\n}","85":".truncate {\n  width: 250px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}","86":"try:\n    2*3\nexcept TypeError:\n    print(\"An exception was raised\")\nelse:\n    print(\"Thank God, no exceptions were raised.\")","87":"a, b, *c, d = (1,2,3,4,5)\n\nprint(a) # 1\nprint(b) # 2\nprint(c) # [3,4]\nprint(d) # 5","88":"from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer \n\ndef sentiment_scores(sentence): \n    sia_obj = SentimentIntensityAnalyzer() \n    sentiment_dict = sia_obj.polarity_scores(sentence) \n    if sentiment_dict['compound'] &gt;= 0.05 : \n        return 1\n    elif sentiment_dict['compound'] &lt;= - 0.05 : \n        return -1\n    else : \n        return 0","89":"headers = {\n    'User-Agent': 'Mozilla\/5.0 (Windows NT 6.1)'\n}\n\nres = requests.get(url, headers=headers)\nif res.status_code == requests.codes.ok:\n    ressoup = bs4.BeautifulSoup(res.text, 'lxml')\n    elems = ressoup.select('.link')\n    elems[i].getText()\n    elems[i].get('attr')\nelse:\n    print('Something went wrong')","90":"import numpy as np\nimport pandas as pd\n\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\ndef buildWordCloud(text):\n    wordcloud = WordCloud(width = W, height = H,\n                background_color =BGC,\n                min_font_size = 10,\n                max_words = mw).generate(text)\n    plt.figure(figsize = (W\/\/100, H\/\/100), facecolor = None)\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")\n    plt.tight_layout(pad = 0)\n    plt.show()","91":"import xml.etree.ElementTree as etree\ntree = etree.ElementTree(etree.fromstring(xml_string))\nroot = tree.getroot()\nroot.getchildren()\nnode.attrib","92":"# any()\n# This expression returns True if any element of the iterable is true.\n# If the iterable is empty, it will return False.\n\n&gt;&gt;&gt; any([1&gt;0,1==0,1&lt;0])\nTrue\n&gt;&gt;&gt; any([1&lt;0,2&lt;1,3&lt;2])\nFalse\n\n# all()\n# This expression returns True if all of the elements of the iterable are true. \n# If the iterable is empty, it will return True.\n\n&gt;&gt;&gt; all(['a'&lt;'b','b'&lt;'c'])\nTrue\n&gt;&gt;&gt; all(['a'&lt;'b','c'&lt;'b'])\nFalse","93":"&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; \n&gt;&gt;&gt; myList = [1,1,2,3,4,5,3,2,3,4,2,1,2,3]\n&gt;&gt;&gt; print Counter(myList)\nCounter({2: 4, 3: 4, 1: 3, 4: 2, 5: 1})\n&gt;&gt;&gt;\n&gt;&gt;&gt; print Counter(myList).items()\n[(1, 3), (2, 4), (3, 4), (4, 2), (5, 1)]\n&gt;&gt;&gt; \n&gt;&gt;&gt; print Counter(myList).keys()\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; \n&gt;&gt;&gt; print Counter(myList).values()\n[3, 4, 4, 2, 1]","94":"&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; \n&gt;&gt;&gt; ordinary_dictionary = {}\n&gt;&gt;&gt; ordinary_dictionary['a'] = 1\n&gt;&gt;&gt; ordinary_dictionary['b'] = 2\n&gt;&gt;&gt; ordinary_dictionary['c'] = 3\n&gt;&gt;&gt; ordinary_dictionary['d'] = 4\n&gt;&gt;&gt; ordinary_dictionary['e'] = 5\n&gt;&gt;&gt; \n&gt;&gt;&gt; print ordinary_dictionary\n{'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4}\n&gt;&gt;&gt; \n&gt;&gt;&gt; ordered_dictionary = OrderedDict()\n&gt;&gt;&gt; ordered_dictionary['a'] = 1\n&gt;&gt;&gt; ordered_dictionary['b'] = 2\n&gt;&gt;&gt; ordered_dictionary['c'] = 3\n&gt;&gt;&gt; ordered_dictionary['d'] = 4\n&gt;&gt;&gt; ordered_dictionary['e'] = 5\n&gt;&gt;&gt; \n&gt;&gt;&gt; print ordered_dictionary\nOrderedDict([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)])","95":"# The defaultdict tool is a container in the collections class of Python. \n# It's similar to the usual dictionary (dict) container, \n# but the only difference is that a defaultdict will have a default value if that key has not been set yet. \n# If you didn't use a defaultdict you'd have to check to see if that key exists, \n# and if it doesn't, set it to what you want.\n&gt;&gt;&gt; from collections import defaultdict\n&gt;&gt;&gt; d = defaultdict(list)\n&gt;&gt;&gt; d['python'].append(\"awesome\")\n&gt;&gt;&gt; d['something-else'].append(\"not relevant\")\n&gt;&gt;&gt; d['python'].append(\"language\")\n&gt;&gt;&gt; for i in d.items():\n...     print(i)\n...\n('python', ['awesome', 'language'])\n('something-else', ['not relevant'])","96":"&gt;&gt;&gt; from collections import deque\n&gt;&gt;&gt; d = deque()\n&gt;&gt;&gt; d.append(1)\n&gt;&gt;&gt; print d\ndeque([1])\n&gt;&gt;&gt; d.appendleft(2)\n&gt;&gt;&gt; print d\ndeque([2, 1])\n&gt;&gt;&gt; d.clear()\n&gt;&gt;&gt; print d\ndeque([])\n&gt;&gt;&gt; d.extend('1')\n&gt;&gt;&gt; print d\ndeque(['1'])\n&gt;&gt;&gt; d.extendleft('234')\n&gt;&gt;&gt; print d\ndeque(['4', '3', '2', '1'])\n&gt;&gt;&gt; d.count('1')\n1\n&gt;&gt;&gt; d.pop()\n'1'\n&gt;&gt;&gt; print d\ndeque(['4', '3', '2'])\n&gt;&gt;&gt; d.popleft()\n'4'\n&gt;&gt;&gt; print d\ndeque(['3', '2'])\n&gt;&gt;&gt; d.extend('7896')\n&gt;&gt;&gt; print d\ndeque(['3', '2', '7', '8', '9', '6'])\n&gt;&gt;&gt; d.remove('2')\n&gt;&gt;&gt; print d\ndeque(['3', '7', '8', '9', '6'])\n&gt;&gt;&gt; d.reverse()\n&gt;&gt;&gt; print d\ndeque(['6', '9', '8', '7', '3'])\n&gt;&gt;&gt; d.rotate(3)\n&gt;&gt;&gt; print d\ndeque(['8', '7', '3', '6', '9'])","97":"&gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; Point = namedtuple('Point','x,y')\n&gt;&gt;&gt; pt1 = Point(1,2)\n&gt;&gt;&gt; pt2 = Point(3,4)\n&gt;&gt;&gt; dot_product = ( pt1.x * pt2.x ) +( pt1.y * pt2.y )\n&gt;&gt;&gt; print dot_product\n11\n\n&gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; Car = namedtuple('Car','Price Mileage Colour Class')\n&gt;&gt;&gt; xyz = Car(Price = 100000, Mileage = 30, Colour = 'Cyan', Class = 'Y')\n&gt;&gt;&gt; print xyz\nCar(Price=100000, Mileage=30, Colour='Cyan', Class='Y')\n&gt;&gt;&gt; print xyz.Class\nY","98":"look inside a Python object and see what attributes it has\n\n&gt;&gt;&gt; dir()\n&gt;&gt;&gt; dir(\"Hello World\")\n&gt;&gt;&gt; dir(dir)\n\nThis can be a really useful feature when running Python interactively, and for dynamically exploring objects and modules you are working with.","99":"# == tests equality\n# is test identity\n\nl1 = [1,2,3,4]\nl2 = [1,2,3,4]\n\nprint(l1 == l2) # True\nprint(l1 is l2) # False\n\nl3 = l1\nl1[0] = 5\n\nprint(l1 == l3) # True\nprint(l1 is l3) # True\nprint(l1, id(l1))       # [5, 2, 3, 4] 2391232377608\nprint(l3, id(l3))       # [5, 2, 3, 4] 2391232377608","100":"&gt;&gt;&gt; from itertools import combinations\n&gt;&gt;&gt; \n&gt;&gt;&gt; print list(combinations('12345',2))\n[('1', '2'), ('1', '3'), ('1', '4'), ('1', '5'), ('2', '3'), ('2', '4'), ('2', '5'), ('3', '4'), ('3', '5'), ('4', '5')]\n&gt;&gt;&gt; \n&gt;&gt;&gt; A = [1,1,3,3,3]\n&gt;&gt;&gt; print list(combinations(A,4))\n[(1, 1, 3, 3), (1, 1, 3, 3), (1, 1, 3, 3), (1, 3, 3, 3), (1, 3, 3, 3)]\n&gt;&gt;&gt; from itertools import combinations_with_replacement\n&gt;&gt;&gt; \n&gt;&gt;&gt; print list(combinations_with_replacement('12345',2))\n[('1', '1'), ('1', '2'), ('1', '3'), ('1', '4'), ('1', '5'), ('2', '2'), ('2', '3'), ('2', '4'), ('2', '5'), ('3', '3'), ('3', '4'), ('3', '5'), ('4', '4'), ('4', '5'), ('5', '5')]\n&gt;&gt;&gt; \n&gt;&gt;&gt; A = [1,1,3,3,3]\n&gt;&gt;&gt; print list(combinations(A,2))\n[(1, 1), (1, 3), (1, 3), (1, 3), (1, 3), (1, 3), (1, 3), (3, 3), (3, 3), (3, 3)]","101":"&gt;&gt;&gt; from itertools import permutations\n&gt;&gt;&gt; print permutations(['1','2','3'])\n&lt;itertools.permutations object at 0x02A45210&gt;\n&gt;&gt;&gt; \n&gt;&gt;&gt; print list(permutations(['1','2','3']))\n[('1', '2', '3'), ('1', '3', '2'), ('2', '1', '3'), ('2', '3', '1'), ('3', '1', '2'), ('3', '2', '1')]\n&gt;&gt;&gt; \n&gt;&gt;&gt; print list(permutations(['1','2','3'],2))\n[('1', '2'), ('1', '3'), ('2', '1'), ('2', '3'), ('3', '1'), ('3', '2')]\n&gt;&gt;&gt;\n&gt;&gt;&gt; print list(permutations('abc',3))\n[('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]","102":"&gt;&gt;&gt; from itertools import product\n&gt;&gt;&gt;\n&gt;&gt;&gt; print list(product([1,2,3],repeat = 2))\n[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]\n&gt;&gt;&gt;\n&gt;&gt;&gt; print list(product([1,2,3],[3,4]))\n[(1, 3), (1, 4), (2, 3), (2, 4), (3, 3), (3, 4)]\n&gt;&gt;&gt;\n&gt;&gt;&gt; A = [[1,2,3],[3,4,5]]\n&gt;&gt;&gt; print list(product(*A))\n[(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 3), (3, 4), (3, 5)]\n&gt;&gt;&gt;\n&gt;&gt;&gt; B = [[1,2,3],[3,4,5],[7,8]]\n&gt;&gt;&gt; print list(product(*B))\n[(1, 3, 7), (1, 3, 8), (1, 4, 7), (1, 4, 8), (1, 5, 7), (1, 5, 8), (2, 3, 7), (2, 3, 8), (2, 4, 7), (2, 4, 8), (2, 5, 7), (2, 5, 8), (3, 3, 7), (3, 3, 8), (3, 4, 7), (3, 4, 8), (3, 5, 7), (3, 5, 8)]","103":"\/\/ There is a special syntax called the rest parameter syntax to create\n\/\/ a function that accepts any number of arguments\n\nfunction sum(...values) {\n    let sum = 0;\n    for (let i = 0; i < values.length; i++) {\n        sum += values[i];\n    }\n  \n    return sum;\n}\nconsole.log(sum(1));\nconsole.log(sum(1, 2));\nconsole.log(sum(1, 2, 3));\nconsole.log(sum(1, 2, 3, 4));","104":"\/\/ This snippet returns true if the predicate function returns true for all \n\/\/ elements in a collection and false otherwise. You can omit the second argument\n\/\/ fn if you want to use Boolean as a default value.\n\nconst all = (arr, fn = Boolean) =&gt; arr.every(fn);\n\nall([4, 2, 3], x =&gt; x &gt; 1); \/\/ true\nall([1, 2, 3]); \/\/ true","105":"\/\/ This snippet checks whether all elements of the array are equal.\n\nconst allEqual = arr =&gt; arr.every(val =&gt; val === arr[0]);\n\nallEqual([1, 2, 3, 4, 5, 6]); \/\/ false\nallEqual([1, 1, 1, 1]); \/\/ true","106":"\/\/ This snippet checks whether two numbers are approximately equal \n\/\/ to each other, with a small difference.\n\nconst approximatelyEqual = (v1, v2, epsilon = 0.001) =&gt; Math.abs(v1 - v2) &lt; epsilon;\n\napproximatelyEqual(Math.PI \/ 2.0, 1.5708); \/\/ true","107":"\/\/ This snippet converts the elements that don\u00c3\u00a2\u00e2\u201a\u00ac\u00e2\u201e\u00a2t have commas or double\n\/\/ quotes to strings with comma-separated values..\n\nconst arrayToCSV = (arr, delimiter = ',') =&gt;\n  arr.map(v =&gt; v.map(x =&gt; `\"${x}\"`).join(delimiter)).join('\n');\n  \narrayToCSV([['a', 'b'], ['c', 'd']]); \/\/ '\"a\",\"b\"\n\"c\",\"d\"'\narrayToCSV([['a', 'b'], ['c', 'd']], ';'); \/\/ '\"a\";\"b\"\n\"c\";\"d\"'","108":"\/\/ This snippet converts the elements of an array into &lt;li&gt; tags and appends \n\/\/ them to the list of the given ID\n\nconst arrayToHtmlList = (arr, listID) =&gt;\n  (el =&gt; (\n    (el = document.querySelector('#' + listID)),\n    (el.innerHTML += arr.map(item =&gt; `&lt;li&gt;${item}&lt;\/li&gt;`).join(''))\n  ))();\n  \narrayToHtmlList(['item 1', 'item 2'], 'myListID');","109":"\/\/ This snippet executes a function, returning either the result or the caught error object.\n\nconst attempt = (fn, ...args) =&gt; {\n  try {\n    return fn(...args);\n  } catch (e) {\n    return e instanceof Error ? e : new Error(e);\n  }\n};\nvar elements = attempt(function(selector) {\n  return document.querySelectorAll(selector);\n}, '&gt;_&gt;');\nif (elements instanceof Error) elements = []; \/\/ elements = []","110":"\/\/ This snippet splits values into two groups and then puts a truthy\n\/\/ element of filter in the first group, and in the second group otherwise.\n\nconst bifurcate = (arr, filter) =&gt;\n  arr.reduce((acc, val, i) =&gt; (acc[filter[i] ? 0 : 1].push(val), acc), [[], []]);\nbifurcate(['beep', 'boop', 'foo', 'bar'], [true, true, false, true]); \n\/\/ [ ['beep', 'boop', 'bar'], ['foo'] ]","111":"\/\/ This snippet splits values into two groups, based on a predicate function.\n\/\/ If the predicate function returns a truthy value, the element will be placed \n\/\/ in the first group. Otherwise, it will be placed in the second group.\n\nconst bifurcateBy = (arr, fn) =&gt;\n  arr.reduce((acc, val, i) =&gt; (acc[fn(val, i) ? 0 : 1].push(val), acc), [[], []]);\n  \nbifurcateBy(['beep', 'boop', 'foo', 'bar'], x =&gt; x[0] === 'b'); \n\/\/ [ ['beep', 'boop', 'bar'], ['foo'] ]","112":"\/\/ This snippet checks whether the bottom of a page is visible.\n\nconst bottomVisible = () =&gt;\n  document.documentElement.clientHeight + window.scrollY &gt;=\n  (document.documentElement.scrollHeight || document.documentElement.clientHeight);\n\nbottomVisible(); \/\/ true","113":"\/\/ This snippet returns the length of a string in bytes.\n\nconst byteSize = str =&gt; new Blob([str]).size;\n\nbyteSize('\u00c3\u00b0\u00c5\u00b8\u00cb\u0153\u00e2\u201a\u00ac'); \/\/ 4\nbyteSize('Hello World'); \/\/ 11","114":"\/\/ This snippet capitalizes the first letter of a string.\n\nconst capitalize = ([first, ...rest]) =&gt;\n  first.toUpperCase() + rest.join('');\n  \ncapitalize('fooBar'); \/\/ 'FooBar'\ncapitalize('fooBar', true); \/\/ 'FooBar'","115":"\/\/ This snippet capitalizes the first letter of every word in a given string.\n\n\nconst capitalizeEveryWord = str =&gt; str.replace(\/\b[a-z]\/g, char =&gt; char.toUpperCase());\n\ncapitalizeEveryWord('hello world!'); \/\/ 'Hello World!'","116":"\/\/ This snippet converts a non-array value into array.\n\nconst castArray = val =&gt; (Array.isArray(val) ? val : [val]);\n\ncastArray('foo'); \/\/ ['foo']\ncastArray([1]); \/\/ [1]","117":"\/\/ This snippet removes false values from an array.\n\nconst compact = arr =&gt; arr.filter(Boolean);\n\ncompact([0, 1, false, 2, '', 3, 'a', 'e' * 23, NaN, 's', 34]); \n\/\/ [ 1, 2, 3, 'a', 's', 34 ]","118":"\/\/ This snippet counts the occurrences of a value in an array.\n\nconst countOccurrences = (arr, val) =&gt; arr.reduce((a, v) =&gt; (v === val ? a + 1 : a), 0);\ncountOccurrences([1, 1, 2, 1, 2, 3], 1); \/\/ 3","119":"\/\/ This snippet returns the current URL.\n\nconst currentURL = () =&gt; window.location.href;\n\ncurrentURL(); \/\/ https:\/\/snippy19.surge.sh","120":"\/\/ This snippet flattens an array recursively.\n\nconst deepFlatten = arr =&gt; [].concat(...arr.map(v =&gt; (Array.isArray(v) ? deepFlatten(v) : v)));\n\ndeepFlatten([1, [2], [[3], 4], 5]); \/\/ [1,2,3,4,5]","121":"\/\/ This snippet assigns default values for all properties in an object that are undefined.\n\nconst defaults = (obj, ...defs) =&gt; Object.assign({}, obj, ...defs.reverse(), obj);\n\ndefaults({ a: 1 }, { b: 2 }, { b: 6 }, { a: 3 }); \/\/ { a: 1, b: 2 }","122":"\/\/ This snippet gets a number as input and returns an array of its digits.\n\nconst digitize = n =&gt; [...`${n}`].map(i =&gt; parseInt(i));\n\ndigitize(431); \/\/ [4, 3, 1]","123":"\/\/ This snippet checks whether the parent element contains the child.\n\nconst elementContains = (parent, child) =&gt; parent !== child && parent.contains(child);\n\nelementContains(document.querySelector('head'), document.querySelector('title')); \/\/ true\nelementContains(document.querySelector('body'), document.querySelector('body')); \/\/ false","124":"\/\/ This snippet removes duplicate values in an array.\n\nconst filterNonUnique = arr =&gt; [ \u00c3\u00a2\u00e2\u201a\u00ac\u00c2\u00a6new Set(arr)];\nfilterNonUnique([1, 2, 2, 3, 4, 4, 5]); \/\/ [1, 2, 3, 4, 5]","125":"\/\/ This snippet returns the first key that satisfies a given function.\n\nconst findKey = (obj, fn) =&gt; Object.keys(obj).find(key =&gt; fn(obj[key], key, obj));\n\nfindKey(\n  {\n    barney: { age: 36, active: true },\n    fred: { age: 40, active: false },\n    pebbles: { age: 1, active: true }\n  },\n  o =&gt; o['active']\n); \/\/ 'barney'","126":"\/\/ This snippet can be used to find the difference in days between two dates.\n\nconst getDaysDiffBetweenDates = (dateInitial, dateFinal) =&gt;\n  (dateFinal - dateInitial) \/ (1000 * 3600 * 24);\n  \ngetDaysDiffBetweenDates(new Date('2019-01-13'), new Date('2019-01-15')); \/\/ 2","127":"\/\/ This snippet can be used to get the type of a value.\n\nconst getType = v =&gt;\n  v === undefined ? 'undefined' : v === null ? 'null' : v.constructor.name.toLowerCase();\n  \ngetType(new Set([1, 2, 3])); \/\/ 'set'","128":"\/\/ This snippet can be used to hide all elements specified.\n\nconst hide = (...el) =&gt; [...el].forEach(e =&gt; (e.style.display = 'none'));\n\nhide(document.querySelectorAll('img')); \/\/ Hides all &lt;img&gt; elements on the page","129":"\/\/ This snippet can be used to redirect from HTTP to HTTPS in a particular domain.\n\nconst httpsRedirect = () =&gt; {\n  if (location.protocol !== 'https:') location.replace('https:\/\/' + location.href.split('\/\/')[1]);\n};\n\nhttpsRedirect(); \/\/ If you are on http:\/\/mydomain.com, you are redirected to https:\/\/mydomain.com","130":"\/\/ This snippet can be used to insert an HTML string after the end of a particular element.\n\nconst insertAfter = (el, htmlString) =&gt; el.insertAdjacentHTML('afterend', htmlString);\n\ninsertAfter(document.getElementById('myId'), '&lt;p&gt;after&lt;\/p&gt;'); \/\/ &lt;div id=\"myId\"&gt;...&lt;\/div&gt; &lt;p&gt;after&lt;\/p&gt;","131":"\/\/ This snippet can be used to insert an HTML string before a particular element\n\nconst insertBefore = (el, htmlString) =&gt; el.insertAdjacentHTML('beforebegin', htmlString);\n\ninsertBefore(document.getElementById('myId'), '&lt;p&gt;before&lt;\/p&gt;'); \/\/ &lt;p&gt;before&lt;\/p&gt; &lt;div id=\"myId\"&gt;...&lt;\/div&gt;","132":"\/\/ This snippet can be used to check if a value is of a particular type.\n\nconst is = (type, val) =&gt; ![, null].includes(val) && val.constructor === type;\n\nis(Array, [1]); \/\/ true\nis(ArrayBuffer, new ArrayBuffer()); \/\/ true\nis(Map, new Map()); \/\/ true\nis(RegExp, \/.\/g); \/\/ true\nis(Set, new Set()); \/\/ true\nis(WeakMap, new WeakMap()); \/\/ true\nis(WeakSet, new WeakSet()); \/\/ true\nis(String, ''); \/\/ true\nis(String, new String('')); \/\/ true\nis(Number, 1); \/\/ true\nis(Number, new Number(1)); \/\/ true\nis(Boolean, true); \/\/ true\nis(Boolean, new Boolean(true)); \/\/ true","133":"\/\/ This snippet can be used to check whether a particular string is an anagram with another string.\n\nconst isAnagram = (str1, str2) =&gt; {\n  const normalize = str =&gt;\n    str\n      .toLowerCase()\n      .replace(\/[^a-z0-9]\/gi, '')\n      .split('')\n      .sort()\n      .join('');\n  return normalize(str1) === normalize(str2);\n};\n\nisAnagram('iceman', 'cinema'); \/\/ true","134":"\/\/ This snippet can be used to check if a provided argument is iterable like an array.\n\nconst isArrayLike = obj =&gt; obj != null && typeof obj[Symbol.iterator] === 'function';\n\nisArrayLike(document.querySelectorAll('.className')); \/\/ true\nisArrayLike('abc'); \/\/ true\nisArrayLike(null); \/\/ false","135":"\/\/ This snippet can be used to determine whether the current runtime \n\/\/ environment is a browser. This is helpful for avoiding errors \n\/\/ when running front-end modules on the server (Node).\n\nconst isBrowser = () =&gt; ![typeof window, typeof document].includes('undefined');\n\nisBrowser(); \/\/ true (browser)\nisBrowser(); \/\/ false (Node)","136":"\/\/ This snippet can be used to determine whether the browser tab is focused.\n\nconst isBrowserTabFocused = () =&gt; !document.hidden;\n\nisBrowserTabFocused(); \/\/ true","137":"\/\/ This snippet can be used to check whether a value is null or undefined.\n\nconst isNil = val =&gt; val === undefined || val === null;\n\nisNil(null); \/\/ true\nisNil(undefined); \/\/ true","138":"\/\/ This snippet can be used to check whether a string is a valid JSON.\n\nconst isValidJSON = str =&gt; {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nisValidJSON('{\"name\":\"Adam\",\"age\":20}'); \/\/ true\nisValidJSON('{\"name\":\"Adam\",age:\"20\"}'); \/\/ false\nisValidJSON(null); \/\/ true","139":"\/\/ This snippet compares two objects to determine if the first \n\/\/ one contains the same property values as the second one.\n\nconst matches = (obj, source) =&gt;\n  Object.keys(source).every(key =&gt; obj.hasOwnProperty(key) && obj[key] === source[key]);\n  \nmatches({ age: 25, hair: 'long', beard: true }, { hair: 'long', beard: true }); \/\/ true\nmatches({ hair: 'long', beard: true }, { age: 25, hair: 'long', beard: true }); \/\/ false","140":"\/\/ This snippet can be used to convert a nodeList to an array.\n\nconst nodeListToArray = nodeList =&gt; [...nodeList];\n\nnodeListToArray(document.childNodes); \/\/ [ &lt;!DOCTYPE html&gt;, html ]","141":"\/\/ This snippet can be used to pad a string on both sides with a \n\/\/ specified character if it is shorter than the specified length.\n\nconst pad = (str, length, char = ' ') =&gt;\n  str.padStart((str.length + length) \/ 2, char).padEnd(length, char);\n  \npad('cat', 8); \/\/ '  cat   '\npad(String(42), 6, '0'); \/\/ '004200'\npad('foobar', 3); \/\/ 'foobar'","142":"\/\/ This snippet can be used to do a redirect to a specified URL.\n\nconst redirect = (url, asLink = true) =&gt;\n  asLink ? (window.location.href = url) : window.location.replace(url);\n  \nredirect('https:\/\/google.com');","143":"\/\/ This snippet can be used to round a number to a specified number of digits.\n\nconst round = (n, decimals = 0) =&gt; Number(`${Math.round(`${n}e${decimals}`)}e-${decimals}`);\n\nround(1.005, 2); \/\/ 1.01","144":"\/\/ This snippet can be used to get a random number from an array.\n\nconst sample = arr =&gt; arr[Math.floor(Math.random() * arr.length)];\n\nsample([3, 7, 9, 11]); \/\/ 9","145":"\/\/ This snippet can be used to get n random elements from unique\n\/\/ positions from an array up to the size of the array. Elements \n\/\/ in the array are shuffled using the Fisher-Yates algorithm.\n\nconst sampleSize = ([...arr], n = 1) =&gt; {\n  let m = arr.length;\n  while (m) {\n    const i = Math.floor(Math.random() * m--);\n    [arr[m], arr[i]] = [arr[i], arr[m]];\n  }\n  return arr.slice(0, n);\n};\n\nsampleSize([1, 2, 3], 2); \/\/ [3,1]\nsampleSize([1, 2, 3], 4); \/\/ [2,3,1]","146":"\/\/ This snippet can be used to do a smooth scroll to the top of the current page.\n\nconst scrollToTop = () =&gt; {\n  const c = document.documentElement.scrollTop || document.body.scrollTop;\n  if (c &gt; 0) {\n    window.requestAnimationFrame(scrollToTop);\n    window.scrollTo(0, c - c \/ 8);\n  }\n};\n\nscrollToTop();","147":"\/\/ This snippet can be used to serialize a cookie name-value pair into a Set-Cookie header string.\n\nconst serializeCookie = (name, val) =&gt; `${encodeURIComponent(name)}=${encodeURIComponent(val)}`;\n\nserializeCookie('foo', 'bar'); \/\/ 'foo=bar'","148":"\/\/ This snippet can be used to show all the elements specified.\n\nconst show = (...el) =&gt; [...el].forEach(e =&gt; (e.style.display = ''));\n\nshow(...document.querySelectorAll('img')); \/\/ Shows all &lt;img&gt; elements on the page","149":"\/\/ This snippet can be used to smoothly scroll the element on \n\/\/ which it is called into the visible area of the browser window.\n\nconst smoothScroll = element =&gt;\n  document.querySelector(element).scrollIntoView({\n    behavior: 'smooth'\n  });\n  \nsmoothScroll('#fooBar'); \/\/ scrolls smoothly to the element with the id fooBar\nsmoothScroll('.fooBar'); \/\/ scrolls smoothly to the first element with a class of fooBar","150":"\/\/ This snippet can be used to alphabetically sort the characters in a string.\n\nconst sortCharactersInString = str =&gt; [...str].sort((a, b) =&gt; a.localeCompare(b)).join('');\n\nsortCharactersInString('cabbage'); \/\/ 'aabbceg'","151":"\/\/ This snippet can be used to remove HTML\/XML tags from a string.\n\nconst stripHTMLTags = str =&gt; str.replace(\/&lt;[^&gt;]*&gt;\/g, '');\n\nstripHTMLTags('&lt;p&gt;&lt;em&gt;lorem&lt;\/em&gt; &lt;strong&gt;ipsum&lt;\/strong&gt;&lt;\/p&gt;'); \/\/ 'lorem ipsum'","152":"\/\/ This snippet can be used to find out the time it takes to execute a function.\n\nconst timeTaken = callback =&gt; {\n  console.time('timeTaken');\n  const r = callback();\n  console.timeEnd('timeTaken');\n  return r;\n};\n\ntimeTaken(() =&gt; Math.pow(2, 10)); \/\/ 1024, (logged): timeTaken: 0.02099609375ms","153":"\/\/ This snippet can be used to format a number like a currency.\n\nconst toCurrency = (n, curr, LanguageFormat = undefined) =&gt;\n  Intl.NumberFormat(LanguageFormat, { style: 'currency', currency: curr }).format(n);\n  \ntoCurrency(123456.789, 'EUR'); \/\/ \u00c3\u00a2\u00e2\u20ac\u0161\u00c2\u00ac123,456.79  | currency: Euro | currencyLangFormat: Local\ntoCurrency(123456.789, 'USD', 'en-us'); \/\/ $123,456.79  | currency: US Dollar | currencyLangFormat: English (United States)\ntoCurrency(123456.789, 'USD', 'fa'); \/\/ \u00c3\u203a\u00c2\u00b1\u00c3\u203a\u00c2\u00b2\u00c3\u203a\u00c2\u00b3\u00c3\u2122\u00c2\u00ac\u00c3\u203a\u00c2\u00b4\u00c3\u203a\u00c2\u00b5\u00c3\u203a\u00c2\u00b6\u00c3\u2122\u00c2\u00ab\u00c3\u203a\u00c2\u00b7\u00c3\u203a\u00c2\u00b9 \u00c3\u02dc\u00c5\u201c$ | currency: US Dollar | currencyLangFormat: Farsi\ntoCurrency(322342436423.2435, 'JPY'); \/\/ \u00c3\u201a\u00c2\u00a5322,342,436,423 | currency: Japanese Yen | currencyLangFormat: Local\ntoCurrency(322342436423.2435, 'JPY', 'fi'); \/\/ 322 342 436 423 \u00c3\u201a\u00c2\u00a5 | currency: Japanese Yen | currencyLangFormat: Finnish","154":"\/\/ This snippet uses the toLocaleString() function to convert \n\/\/ float-point arithmetic to the decimal mark form by using a\n\/\/ number to make a comma-separated string.\n\nconst toDecimalMark = num =&gt; num.toLocaleString('en-US');\n\ntoDecimalMark(12305030388.9087); \/\/ \"12,305,030,388.909\"","155":"\/\/ This snippet can be used to check whether a value is a number.\n\nconst validateNumber = n =&gt; !isNaN(parseFloat(n)) && isFinite(n) && Number(n) == n;\n\nvalidateNumber('10'); \/\/ true","156":"\/\/ This snippet converts a string into an array of words.\n\nconst words = (str, pattern = \/[^a-zA-Z-]+\/) =&gt; str.split(pattern).filter(Boolean);\n\nwords('I love javaScript!!'); \/\/ [\"I\", \"love\", \"javaScript\"]\nwords('python, javaScript & coffee'); \/\/ [\"python\", \"javaScript\", \"coffee\"]","157":"Get the HTML elements in the console just like inspecting elements\n\n<img src=\"data\/imgs\/jsconsole05.png\">","158":"Want to view JSON in a proper and easily understandable way?\n\nuse console.table ( )\n\n<img src=\"data\/imgs\/jsconsole06.png\">","159":"Use the %c placeholder\n<img src=\"data\/imgs\/jsconsole03.png\">","160":"This comes quite handy when you only want to print some selected logs i.e. \nit will only print the false argument. It does nothing at all if the \nfirst argument is true.\n\n<img src=\"data\/imgs\/jsconsole09.png\">","161":"This function logs the number of times that this particular call to \ncount() has been called.\nThis function takes an optional argument label.\nIf label is supplied, this function logs the number of times count() \nhas been called with that particular label.\nIf label is omitted, the function logs the number of times count() \nhas been called at this particular line.\n\n<img src=\"data\/imgs\/jsconsole08.png\">","162":"Wondering how our JavaScript applications are using browser memory?\n\n<img src=\"data\/imgs\/jsconsole12.png\">","163":"A dedicated function for tracking the time taken for actions, \nconsole.time() is a better way to track the microtime taken for JavaScript executions.\n\n<img src=\"data\/imgs\/jsconsole11.png\">","164":"This method displays a trace that shows how the code ended up at a certain point.\n\n<img src=\"data\/imgs\/jsconsole10.png\">","165":"It is quite possible to group the messages with the console\n\n<img src=\"data\/imgs\/jsconsole07.png\">","166":"Use console.dir()\n<img src=\"data\/imgs\/jsconsole04.png\">","167":"There are different placeholders that can be used as listed below\n%o \u2014 which takes an object,\n%s \u2014 which takes a string, and\n%d \u2014 which is for a decimal or integer\n\n<img src=\"data\/imgs\/jsconsole02.png\">","168":"console.log()\nconsole.info()\nconsole.debug()\nconsole.warn()\nconsole.error()\n\n<img src=\"data\/imgs\/jsconsole01.png\">","169":"&gt;&gt;&gt; import re\n&gt;&gt;&gt; re.findall(r'\\w','http:\/\/www.hackerrank.com\/')\n['h', 't', 't', 'p', 'w', 'w', 'w', 'h', 'a', 'c', 'k', 'e', 'r', 'r', 'a', 'n', 'k', 'c', 'o', 'm']\n\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; re.finditer(r'\\w','http:\/\/www.hackerrank.com\/')\n&lt;callable-iterator object at 0x0266C790&gt;\n&gt;&gt;&gt; map(lambda x: x.group(),re.finditer(r'\\w','http:\/\/www.hackerrank.com\/'))\n['h', 't', 't', 'p', 'w', 'w', 'w', 'h', 'a', 'c', 'k', 'e', 'r', 'r', 'a', 'n', 'k', 'c', 'o', 'm']","170":"&gt;&gt;&gt; import re\n&gt;&gt;&gt; m = re.match(r'(\\w+)@(\\w+)\\.(\\w+)','username@hackerrank.com')\n&gt;&gt;&gt; m.group(0)       # The entire match \n'username@hackerrank.com'\n&gt;&gt;&gt; m.group(1)       # The first parenthesized subgroup.\n'username'\n&gt;&gt;&gt; m.group(2)       # The second parenthesized subgroup.\n'hackerrank'\n&gt;&gt;&gt; m.group(3)       # The third parenthesized subgroup.\n'com'\n&gt;&gt;&gt; m.group(1,2,3)   # Multiple arguments give us a tuple.\n('username', 'hackerrank', 'com')\n\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; m = re.match(r'(\\w+)@(\\w+)\\.(\\w+)','username@hackerrank.com')\n&gt;&gt;&gt; m.groups()\n('username', 'hackerrank', 'com')\n\n&gt;&gt;&gt; m = re.match(r'(?P&lt;user&gt;\\w+)@(?P&lt;website&gt;\\w+)\\.(?P&lt;extension&gt;\\w+)','myname@hackerrank.com')\n&gt;&gt;&gt; m.groupdict()\n{'website': 'hackerrank', 'user': 'myname', 'extension': 'com'}"}}