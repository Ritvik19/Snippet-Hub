{"Title":{"0":"AJAX and JSON","1":"ANN","2":"API Access Token","3":"Apply - Multiple Columns","4":"Apply Mapping","5":"Broken Image","6":"CNN","7":"CNN (text)","8":"CSS Variables","9":"Call py func","10":"Charset detection with chardet","11":"Combine Smaller Categories","12":"Continuous to Categorical","13":"Controlling What Can Be Imported","14":"Custom Scroll Bar","15":"Date Time Cheatsheet","16":"Deal with Large Numbers","17":"Device Breakpoints","18":"Dict to XML","19":"Difference Between Rows","20":"Directory Manipulations","21":"Directory Walk","22":"Docstring","23":"Download a file","24":"Dynamic Attributes","25":"Editable HTML element","26":"Equal Height Columns","27":"Eval()","28":"Exploding a List","29":"Favicon","30":"Filtering","31":"Flask Admin","32":"Flask Template","33":"Flask templating","34":"Flatten a list","35":"Function Annotations","36":"GET request Flask","37":"Generate Secret Key","38":"Geo Plotting","39":"HTML Redirects","40":"HTML Template","41":"Horizontal Scroll","42":"IgnoreWarnings","43":"Image Shadow","44":"Image as Text Background","45":"Interactive Jupyter Widgets","46":"JSON-dict","47":"JavaScript Utilities","48":"Keras Classification Metrics","49":"Key Press JavaScript","50":"Lighten\/Darken Colors","51":"List Filter","52":"Logging","53":"Logging- Function Decorator","54":"MarkUp Tag Generation","55":"Modules from Directory","56":"Most Common Words","57":"Multiple files single 'with'","58":"Multiple plots","59":"Multiple plots (Stacked)","60":"Naming with Underscore","61":"Navigator Object","62":"New Column at Specific Loc","63":"New HTML Window - JavaScript","64":"Notifications in Windows10","65":"Object Representation","66":"Open URLs JavaScript","67":"Pandas Display Settings","68":"Parallax Effect","69":"Password Hashing","70":"Password in command line","71":"Percentages in CrossTabs","72":"Periodically Refresh Page","73":"Python Dictionary","74":"RNN (text)","75":"Read GET Data","76":"Safe content Jinja","77":"Saving np Array","78":"Scheduling Functions","79":"Script to CLI","80":"Sending Mails","81":"SettingWithCopyWarning","82":"Shebang","83":"Shuffle Children","84":"Slicing an Iterator","85":"Smooth Scrolling","86":"Social Share Links","87":"Split in Multiple Columns","88":"Static Imports","89":"Stopwords","90":"Support for with Statements","91":"Text Preprocessing","92":"Text Selection Color","93":"The _ in an interactive shell","94":"TimeStamp","95":"Timming- Function Decorator","96":"Tracking Loops","97":"Truncate Strings","98":"Try Else","99":"Unpacking","100":"VADER Sentiment Analysis","101":"Webscraping","102":"Word Cloud","103":"Word Wrap in pre","104":"XML Parsing","105":"Zip Jinja","106":"all() and any()","107":"blog: CORS","108":"blog: Color Palette","109":"blog: ML Project Checklist","110":"collections.Counter()","111":"collections.OrderedDict()","112":"collections.defalutdict()","113":"collections.deque()","114":"collections.namedtuple()","115":"dir","116":"easyEDA: Check Nulls","117":"easyEDA: Correaltion Heatmap","118":"easyEDA: Distrubtion by class plot","119":"easyEDA: Histogram Numeric Columns","120":"is vs ==","121":"itertools.combinations()","122":"itertools.permutations()","123":"itertools.product()","124":"js-127: Arrow Functions","125":"js-127: Converting to Boolean","126":"js-127: Converting to Number","127":"js-127: Default Values","128":"js-127: For Each","129":"js-127: Rest Operator","130":"js-127: Rest parameter syntax","131":"js-127: Template Literals","132":"js-127: all","133":"js-127: allEqual","134":"js-127: approximatelyEqual","135":"js-127: arrayToCSV","136":"js-127: arrayToHtmlList","137":"js-127: attempt","138":"js-127: bifurcate","139":"js-127: bifurcateBy","140":"js-127: bottomVisible","141":"js-127: byteSize","142":"js-127: capitalize","143":"js-127: capitalizeEveryWord","144":"js-127: castArray","145":"js-127: compact","146":"js-127: copyStringToClipboard","147":"js-127: copyToClipboard","148":"js-127: countOccurrences","149":"js-127: currentURL","150":"js-127: deepFlatten","151":"js-127: default","152":"js-127: digitize","153":"js-127: elementContains","154":"js-127: filterNonUnique","155":"js-127: findKey","156":"js-127: for loop shorthand","157":"js-127: getDaysDiffBetweenDates","158":"js-127: getType","159":"js-127: hide","160":"js-127: httpsRedirect","161":"js-127: insertAfter","162":"js-127: insertBefore","163":"js-127: is","164":"js-127: isAnagram","165":"js-127: isArrayLike","166":"js-127: isBrowser","167":"js-127: isBrowserTabFocused","168":"js-127: isNil","169":"js-127: isValidJSON","170":"js-127: matches","171":"js-127: nodeListToArray","172":"js-127: pad","173":"js-127: redirect","174":"js-127: round","175":"js-127: sample","176":"js-127: sampleSize","177":"js-127: scrollToTop","178":"js-127: serializeCookie","179":"js-127: show","180":"js-127: smoothScroll","181":"js-127: sortCharactersInString","182":"js-127: stripHTMLTags","183":"js-127: timeTaken","184":"js-127: toCurrency","185":"js-127: toDecimalMark","186":"js-127: trim","187":"js-127: validateNumber","188":"js-127: words","189":"js-console: HTML elements","190":"js-console: JSON table","191":"js-console: add css","192":"js-console: console.assert( )","193":"js-console: console.count( )","194":"js-console: console.memory( )","195":"js-console: console.time( )","196":"js-console: console.trace( )","197":"js-console: group the messages","198":"js-console: json representation","199":"js-console: placeholders","200":"js-console: various logging Methods","201":"re.findall()","202":"re.group()","203":"requirements.txt"},"Description":{"0":"(javascript) (web)","1":"(python)","2":"(python)","3":"(pandas)(python)","4":"To a DataFrame using Dictionary (python)","5":"(css)(web)","6":"(keras) (python)","7":"(python)","8":"(web)","9":"(flask) (python)","10":"(python)","11":"in a Series\n(pandas) (python)","12":"(pandas dataframe) (python)","13":"(python)","14":"(web)","15":"(python)","16":"(python)","17":"(css media-queries) (web)","18":"(python)","19":"(Pandas DataFrame) (python)","20":"(python)","21":"(python)","22":"(python)","23":"(python)","24":"(python)","25":"(html) (web)","26":"(css) (web)","27":"(python)","28":"(pandas dataframe) (python)","29":"(html)","30":"(web)","31":"(flask)(python)","32":"(flask) (python)","33":"(flask) (python)","34":"(python)","35":"(python)","36":"(flask) (python)","37":"(python)","38":"(plotly)(python)","39":"(web)","40":"(html)(web)","41":"(css)(web)","42":"(python)","43":"(web)","44":"(css) (web)","45":"(python)","46":"(python)","47":"(javascript)(web)","48":"(keras) (python)","49":"(javascript) (web)","50":"(javascript)(web)","51":"(web)","52":"(logging)(python)","53":"(python)","54":"(python)","55":"(python)","56":"In a DataFrame (python)","57":"(python)","58":"(python)","59":"(python)","60":"(python)","61":"(javascript) (web)","62":"(pandas)(python)","63":"(javascript) (web)","64":"(python)","65":"__repr__ (python)","66":"(javascript) (web)","67":"(python)","68":"(css) (web)","69":"(flask)(python)","70":"(python)","71":"(pandas)(python)","72":"(html)","73":"(python)","74":"(python)","75":"(javascript) (web)","76":"(jinja)(web)","77":"(numpy)(python)","78":"(flask)(python)","79":"(python)","80":"(python)","81":"(pandas) (python)","82":"Shebang line for anaconda virtual environments (python)","83":"(javascript)(jquery)(web)","84":"(python)","85":"(css jquery) (web)","86":"(html)(web)","87":"(pandas dataframe) (python)","88":"(flask) (python)","89":"List of Stopwords(text)","90":"(python)","91":"(python)","92":"(css)(web)","93":"(python)","94":"(python)","95":"(python)","96":"(python)","97":"(css)(web)","98":"(python)","99":"(python)","100":"(python)","101":"(python)","102":"(python)","103":"(css)","104":"(python)","105":"(jinja)(web)","106":"(python)","107":"(blog)","108":"(blog)","109":"(blog)","110":"(python)","111":"(python)","112":"(python)","113":"(python)","114":"(python)","115":"(python)","116":"(python)","117":"(python)","118":"(python)","119":"(python)","120":"(python)","121":"(python)","122":"(python)","123":"(python)","124":"(javascript)(web)","125":"(javascript)(web)","126":"(javascript)(web)","127":"(javascript)(web)","128":"(javascript)(web)","129":"(javascript)(web)","130":"(javascript)","131":"(js)(web)","132":"(javascript)","133":"(javascript)","134":"(javascript)","135":"(javascript)","136":"(javascript)","137":"(javascript)","138":"(javascript)","139":"(javascript)","140":"(javascript)","141":"(javascript)","142":"(javascript)","143":"(javascript)","144":"(javascript)","145":"(javascript)","146":"(javascript)(web)","147":"(javascript)(web)","148":"(javascript)","149":"(javascript)","150":"(javascript)","151":"(javascript)","152":"(javascript)","153":"(javascript)","154":"(javascript)","155":"(javascript)","156":"(js)(web)","157":"(javascript)","158":"(javascript)","159":"(javascript)","160":"(javascript)","161":"(javascript)","162":"(javascript)","163":"(javascript)","164":"(javascript)","165":"(javascript)","166":"(javascript)","167":"(javascript)","168":"(javascript)","169":"(javascript)","170":"(javascript)","171":"(javascript)","172":"(javascript)","173":"(javascript)","174":"(javascript)","175":"(javascript)","176":"(javascript)","177":"(javascript)","178":"(javascript)","179":"(javascript)","180":"(javascript)","181":"(javascript)","182":"(javascript)","183":"(javascript)","184":"(javascript)","185":"(javascript)","186":"(web)","187":"(javascript)","188":"(javascript)","189":"(javascript)(web)","190":"(javascript)(web)","191":"(javascript)(web)","192":"(javascript)(web)","193":"(javascript)(web)","194":"(javascript)(web)","195":"(javascript)(web)","196":"(javascript)(web)","197":"(javascript)(web)","198":"(javascript)(web)","199":"(javascript)(web)","200":"(javascript)(web)","201":"(python)","202":"(python)","203":"(python)"},"Code":{"0":"function loadCode(p, q, e)\n{\n  var xhttp = new XMLHttpRequest();\n  var filepath = '..\/..\/..'\n  console.log(filepath)\n  xhttp.onreadystatechange = function() {\n    if (this.readyState == 4 && this.status == 200) {\n     var dataObj = JSON.parse(this.responseText);\n     col1 = dataObj['col1']\n     content = ''\n     var i = 0;\n     while(typeof program_name[i] !== \"undefined\")\n     {\n        content += col1[i]+'\n'\n     }\n     document.getElementById(\"demo\").innerHTML = content;\n    }\n  };\n  xhttp.open(\"GET\", filepath, true);\n  xhttp.send();\n}","1":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras import optimizers\n# optimizers.SGD()\n# optimizers.RMSProp()\n# optimizers.Adagrad()\n# optimizers.Adadelta()\n# optimizers.Adam()\n\nes = EarlyStopping(monitor='loss', mode='min', verbose=1)\nfilepath = \"model.h5\"\nckpt = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')\n\ndef build_network():\n    model = Sequential()\n    model.add(Dense(160,input_dim=40, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(320, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(365, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(125, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(25, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer=, metrics=['accuracy'])\n    model.summary()\n    return model\n\nmodel = build_network()\n\nmodel.fit(scaled_data, train_label[0], validation_split=0.3, epochs=25, callbacks=[es, ckpt])\n\n\nfrom keras.models import load_model\nnew_model = load_model(\"model.h5\")","2":"&gt;&gt;&gt; from secrets import token_hex, token_urlsafe\n\n&gt;&gt;&gt; token_hex(16)  \n'f9bf78b9a18ce6d46a0cd2b0b86df9da'\n\n&gt;&gt;&gt; token_urlsafe(16)  \n'Drmhze6EPcv0fN_81Bj-nA'","3":"df['c'] = df[['a', 'b']].apply(lambda row: row['a'] + row['b'], axis=1)","4":"mapping = {'male':0, 'female':1}\n\n\ncols = ['A', 'B', 'C']\ndf[cols] = df[cols].applymap(mapping.get())","5":"\/* Add \" (PDF)\" text after links that go to PDFs *\/\na[href$=\".pdf\"]:after { content: \" (PDF)\"; }\n\n\/* If file size specified as data attribute, use that too *\/\na[href$=\".pdf\"][data-size]:after { content: \" (PDF, \" attr(data-size) \")\"; }\n\n\n&lt;p&gt;Watch out for the &lt;a href=\"some.pdf\"&gt;PDF bomb&lt;\/a&gt; here!&lt;\/p&gt;\n\/\/ Watch out for the PDF bomb (PDF) here!\n\n\n&lt;p&gt;Watch out for the &lt;a href=\"some.pdf\" data-size=\"2 MB\"&gt;PDF bomb&lt;\/a&gt; here!&lt;\/p&gt;\n\/\/ Watch out for the PDF bomb (PDF, 2 MB) here!","6":"import numpy as np\nimport pandas as pd\n\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing import image\n\nfrom keras import backend as K\n\n\ndef recall_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n        recall = true_positives \/ (possible_positives + K.epsilon())\n        return recall\n\ndef precision_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n        precision = true_positives \/ (predicted_positives + K.epsilon())\n        return precision\n\ndef f1_m(y_true, y_pred):\n    precision = precision_m(y_true, y_pred)\n    recall = recall_m(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))\n\n\nes = EarlyStopping(monitor='loss', mode='min', verbose=1)\nfilepath = \"model.h5\"\nckpt = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')\n\nimage_size = (90, 60)\n\ndatagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True,\n                                   validation_split=0.3)\n\ntraining_set = datagen.flow_from_directory('\/Train Images',\n                                                 target_size = image_size,\n                                                 batch_size = 32,\n                                                 class_mode = 'binary',\n                                                 subset='training')\n\nvalidation_set = datagen.flow_from_directory('\/Train Images',\n                                                 target_size = image_size,\n                                                 batch_size = 32,\n                                                 class_mode = 'binary',\n                                                 subset='validation')\n\n\ndef cnn(image_size):\n    classifier = Sequential()\n    classifier.add(Conv2D(32, (3, 3), input_shape = (*image_size, 3), activation = 'relu'))\n    classifier.add(Dropout(0.2))\n    classifier.add(Conv2D(32, (3, 3), activation = 'relu'))\n    classifier.add(MaxPooling2D(pool_size = (2, 2)))\n    classifier.add(Flatten())\n    classifier.add(Dense(units = 128, activation = 'relu'))\n    classifier.add(Dropout(0.2))\n    classifier.add(Dense(units = 1, activation = 'sigmoid'))\n    classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['acc',f1_m,precision_m, recall_m])\n    return classifier\n\n\nneuralnetwork = cnn(image_size)\n\n\nneuralnetwork.summary()\n\n\nneuralnetwork.fit_generator(training_set,\n                         steps_per_epoch = 8000,\n                         epochs = 25,\n                         validation_data = validation_set,\n                         validation_steps = 2000, \n                         callbacks=[es, ckpt])\n                         \n                         \n# Predictions\n\nimport numpy as np\nimport pandas as pd\nfrom keras.preprocessing import image\nfrom keras.models import load_model\nfrom keras import backend as K\n\ndef recall_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n        recall = true_positives \/ (possible_positives + K.epsilon())\n        return recall\n\ndef precision_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n        precision = true_positives \/ (predicted_positives + K.epsilon())\n        return precision\n\ndef f1_m(y_true, y_pred):\n    precision = precision_m(y_true, y_pred)\n    recall = recall_m(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))\n\nneuralnetwork = load_model('model.h5', custom_objects={'f1_m':f1_m, 'precision_m':precision_m, 'recall_m':recall_m})\n\ntest_image = image.load_img(f'\/Test Images\/{image_path}', target_size = (90, 60))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nclass_index = neuralnetwork.predict(test_image)[0][0]\nprobability = neuralnetwork.predict_proba(test_image)[0][0]","7":"from keras.models import Sequential\nfrom keras.laeyrs import Dense, Dropout, Flatten, Embedding, Convolution1D, MaxPooling1D\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras import optimizers\n# optimizers.SGD()\n# optimizers.RMSProp()\n# optimizers.Adagrad()\n# optimizers.Adadelta()\n# optimizers.Adam()\n\nvocabulary_size = 7500\npad_length = 1000\ntokenizer = Tokenizer(num_words= vocabulary_size)\ntokenizer.fit_on_texts(X)\nsequences = tokenizer.texts_to_sequences(X)\npadded_sequences = pad_sequences(sequences, maxlen=pad_length)\n\nes = EarlyStopping(monitor='loss', mode='min', verbose=1)\nfilepath = \"model.h5\"\nckpt = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')\n\ndef build_network():\n    model = Sequential()\n    model.add(Embedding(vocabulary_size, 1024, input_length=pad_length))\n    model.add(Convolution1D(1024, kernel_size=5, activation='tanh', strides=2))\n    model.add(MaxPooling1D(pool_size=5))\n    model.add(Dense(160,input_dim=40, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(320, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(365, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(125, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(25, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer=, metrics=['accuracy'])\n    model.summary()\n    return model\n\nmodel = build_network()\n\nmodel.fit(scaled_data, train_label[0], validation_split=0.3, epochs=25, callbacks=[es, ckpt])\n\n\nfrom keras.models import load_model\nnew_model = load_model(\"model.h5\")","8":":root {\n  --main-bg-color: coral; \n}\n\n#div1 {\n  background-color: var(--main-bg-color); \n}","9":"from flask import Flask, render_template, Response, request, redirect, url_for\n\napp = Flask(__name__)\n\n@app.route(\"\/\")\ndef index():\n    return render_template('index.html')\n\n@app.route(\"\/forward\/\", methods=['POST'])\ndef move_forward():\n    #Moving forward code\n    forward_message = \"Moving Forward...\"\n    return render_template('index.html', forward_message=forward_message);\n\n\nif __name__ == '__main__':\n    app.run(debug=True) \n    \n    \n    \n\/\/Then in your html, use this:\n&lt;form action=\"\/forward\/\" method=\"post\"&gt;\n    &lt;button name=\"forwardBtn\" type=\"submit\"&gt;Forward&lt;\/button&gt;\n&lt;\/form&gt;\n\/\/To execute your moving forward code. And include this:\n{{ forward_message }}","10":"You can use the chardet module to detect the charset of a file. \nThis can come in very useful when analyzing big piles of random text. \nInstall with:\n\npip install chardet\n\nYou now have an extra command-line tool called chardetect, \nwhich can be used like this:\n\nchardetect somefile.txt\nsomefile.txt: ascii with confidence 1.0","11":"top_five = data.value_counts().n_largest(5).index\ndata_updated = data.where(data.isin(top_five), other='Other')","12":"df['age_groups'] = pd.cut(df.age, bins=[0, 18, 65, 99], labels=['child', 'adult', 'elderly'])\n\n# 0 to 18 -&gt; 'child'\n# 18 to 65 -&gt; 'adult'\n# 65 to 99 -&gt; 'elderly'","13":"def foo():\n    pass\n\ndef bar():\n    pass\n\n__all__ = [\"bar\"]\n\n\n# Based on code snippet above, we know that only bar function will be exported.","14":"\/* width *\/\n::-webkit-scrollbar {\n  width: 10px;\n}\n\n\/* Track *\/\n::-webkit-scrollbar-track {\n  background: #f1f1f1; \n}\n\n\/* Handle *\/\n::-webkit-scrollbar-thumb {\n  background: #888; \n}\n\n\/* Handle on hover *\/\n::-webkit-scrollbar-thumb:hover {\n  background: #555; \n}","15":"<b>Today\u2019s date and time in different formats<\/b>\n\nfrom datetime import datetime\nd = datetime.now() #today's datetime\nd\n# datetime.datetime(2019, 12, 22, 13, 14, 18, 193898)\n\nprint(d.weekday()) #day of week - Monday is 0 and Sunday is 6\nprint(d.year)\nprint(d.month)\nprint(d.day)\nprint(d.hour)\nprint(d.minute)\nprint(d.second)\n\n<b>Date to string<\/b>\nprint(d.strftime(\"%A %d\/%m\/%Y\"))\n# Sunday 22\/12\/2019\n\n<a href=\"https:\/\/docs.python.org\/3\/library\/datetime.html#strftime-and-strptime-format-codes\" target=\"_blank\">customized date formats<\/a>\n<hr>\n<b>String to date conversion<\/b>\n\ndate_string = '2016-02-01 12:00PM'\nprint(datetime.strptime(date_string, '%Y-%m-%d %I:%M%p'))\n# 2016-02-01 12:00:00\n\ndate_string = '02\/01\/2016'\nd2 = datetime.strptime(date_string, '%m\/%d\/%Y')\nprint(d2)\n# 2016-02-01 00:00:00\n<hr>\n<b>Difference in datetime calculation<\/b>\n\nfrom datetime import timedelta\nd = datetime.now()\ndate_string = '2\/01\/2016'\nd2 = datetime.strptime(date_string, '%m\/%d\/%Y')\nprint(d - d2)\n\n# 1420 days, 13:18:27.386763\n\ndate_diff = (d - d2)\/timedelta(days=1)\nprint('date_diff = {} days'.format(date_diff))\n# date_diff = 1420.5544836430902 days\n\ndate_diff = (d - d2)\/timedelta(weeks=1)\nprint('date_diff = {} weeks'.format(date_diff))\n# date_diff = 202.93635480615575 weeks\n\ndate_diff = (d - d2)\/timedelta(days=365)\nprint('date_diff = {} years'.format(date_diff))\n# date_diff = 3.8919300921728497 years\n<hr>\n<b>Datetime plus\/minus a certain period of time<\/b>\nprint(d + timedelta(seconds=1)) # today + one second\nprint(d + timedelta(minutes=1)) # today + one minute\nprint(d + timedelta(hours=1)) # today + one hour\nprint(d + timedelta(days=1)) # today + one day\nprint(d + timedelta(weeks=1)) # today + one week\nprint(d + timedelta(days=1)*365) # today + one year\n# 2019-12-22 13:18:28.386763\n# 2019-12-22 13:19:27.386763\n# 2019-12-22 14:18:27.386763\n# 2019-12-23 13:18:27.386763\n# 2019-12-29 13:18:27.386763\n# 2020-12-21 13:18:27.386763","16":"num1 = 100_000_000_000  # Visually chunk large numbers\nnum2 =   1_000_000_000  # without affecting the functionality\ntotal = num1 + num2\nprint(f'{total:,}')     # 101,000,000,000","17":"\/* Extra small devices (phones, 600px and down) *\/\n@media only screen and (max-width: 600px) {...}\n\n\/* Small devices (portrait tablets and large phones, 600px and up) *\/\n@media only screen and (min-width: 600px) {...}\n\n\/* Medium devices (landscape tablets, 768px and up) *\/\n@media only screen and (min-width: 768px) {...}\n\n\/* Large devices (laptops\/desktops, 992px and up) *\/\n@media only screen and (min-width: 992px) {...}\n\n\/* Extra large devices (large laptops and desktops, 1200px and up) *\/\n@media only screen and (min-width: 1200px) {...}","18":"from xml.etree import ElementTree\n\ndef convert_to_xml(tag, dct):\n    tree = ElementTree.ElementTree()\n    elem = ElementTree.Element(tag)\n    \n    for k, v in dct.items():\n        child = ElementTree.Element(k)\n        for subkey, subval in v.items():\n            grandchild = ElementTree.Element(subkey)\n            grandchild.text = str(subval)\n            child.append(grandchild)\n        elem.append(child)\n        tree._setroot(elem)\n    return tree\n    \n    \nconvert_to_xml('data', data_dct).write('data.xml')","19":"df['Change'] = df.col.diff()\ndf['Percent Change'] = df.col.pct_change()*100\ndf.style.format({'Percent Change':'{:.2f}%'})","20":"# Current working directory\nos.getcwd()\n\n# Change the CWD\nos.chdir(PATH)\n\n# Delete any directory\nos.rmdir(PATH)\n\n# Create a new directory\nos.mkdir(PATH)\n\n# Rename a directory\nos.rename(OLD, NEW)\n\n# Delete entire directory tree\nshutil.rmtree(PATH)\n\n# Copy entire directory tree\nshutil.copytree(SRC, DST)\n\n# Move file or directory\nshutil.move(SRC, DST)","21":"import os\n\nfor folderName, subfolders, filenames in os.walk('DIRECTORY'):\n    print('The current folder is ' + folderName)\n\n    for subfolder in subfolders:\n        print('SUBFOLDER OF ' + folderName + ': ' + subfolder)\n    for filename in filenames:\n        print('FILE INSIDE ' + folderName + ': '+ filename)\n\n    print('')","22":"def add(a, b):\n   \"\"\"this function takes 2 numbers and return their sum\"\"\"\n   return a+b\n\nprint(add.__doc__)\n\n# Output:\n# this function takes 2 numbers and return their sum\n\n\nclass Car():\n   \"\"\"this is a class\"\"\"\n   pass\n\nprint(Car.__doc__)\n\n# Output:\n# this is a class","23":"import requests\nres = requests.get('file\/url')\nres.raise_for_status()\nwith open('file.txt', 'wb') as f:\n    for chunk in res.iter_content(100000):\n        f.write(chunk)","24":"class Person():\n    pass\n\nperson = Person()\n\np_key = 'name'\np_value = 'Ritvik'\n\n\nsetattr(person, p_key, p_value)\nname = getattr(person, p_key)","25":"&lt;div contenteditable='true'&gt;This div is editable&lt;\/div&gt;","26":".col-container {\n    display: table; \/* Make the container element behave like a table *\/\n    width: 100%; \/* Set full-width to expand the whole page *\/\n}\n\n.col {\n    display: table-cell; \/* Make elements inside the container behave like table cells *\/\n}\n\n\n\/* If the browser window is smaller than 600px, make the columns stack on top of each other *\/\n@media only screen and (max-width: 600px) {\n  .col {\n    display: block;\n    width: 100%;\n  }\n}","27":"# it is a builtin function that allows us to\n# execute arbitrry strings in python\n\nadd = \"1+5+6\"\ndisplay = \"print('Hello')\"\n\nprint (eval(add))  # 12\neval(display)      # Hello","28":"&gt;&gt;&gt; df = pd.DataFrame({'sandwich':  ['PB&J', 'BLT', 'cheese'],\n      'ingredients':[['peanut butter', 'jelly'],\n                    ['bacon', 'lettuce', 'tomato'],\n                    ['swiss cheese']]})\n&gt;&gt;&gt; df\n    sandwich    ingredients\n0   PB&J        [peanut butter, jelly]\n1   BLT         [bacon, lettuce, tomato]\n2   cheese      [swiss cheese]\n&gt;&gt;&gt; df.explode('ingredients')\n    sandwich    ingredients\n0   PB&J        peanut butter\n0   PB&J        jelly\n1   BLT         bacon\n1   BLT         lettuce\n1   BLT         tomato\n2   cheese      swiss cheese","29":"&lt;link rel=\"icon\" href=\"icon.png\"&gt;","30":"&lt;h2&gt;PORTFOLIO&lt;\/h2&gt;\n&lt;div id=\"myBtnContainer\"&gt;\n  &lt;button class=\"btn active\" onclick=\"filterSelection('all')\"&gt; Show all&lt;\/button&gt;\n  &lt;button class=\"btn\" onclick=\"filterSelection('nature')\"&gt; Nature&lt;\/button&gt;\n  &lt;button class=\"btn\" onclick=\"filterSelection('cars')\"&gt; Cars&lt;\/button&gt;\n  &lt;button class=\"btn\" onclick=\"filterSelection('people')\"&gt; People&lt;\/button&gt;\n&lt;\/div&gt;\n\n&lt;!-- Portfolio Gallery Grid --&gt;\n&lt;div class=\"row\"&gt;\n  &lt;div class=\"column nature\"&gt;\n    &lt;div class=\"content\"&gt;\n      &lt;img src=\"\/w3images\/mountains.jpg\" alt=\"Mountains\" style=\"width:100%\"&gt;\n      &lt;h4&gt;Mountains&lt;\/h4&gt;\n      &lt;p&gt;Lorem ipsum dolor..&lt;\/p&gt;\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n  &lt;div class=\"column nature\"&gt;\n    &lt;div class=\"content\"&gt;\n      &lt;img src=\"\/w3images\/lights.jpg\" alt=\"Lights\" style=\"width:100%\"&gt;\n      &lt;h4&gt;Lights&lt;\/h4&gt;\n      &lt;p&gt;Lorem ipsum dolor..&lt;\/p&gt;\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n  &lt;div class=\"column nature\"&gt;\n    &lt;div class=\"content\"&gt;\n      &lt;img src=\"\/w3images\/nature.jpg\" alt=\"Nature\" style=\"width:100%\"&gt;\n      &lt;h4&gt;Forest&lt;\/h4&gt;\n      &lt;p&gt;Lorem ipsum dolor..&lt;\/p&gt;\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n\n  &lt;div class=\"column cars\"&gt;\n    &lt;div class=\"content\"&gt;\n      &lt;img src=\"\/w3images\/cars1.jpg\" alt=\"Car\" style=\"width:100%\"&gt;\n      &lt;h4&gt;Retro&lt;\/h4&gt;\n      &lt;p&gt;Lorem ipsum dolor..&lt;\/p&gt;\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n  &lt;div class=\"column cars\"&gt;\n    &lt;div class=\"content\"&gt;\n      &lt;img src=\"\/w3images\/cars2.jpg\" alt=\"Car\" style=\"width:100%\"&gt;\n      &lt;h4&gt;Fast&lt;\/h4&gt;\n      &lt;p&gt;Lorem ipsum dolor..&lt;\/p&gt;\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n  &lt;div class=\"column cars\"&gt;\n    &lt;div class=\"content\"&gt;\n      &lt;img src=\"\/w3images\/cars3.jpg\" alt=\"Car\" style=\"width:100%\"&gt;\n      &lt;h4&gt;Classic&lt;\/h4&gt;\n      &lt;p&gt;Lorem ipsum dolor..&lt;\/p&gt;\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n\n  &lt;div class=\"column people\"&gt;\n    &lt;div class=\"content\"&gt;\n      &lt;img src=\"\/w3images\/people1.jpg\" alt=\"People\" style=\"width:100%\"&gt;\n      &lt;h4&gt;Girl&lt;\/h4&gt;\n      &lt;p&gt;Lorem ipsum dolor..&lt;\/p&gt;\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n  &lt;div class=\"column people\"&gt;\n    &lt;div class=\"content\"&gt;\n      &lt;img src=\"\/w3images\/people2.jpg\" alt=\"People\" style=\"width:100%\"&gt;\n      &lt;h4&gt;Man&lt;\/h4&gt;\n      &lt;p&gt;Lorem ipsum dolor..&lt;\/p&gt;\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n  &lt;div class=\"column people\"&gt;\n    &lt;div class=\"content\"&gt;\n      &lt;img src=\"\/w3images\/people3.jpg\" alt=\"People\" style=\"width:100%\"&gt;\n      &lt;h4&gt;Woman&lt;\/h4&gt;\n      &lt;p&gt;Lorem ipsum dolor..&lt;\/p&gt;\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n&lt;!-- END GRID --&gt;\n&lt;\/div&gt;\n\n\/* Center website *\/\n.main {\n  max-width: 1000px;\n  margin: auto;\n}\n\nh1 {\n  font-size: 50px;\n  word-break: break-all;\n}\n\n.row {\n  margin: 8px -16px;\n}\n\n\/* Add padding BETWEEN each column (if you want) *\/\n.row,\n.row &gt; .column {\n  padding: 8px;\n}\n\n\/* Create three equal columns that floats next to each other *\/\n.column {\n  float: left;\n  width: 33.33%;\n  display: none; \/* Hide columns by default *\/\n}\n\n\/* Clear floats after rows *\/\n.row:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n\n\/* Content *\/\n.content {\n  background-color: white;\n  padding: 10px;\n}\n\n\/* The \"show\" class is added to the filtered elements *\/\n.show {\n  display: block;\n}\n\n\/* Style the buttons *\/\n.btn {\n  border: none;\n  outline: none;\n  padding: 12px 16px;\n  background-color: white;\n  cursor: pointer;\n}\n\n\/* Add a grey background color on mouse-over *\/\n.btn:hover {\n  background-color: #ddd;\n}\n\n\/* Add a dark background color to the active button *\/\n.btn.active {\n  background-color: #666;\n   color: white;\n}\n\nfilterSelection(\"all\") \/\/ Execute the function and show all columns\nfunction filterSelection(c) {\n  var x, i;\n  x = document.getElementsByClassName(\"column\");\n  if (c == \"all\") c = \"\";\n  \/\/ Add the \"show\" class (display:block) to the filtered elements, and remove the \"show\" class from the elements that are not selected\n  for (i = 0; i &lt; x.length; i++) {\n    w3RemoveClass(x[i], \"show\");\n    if (x[i].className.indexOf(c) &gt; -1) w3AddClass(x[i], \"show\");\n  }\n}\n\n\/\/ Show filtered elements\nfunction w3AddClass(element, name) {\n  var i, arr1, arr2;\n  arr1 = element.className.split(\" \");\n  arr2 = name.split(\" \");\n  for (i = 0; i &lt; arr2.length; i++) {\n    if (arr1.indexOf(arr2[i]) == -1) {\n      element.className += \" \" + arr2[i];\n    }\n  }\n}\n\n\/\/ Hide elements that are not selected\nfunction w3RemoveClass(element, name) {\n  var i, arr1, arr2;\n  arr1 = element.className.split(\" \");\n  arr2 = name.split(\" \");\n  for (i = 0; i &lt; arr2.length; i++) {\n    while (arr1.indexOf(arr2[i]) &gt; -1) {\n      arr1.splice(arr1.indexOf(arr2[i]), 1);\n    }\n  }\n  element.className = arr1.join(\" \");\n}\n\n\/\/ Add active class to the current button (highlight it)\nvar btnContainer = document.getElementById(\"myBtnContainer\");\nvar btns = btnContainer.getElementsByClassName(\"btn\");\nfor (var i = 0; i &lt; btns.length; i++) {\n  btns[i].addEventListener(\"click\", function(){\n    var current = document.getElementsByClassName(\"active\");\n    current[0].className = current[0].className.replace(\" active\", \"\");\n    this.className += \" active\";\n  });\n}","31":"from flask import Flask, render_template, request\nfrom flask_admin import Admin\nfrom flask_admin.contrib.sqla import ModelView\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:\/\/\/site.db'\napp.config['SECRET_KEY'] = 'secretkey'\ndb = SQLAlchemy(app)\nadmin = Admin(app)\n\nclass Post(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.Integer, nullable=False)\n\n    def __repr__(self):\n        return f\"Post('{self.id}', '{self.title}')\"\n\nadmin.add_view(ModelView(Post, db.session))\n\n@app.route('\/')\ndef home():\n    pnum = request.args.get('page', 1, int)\n    return render_template('index.html', posts = Post.query.paginate(pnum, 2))\n\n\nif __name__ == '__main__':\n    app.run(debug=True)","32":"from flask import Flask, render_template\n\napp = Flask(__name__)\n\n\n@app.route('\/')\ndef home():\n    return render_template('index.html', message=message)\n\n\nif __name__ == '__main__':\n    app.run(debug=True)","33":"layout.html\n.\n.\n{% block content %}\n\n{% endblock %}\n.\n.\n\n\nindex.html\n{% extends \"layout.html\" %}\n{% block content %}\n.\n.\n{% endblock %}","34":"flat_list = [item for sublist in l for item in sublist]","35":"def power(a: int, b:int) -&gt;int:\n    return a**b\n\nprint(power.__annotations__)\n\n# Output:\n# {'a': &lt;class 'int'&gt;, 'b': &lt;class 'int'&gt;, 'return': &lt;class 'int'&gt;}","36":"from flask import request\n\n@app.route('\/data')\ndef data():\n    # here we want to get the value of user (i.e. ?user=some-value)\n    user = request.args.get('user')","37":"&gt;&gt;&gt; import secrets\n&gt;&gt;&gt; secrets.token_hex(16)\n'79e9d3b5d183b6e620e3776f77d95f4b'","38":"import plotly.graph_objs as go \n\ndata = dict(type = 'choropleth',\n            locations = ['India', 'Russia', 'Australia'],\n            locationmode = 'country names',\n            colorscale= 'Portland',\n            z=[1.0,2.0,3.0],\n            colorbar = {'title':'Colorbar Title'})\n\nlayout = dict(geo = {'scope':'world'})\n\nfig = go.Figure(data = [data],layout = layout)\nfig.update_layout(\n    title= TITLE,\n    font=dict(\n        family='Courier New, monospace',\n        size=18,\n        color='#7f7f7f'\n    )\n)\n\nfig.show()\n\nhtml_content = fig.to_html()\nwith open('abc.html', 'w') as f:\n    f.write(html_content)","39":"<meta http-equiv = \"refresh\" content = \" time ; url = link\"\/>\n\nOR\n\n\/\/ Simulate a mouse click:\nwindow.location.href = \"link\";\n\nOR\n\n\/\/ Simulate an HTTP redirect:\nwindow.location.replace(\"link\");","40":"&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;&lt;\/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/materialize\/1.0.0\/css\/materialize.min.css\"&gt;\n    &lt;link href=\"https:\/\/fonts.googleapis.com\/icon?family=Material+Icons\" rel=\"stylesheet\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"https:\/\/www.w3schools.com\/w3css\/4\/w3.css\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"css\/master.css\"&gt;\n  &lt;\/head&gt;\n  &lt;body&gt;\n\n    &lt;script src=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/jquery\/3.4.1\/core.js\"&gt;&lt;\/script&gt;\n    &lt;script src=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/materialize\/1.0.0\/js\/materialize.min.js\"&gt;&lt;\/script&gt;\n    &lt;script src=\"js\/main.js\"&gt;&lt;\/script&gt;\n  &lt;\/body&gt;\n&lt;\/html&gt;","41":"&lt;div class=\"wrapper\"&gt;\n    &lt;div class=\"card\"&gt;&lt;\/div&gt;\n    &lt;div class=\"card\"&gt;&lt;\/div&gt;\n    &lt;div class=\"card\"&gt;&lt;\/div&gt;\n    &lt;div class=\"card\"&gt;&lt;\/div&gt;\n&lt;\/div&gt;\n\n\n.wrapper{\n    display: flex;\n    flex-wrap: nowrap;\n    overflow-x: auto;\n}\n.card{\n    flex: 0 0auto;\n}\n::-webkit-scrollbar {\n    display: none;\n}","42":"import warnings\r\nwarnings.filterwarnings(\"ignore\")","43":"filter: drop-shadow(0 15px 17px rgba(38,38,143,.37));","44":"&lt;h1 class=\"text\"&gt; Hello &lt;\/h1&gt;\n\n.text{\n    background-image: url('img.jpg');\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: 100%;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent\n    \n}","45":"import ipywidgets as widgets\nfrom ipywidgets import interact, interact_manual\n\n\n@interact\ndef func(params):\n    return result\n\n\nThe following table gives an overview of different widget abbreviations:\n<table>\n    <thead>\n        <td>Keyword argument<\/td>\n        <td>Widget<\/td>\n    <\/thead>\n    <tr>\n        <td>True or False<\/td>\n        <td>Checkbox<\/td>\n    <\/tr>\n    <tr>\n        <td>'Hi there'<\/td>\n        <td>Text<\/td>\n    <\/tr>\n    <tr>\n        <td>value or (min,max) or (min,max,step) if integers are passed<\/td>\n        <td>IntSlider<\/td>\n    <\/tr>\n    <tr>\n        <td>value or (min,max) or (min,max,step) if floats are passed<\/td>\n        <td>FloatSlider<\/td>\n    <\/tr>\n    <tr>\n        <td>['orange','apple'] or `[(\u2018one\u2019, 1), (\u2018two\u2019, 2)]<\/td>\n        <td>Dropdown<\/td>\n    <\/tr>\n<\/table>","46":"import json\n\nwith open('model.json', 'w') as f:\n    k = model.keys() \n    v = model.values() \n    k1 = [str(i) for i in k]\n    json.dump(json.dumps(dict(zip(*[k1,v]))),f)   \n    \n    \nwith open('model.json', 'r') as f:\n    data = json.load(f)\n    dic = json.loads(data)\n    k = dic.keys() \n    v = dic.values() \n    k1 = [eval(i) for i in k] \n    model =  dict(zip(*[k1,v]))","47":"1. some\nParameters\npredicate - Function that returns true or false.\narray - List of items to test.\nDescription\nIf predicate returns true for any item, some returns true. Otherwise it returns false.\n\nImplementation\nconst some = (predicate, array) =&gt;\n  array.reduce((acc, value) =&gt; acc || predicate(value), false);\nUsage\nconst equals3 = (x) =&gt; x === 3;\n\nsome(equals3, [3]); \/\/ true\nsome(equals3, [3, 3, 3]); \/\/ true\nsome(equals3, [1, 2, 3]); \/\/ true\nsome(equals3, [2]); \/\/ false\n\n2. all\nParameters\npredicate - Function that returns true or false.\narray - List of items to test.\nDescription\nIf predicate returns true for every item, all returns true. Otherwise it returns false.\n\nImplementation\nconst all = (predicate, array) =&gt;\n  array.reduce((acc, value) =&gt; acc && predicate(value), true);\nUsage\nconst equals3 = (x) =&gt; x === 3;\n\nall(equals3, [3]); \/\/ true\nall(equals3, [3, 3, 3]); \/\/ true\nall(equals3, [1, 2, 3]); \/\/ false\nall(equals3, [3, 2, 3]; \/\/ false\n\n3. none\nParameters\npredicate - Function that returns true or false.\narray - List of items to test.\nDescription\nIf predicate returns false for every item, none returns true. Otherwise it returns false.\n\nImplementation\nconst none = (predicate, array) =&gt;\n  array.reduce((acc, value) =&gt; !acc && !predicate(value), false);\nUsage\nconst isEven = (x) =&gt; x % 2 === 0;\n\nnone(isEven, [1, 3, 5]); \/\/ true\nnone(isEven, [1, 3, 4]); \/\/ false\nnone(equals3, [1, 2, 4]); \/\/ true\nnone(equals3, [1, 2, 3]); \/\/ false\n\n4. map\nParameters\ntransformFunction - Function to run on each element.\narray - List of items to transform.\nDescription\nReturns a new array of items, each one transformed according to the given transformFunction.\n\nImplementation\nconst map = (transformFunction, array) =&gt;\n  array.reduce((newArray, item) =&gt; {\n    newArray.push(transformFunction(item));\n\n    return newArray;\n  }, []);\nUsage\nconst double = (x) =&gt; x * 2;\nconst reverseString = (string) =&gt;\n  string\n    .split('')\n    .reverse()\n    .join('');\n\nmap(double, [100, 200, 300]);\n\/\/ [200, 400, 600]\n\nmap(reverseString, ['Hello World', 'I love map']);\n\/\/ ['dlroW olleH', 'pam evol I']\n\n5. filter\nParameters\npredicate - Function that returns true or false.\narray - List of items to filter.\nDescription\nReturns a new array. If predicate returns true, that item is added to the new array. Otherwise that item is excluded from the new array.\n\nImplementation\nconst filter = (predicate, array) =&gt;\n  array.reduce((newArray, item) =&gt; {\n    if (predicate(item) === true) {\n      newArray.push(item);\n    }\n\n    return newArray;\n  }, []);\nUsage\nconst isEven = (x) =&gt; x % 2 === 0;\n\nfilter(isEven, [1, 2, 3]);\n\/\/ [2]\n\nfilter(equals3, [1, 2, 3, 4, 3]);\n\/\/ [3, 3]\n\n6. reject\nParameters\npredicate - Function that returns true or false.\narray - List of items to filter.\nDescription\nJust like filter, but with the opposite behavior.\n\nIf predicate returns false, that item is added to the new array. Otherwise that item is excluded from the new array.\n\nImplementation\nconst reject = (predicate, array) =&gt;\n  array.reduce((newArray, item) =&gt; {\n    if (predicate(item) === false) {\n      newArray.push(item);\n    }\n\n    return newArray;\n  }, []);\nUsage\nconst isEven = (x) =&gt; x % 2 === 0;\n\nreject(isEven, [1, 2, 3]);\n\/\/ [1, 3]\n\nreject(equals3, [1, 2, 3, 4, 3]);\n\/\/ [1, 2, 4]\n\n7. find\nParameters\npredicate - Function that returns true or false.\narray - List of items to search.\nDescription\nReturns the first element that matches the given predicate. If no element matches then undefined is returned.\n\nImplementation\nconst find = (predicate, array) =&gt;\n  array.reduce((result, item) =&gt; {\n    if (result !== undefined) {\n      return result;\n    }\n\n    if (predicate(item) === true) {\n      return item;\n    }\n\n    return undefined;\n  }, undefined);\nUsage\nconst isEven = (x) =&gt; x % 2 === 0;\n\nfind(isEven, []); \/\/ undefined\nfind(isEven, [1, 2, 3]); \/\/ 2\nfind(isEven, [1, 3, 5]); \/\/ undefined\nfind(equals3, [1, 2, 3, 4, 3]); \/\/ 3\nfind(equals3, [1, 2, 4]); \/\/ undefined\n\n8. partition\nParameters\npredicate - Function that returns true or false.\narray - List of items.\nDescription\n\"Partitions\" or splits an array into two based on the predicate. If predicate returns true, the item goes into list 1. Otherwise the item goes into list 2.\n\nImplementation\nconst partition = (predicate, array) =&gt;\n  array.reduce(\n    (result, item) =&gt; {\n      const [list1, list2] = result;\n\n      if (predicate(item) === true) {\n        list1.push(item);\n      } else {\n        list2.push(item);\n      }\n\n      return result;\n    },\n    [[], []]\n  );\nUsage\nconst isEven = (x) =&gt; x % 2 === 0;\n\npartition(isEven, [1, 2, 3]);\n\/\/ [[2], [1, 3]]\n\npartition(isEven, [1, 3, 5]);\n\/\/ [[], [1, 3, 5]]\n\npartition(equals3, [1, 2, 3, 4, 3]);\n\/\/ [[3, 3], [1, 2, 4]]\n\npartition(equals3, [1, 2, 4]);\n\/\/ [[], [1, 2, 4]]\n\n9. pluck\nParameters\nkey - Key name to pluck from the object\narray - List of items.\nDescription\nPlucks the given key off of each item in the array. Returns a new array of these values.\n\nImplementation\nconst pluck = (key, array) =&gt;\n  array.reduce((values, current) =&gt; {\n    values.push(current[key]);\n\n    return values;\n  }, []);\nUsage\npluck('name', [{ name: 'Batman' }, { name: 'Robin' }, { name: 'Joker' }]);\n\/\/ ['Batman', 'Robin', 'Joker']\n\npluck(0, [[1, 2, 3], [4, 5, 6], [7, 8, 9]]);\n\/\/ [1, 4, 7]\n\n10. scan\nParameters\nreducer - Standard reducer function that receives two parameters - the accumulator and current element from the array.\ninitialValue - The initial value for the accumulator.\narray - List of items.\nDescription\nWorks just like reduce but instead just the single result, it returns a list of every reduced value on the way to the single result.\n\nImplementation\nconst scan = (reducer, initialValue, array) =&gt; {\n  const reducedValues = [];\n\n  array.reduce((acc, current) =&gt; {\n    const newAcc = reducer(acc, current);\n\n    reducedValues.push(newAcc);\n\n    return newAcc;\n  }, initialValue);\n\n  return reducedValues;\n};\nUsage\nconst add = (x, y) =&gt; x + y;\nconst multiply = (x, y) =&gt; x * y;\n\nscan(add, 0, [1, 2, 3, 4, 5, 6]);\n\/\/ [1, 3, 6, 10, 15, 21] - Every number added from 1-6\n\nscan(multiply, 1, [1, 2, 3, 4, 5, 6]);\n\/\/ [1, 2, 6, 24, 120, 720] - Every number multiplied from 1-6","48":"from keras import backend as K\n\ndef recall_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n        recall = true_positives \/ (possible_positives + K.epsilon())\n        return recall\n\ndef precision_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n        precision = true_positives \/ (predicted_positives + K.epsilon())\n        return precision\n\ndef f1_m(y_true, y_pred):\n    precision = precision_m(y_true, y_pred)\n    recall = recall_m(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))\n\n# compile the model\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc',f1_m,precision_m, recall_m])","49":"function go(e){\n    if(e.keyCode === 13){\n      e.preventDefault(); \/\/ Ensure it is only this code that rusn\n      alert(\"Enter was pressed\");\n    } \n}\n\n\/\/call: go(event)","50":"function LightenDarkenColor(col, amt) {\n  \n    var usePound = false;\n  \n    if (col[0] == \"#\") {\n        col = col.slice(1);\n        usePound = true;\n    }\n \n    var num = parseInt(col,16);\n \n    var r = (num &gt;&gt; 16) + amt;\n \n    if (r &gt; 255) r = 255;\n    else if  (r &lt; 0) r = 0;\n \n    var b = ((num &gt;&gt; 8) & 0x00FF) + amt;\n \n    if (b &gt; 255) b = 255;\n    else if  (b &lt; 0) b = 0;\n \n    var g = (num & 0x0000FF) + amt;\n \n    if (g &gt; 255) g = 255;\n    else if (g &lt; 0) g = 0;\n \n    return (usePound?\"#\":\"\") + (g | (b &lt;&lt; 8) | (r &lt;&lt; 16)).toString(16);\n  \n}\n\n\/\/ Lighten\nvar NewColor = LightenDarkenColor(\"#F06D06\", 20); \n\n\/\/ Darken\nvar NewColor = LightenDarkenColor(\"#F06D06\", -20);","51":"function listFilter(inputEl, listEl, element) {\n    var input, filter, ul, li, a, i, txtValue;\n    input = document.getElementById(inputEl);\n    filter = input.value.toUpperCase();\n    ul = document.getElementById(listEl);\n    li = ul.getElementsByTagName(\"li\");\n    for (i = 0; i &lt; li.length; i++) {\n        a = li[i].getElementsByTagName(element)[0];\n        txtValue = a.textContent || a.innerText;\n        if (txtValue.toUpperCase().indexOf(filter) &gt; -1) {\n            li[i].style.display = \"\";\n        } else {\n            li[i].style.display = \"none\";\n        }\n    }\n}","52":"import logging\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\nformatter = logging.Formatter('%(asctime)s : %(levelname)s : %(name)s : %(message)s')\n\nfile_handler = logging.FileHandler('sample.log')\nfile_handler.setFormatter(formatter)\n\nstream_handler = logging.StreamHandler()\nstream_handler.setFormatter(formatter)\n\nlogger.addHandler(file_handler)\nlogger.addHandler(stream_handler)\n\n\nlogger.debug('debug message')\nlogger.info('info message')\nlogger.warning('warning message')\nlogger.error('error message')\nlogger.exception('exception message')\nlogger.critical('critical message')","53":"from functools import wraps\n\ndef logger(orig_func):\n    import logging\n    logging.basicConfig(filename='{}.log'.format(orig_func.__name__), level=logging.INFO)\n\n    @wraps(orig_func)\n    def wrapper(*args, **kwargs):\n        logging.info(\n            'Ran with args: {}, and kwargs: {}'.format(args, kwargs))\n        return orig_func(*args, **kwargs)\n\n    return wrapper\n\n@logger\ndef display_info(name, age):\n    print('display_info ran with arguments ({}, {})'.format(name, age))\n\ndisplay_info('Tom', 22)","54":"def tag(name):\n    \n    def data(*content, **attrs):\n        attr_str = ''.join(f' {attr}=\"{value}\"' for attr, value in sorted(attrs.items())) if attrs else ''\n        if content:\n            return '\\n'.join(f'&lt;{name}{attr_str}&gt;{c}&lt;\/{name}&gt;' for c in content)\n        else:\n            return f'&lt;{name}{attr_str}\/&gt;'\n    \n    return data\n    \ntag('h1')('Hey')","55":"import sys, os\nsys.path.append(os.path.join(sys.path[0], 'modules'))\n\nimport module1","56":"pd.Series(' '.join(df['text']).split()).value_counts()[:n]","57":"with \\\n    open('a.txt') as a,\\\n    open('b.txt', 'w') as b:\n    for line in a:\n        b.write(line)","58":"fig, ax1 = plt.subplots()\n\nax1.set_xlabel('Team')\nax1.set_ylabel('count')\n# plot 1\n\nax2 = ax1.twinx()\n\ncolor = 'tab:blue'\nax2.set_ylabel('count', color=color)\n# plot 2\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()\nplt.show()","59":"fig, ax = plt.subplots(figsize=(30, 16), nrows=4, ncols=1, frameon=False)\nfig.subplots_adjust(hspace=0)\nax[0].spines['bottom'].set_visible(False)\nax[1].spines['top'].set_visible(False)\nax[1].spines['bottom'].set_visible(False)\nax[2].spines['top'].set_visible(False)\nax[2].spines['bottom'].set_visible(False)\nax[3].spines['top'].set_visible(False)\n\n#plot 1\n#plot 2\n#plot 3\n#plot 4\n\nfor i in range(4):\n    ax[i].legend(loc=1, prop={'size': 12})\n\nplt.xticks(rotation=0)","60":"<b>Single Leading Underscore: _var<\/b>\nThe underscore prefix is meant as a hint to another programmer that a variable \nor method starting with a single underscore is intended for internal use. \n\n<b>Double Leading Underscore: __var<\/b>\nThe use of double underscore (__) in front of a name (specifically a method name) \nis not a convention; it has a specific meaning to the interpreter.\nPython mangles these names and it is used to avoid name clashes with names defined \nby subclasses.\n\n<b>Single Trailing Underscore: var_<\/b>\nAs explained in PEP 8 docs:\nSingle trailing underscore naming convention is used to avoid conflicts with Python keywords.\n\n<b>Double Leading and Trailing Underscore: __var__<\/b>\nNames that have leading and trailing double underscores (\u201cdunders\u201d) are reserved \nfor special use like the__init__ method for object constructors, or __call__ method \nto make object callable. These methods are known as dunder methods.\n\n<b>Single Underscore: _<\/b>\nPer convention, a single standalone underscore is sometimes used as a name to \nindicate that a variable is temporary or insignificant.","61":"navigator.onLine          \/\/Determines whether the browser is online\nnavigator.cookieEnabled   \/\/Determines whether cookies are enabled\nnavigator.language        \/\/Returns the language of the browser\nnavigator.appVersion      \/\/Returns the version information of the browser\nnavigator.platform        \/\/Returns for which platform the platform is compiled\nnavigator.appName         \/\/Returns the name of the browser","62":"# df\n# A B C D E F\n# 1 2 3 4 5 6\n# 4 5 6 7 8 9\n\ndf.insert(3, 'C2', df['C']*2)\n\n# df\n# A B C C2 D E F\n# 1 2 3 6  4 5 6\n# 4 5 6 12 7 8 9","63":"var win = window.open(\"\", \"Title\", \"toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=780,height=200,top=\"+(screen.height-400)+\",left=\"+(screen.width-840));\nwin.document.body.innerHTML = \"HTML\";","64":"# pip install win10toast pypiwin32 setuptools\n\nfrom win10toast import ToastNotifier\n\ntoaster = ToastNotifier()\n\ndef notification(title, message, duration=5, icon=None):\n    if icon:\n        toaster.show_toast(title, message, duration=duration, threaded=True, icon_path=icon)\n    else:\n        toaster.show_toast(title, message, duration=duration, threaded=True)\n\nnotification('Hey', 'Model Trained')","65":"When defining a class or an object in Python, it is useful to provide an \u00c3\u0192\u00c6\u2019\u00c3\u2020\u00e2\u20ac\u2122\u00c3\u0192\u00e2\u20ac\u00a0\u00c3\u00a2\u00e2\u201a\u00ac\u00e2\u201e\u00a2\u00c3\u0192\u00c6\u2019\u00c3\u00a2\u00e2\u201a\u00ac\u00c5\u00a1\u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00a2\u00c3\u0192\u00c6\u2019\u00c3\u2020\u00e2\u20ac\u2122\u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00a2\u00c3\u0192\u00c6\u2019\u00c3\u201a\u00c2\u00a2\u00c3\u0192\u00c2\u00a2\u00c3\u00a2\u00e2\u201a\u00ac\u00c5\u00a1\u00c3\u201a\u00c2\u00ac\u00c3\u0192\u00e2\u20ac\u00a6\u00c3\u201a\u00c2\u00a1\u00c3\u0192\u00c6\u2019\u00c3\u00a2\u00e2\u201a\u00ac\u00c5\u00a1\u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00ac\u00c3\u0192\u00c6\u2019\u00c3\u2020\u00e2\u20ac\u2122\u00c3\u0192\u00c2\u00a2\u00c3\u00a2\u00e2\u20ac\u0161\u00c2\u00ac\u00c3\u201a\u00c2\u00b9\u00c3\u0192\u00c6\u2019\u00c3\u00a2\u00e2\u201a\u00ac\u00c2\u00a6\u00c3\u0192\u00c2\u00a2\u00c3\u00a2\u00e2\u20ac\u0161\u00c2\u00ac\u00c3\u2026\u00e2\u20ac\u0153official\u00c3\u0192\u00c6\u2019\u00c3\u2020\u00e2\u20ac\u2122\u00c3\u0192\u00e2\u20ac\u00a0\u00c3\u00a2\u00e2\u201a\u00ac\u00e2\u201e\u00a2\u00c3\u0192\u00c6\u2019\u00c3\u00a2\u00e2\u201a\u00ac\u00c5\u00a1\u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00a2\u00c3\u0192\u00c6\u2019\u00c3\u2020\u00e2\u20ac\u2122\u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00a2\u00c3\u0192\u00c6\u2019\u00c3\u201a\u00c2\u00a2\u00c3\u0192\u00c2\u00a2\u00c3\u00a2\u00e2\u201a\u00ac\u00c5\u00a1\u00c3\u201a\u00c2\u00ac\u00c3\u0192\u00e2\u20ac\u00a6\u00c3\u201a\u00c2\u00a1\u00c3\u0192\u00c6\u2019\u00c3\u00a2\u00e2\u201a\u00ac\u00c5\u00a1\u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00ac\u00c3\u0192\u00c6\u2019\u00c3\u2020\u00e2\u20ac\u2122\u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00a2\u00c3\u0192\u00c6\u2019\u00c3\u201a\u00c2\u00a2\u00c3\u0192\u00c2\u00a2\u00c3\u00a2\u00e2\u201a\u00ac\u00c5\u00a1\u00c3\u201a\u00c2\u00ac\u00c3\u0192\u00e2\u20ac\u00a6\u00c3\u201a\u00c2\u00be\u00c3\u0192\u00c6\u2019\u00c3\u00a2\u00e2\u201a\u00ac\u00c5\u00a1\u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00a2 way of representing that object as a string. For example:\n\n&gt;&gt;&gt; file = open('file.txt', 'r')\n&gt;&gt;&gt; print(file)\n&lt;open file 'file.txt', mode 'r' at 0x10d30aaf0&gt;\n\nThis makes debugging code a lot easier. Add it to your class definitions as below:\n\nclass someClass:\n    def __repr__(self):\n        return \"&lt;some description here&gt;\"\n        \nsomeInstance = someClass()\n\n# prints &lt;some description here&gt;\nprint(someInstance)","66":"window.open('url', '_blank');","67":"pd.options.display.max_columns = 10\npd.options.display.max_colwidth = -1","68":"&lt;style&gt;\n.parallax {\n  \/* The image used *\/\n  background-image: url(\"img_parallax.jpg\");\n\n  \/* Set a specific height *\/\n  height: 500px;\n\n  \/* Create the parallax scrolling effect *\/\n  background-attachment: fixed;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n}\n&lt;\/style&gt;\n\n&lt;!-- Container element --&gt;\n&lt;div class=\"parallax\"&gt;&lt;\/div&gt;\n\n\/* Turn off parallax scrolling for all tablets and phones. Increase\/decrease the pixels if needed *\/\n@media only screen and (max-device-width: 1366px) {\n  .parallax {\n    background-attachment: scroll;\n  }\n}","69":"# pip install flask-bcrypt\n\nfrom flask_bcrypt import Bcrypt\n\n\nbcrypt = Bcrypt()\nbcrypt.generate_password_hash('p@ssword').decode('utf-8')\n\n\nbcrypt.check_password_hash(hashed_password, 'p@ssword')","70":"from getpass import getpass\nusername = input('Enter Username...')   # User Input is displayed in the commandline\npassword = getpass('Enter Password...') # User Input is not displayed in the commandline","71":"pd.crosstab(df.A, df.B).apply(lambda r: r\/r.sum(), axis=1)","72":"Refresh the document every 30 seconds\n\n&lt;meta http-equiv=\"refresh\" content=\"30\"&gt;","73":"Using the .get() Method\nWhen you want to access a dictionary\u2019s value, the safest way to do so is by\nusing the .get() method. This method has two parameters:\nFirst (required): the name of the term to be retrieved. \n    This can be a String or a variable, allowing for dynamic term retrieval.\nSecond (optional): the value to be used as a default if the term doesn\u2019t exist.\n\nauthor = {\n   \"first_name\": \"Jonathan\",\n   \"last_name\": \"Hsu\",\n   \"username\": \"jhsu98\"\n}\n\nprint(author.get('username')) # jhsu98\nprint(author.get('middle_initial'), None) # None\n\n\nUsing the .setdefault() Method\nSometimes, not only do you want to protect from an undefined term in your \ndictionary, but you also want your code to self-correct its data structures.\nThe .setdefault() is structured identically to .get(). However, when the term\nis undefined, in addition to returning a default value, the dictionary\u2019s \nterm will be set to this value as well.\nauthor = {\n   \"first_name\": \"Jonathan\",\n   \"last_name\": \"Hsu\",\n   \"username\": \"jhsu98\"\n}\nprint(author.setdefault('username')) # jhsu98\nprint(author.setdefault('middle_initial', None)) # None\nprint(author)\n{\n  'first_name': 'Jonathan',\n  'last_name': 'Hsu',\n  'username': 'jhsu98',\n  'middle_initial': None\n}","74":"from keras.models import Sequential\nfrom keras.laeyrs import Dense, Dropout, LSTM, Embedding\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras import optimizers\n# optimizers.SGD()\n# optimizers.RMSProp()\n# optimizers.Adagrad()\n# optimizers.Adadelta()\n# optimizers.Adam()\n\nvocabulary_size = 7500\npad_length = 1000\ntokenizer = Tokenizer(num_words= vocabulary_size)\ntokenizer.fit_on_texts(X)\nsequences = tokenizer.texts_to_sequences(X)\npadded_sequences = pad_sequences(sequences, maxlen=pad_length)\n\nes = EarlyStopping(monitor='loss', mode='min', verbose=1)\nfilepath = \"model.h5\"\nckpt = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')\n\ndef build_network():\n    model = Sequential()\n    model.add(Embedding(vocabulary_size, 1024, input_length=pad_length))\n    model.add(LSTM(1024, dropout=0.2, recurrent_dropout=0.2))\n    model.add(Dense(160,input_dim=40, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(320, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(365, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(125, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(25, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer=, metrics=['accuracy'])\n    model.summary()\n    return model\n\nmodel = build_network()\n\nmodel.fit(scaled_data, train_label[0], validation_split=0.3, epochs=25, callbacks=[es, ckpt])\n\n\nfrom keras.models import load_model\nnew_model = load_model(\"model.h5\")","75":"\/\/ www.example.com?q=something\n\nvar params = new URLSearchParams(location.search);\nvar q = params.get('q')\nif (q == null){\n\n}else if (q == 'something'){\n\n}else{\n\n}","76":"Disable Auto Escaping: \n\n{{ content|safe }}","77":"np.savetxt('arr.txt', arr, fmt = '%.6f')\narr = np.loadtxt('arr.txt', dtype=np.float64)","78":"from apscheduler.schedulers.background import BackgroundScheduler\nfrom flask import Flask\n\ndef sensor():\n    print(\"Scheduler is alive!\")\n\nsched = BackgroundScheduler(daemon=True)\nsched.add_job(sensor,'interval',minutes=60)\nsched.start()\n\napp = Flask(__name__)\n\n@app.route(\"\/home\")\ndef home():\n    return \"Welcome Home :) !\"\n\nif __name__ == \"__main__\":\n    app.run(debug=True)","79":"import fire\n\nclass Calculator:\n    def add(self, a, b):\n        return a + b\n    def subtract(self, a, b):\n        return a - b\n    def multiply(self, a, b):\n        return a * b\n    def divide(self, a, b):\n        return a \/ b\n        \nif __name__ == \"__main__\":\n    fire.Fire(Calculator)\n    \npython clac.py add 5 4\n9","80":"import smtplib, ssl\n\nsmtp_server = \"smtp.gmail.com\"\nport = 587  # For starttls\nsender_email = \"@gmail.com\"\npassword = \"\"\n\n# Create a secure SSL context\ncontext = ssl.create_default_context()\n\n# Try to log in to server and send email\ntry:\n    server = smtplib.SMTP(smtp_server,port)\n    server.ehlo() # Can be omitted\n    server.starttls(context=context) # Secure the connection\n    server.ehlo() # Can be omitted\n    server.login(sender_email, password)\n    # TODO: Send email here\n    server.sendmail(sender_email, receiver_email, message)\nexcept Exception as e:\n    # Print any error messages to stdout\n    print(e)\nfinally:\n    server.quit()","81":"# instead of \ndf[df['gender'] == 'F']['gender'] = 'Female'\n# do\ndf.loc[df['gender'] == 'F', 'gender'] = 'Female'","82":"#!D:\\Users\\Ritvik\\Anaconda3\\envs\\datascience\\python.exe","83":"$.fn.shuffleChildren = function() {\n    $.each(this.get(), function(index, el) {\n        var $el = $(el);\n        var $find = $el.children();\n\n        $find.sort(function() {\n            return 0.5 - Math.random();\n        });\n\n        $el.empty();\n        $find.appendTo($el);\n    });\n};\n\n$(\".parent-element\").shuffleChildren();","84":"import itertools\n\ns = itertools.islice(range(50), 10, 20)\nfor val in s:\n    pass","85":"html {\n  scroll-behavior: smooth;\n}\n\n\/\/For browsers that do not support the scroll-behavior property\n\n$(document).ready(function(){\n  $(\"a\").on('click', function(event) {\n    if (this.hash !== \"\") {\n      event.preventDefault();\n      var hash = this.hash;\n      $('html, body').animate({\n        scrollTop: $(hash).offset().top\n      }, 800, function(){\n        window.location.hash = hash;\n      });\n    }\n  });\n});","86":"\/\/ Reddit\nhttp:\/\/www.reddit.com\/submit?url=URL\n\n\/\/ LinkedIn\nhttp:\/\/www.linkedin.com\/shareArticle?mini=true&url=URL\n\n\/\/ Twitter\nhttps:\/\/twitter.com\/share?url=URL\n\n\/\/ Facebook\nhttps:\/\/www.facebook.com\/sharer\/sharer.php?u=URL\n\n\/\/ WhatsApp\n &lt;a target=\"_blank\" data-action=\"share\/whatsapp\/share\" href=\"whatsapp:\/\/send?text=TEXT\"&gt;SHARE&lt;\/a&gt;","87":"df[['fisrt', 'middle', 'last']] = df.name.str.split(' ', expand=True)","88":"{{ \" url_for('static', filename=\"filename\")\"}}","89":"a\nabout\nabove\nacross\nafter\nafterwards\nagain\nagainst\nall\nalmost\nalone\nalong\nalready\nalso\nalthough\nalways\nam\namong\namongst\namoungst\namount\nan\nand\nanother\nany\nanyhow\nanyone\nanything\nanyway\nanywhere\nare\naround\nas\nat\nback\nbe\nbecame\nbecause\nbecome\nbecomes\nbecoming\nbeen\nbefore\nbeforehand\nbehind\nbeing\nbelow\nbeside\nbesides\nbetween\nbeyond\nbill\nboth\nbottom\nbut\nby\ncall\ncan\ncannot\ncant\nco\ncomputer\ncon\ncould\ncouldnt\ncry\nde\ndescribe\ndetail\ndo\ndone\ndown\ndue\nduring\neach\neg\neight\neither\neleven\nelse\nelsewhere\nempty\nenough\netc\neven\never\nevery\neveryone\neverything\neverywhere\nexcept\nfew\nfifteen\nfify\nfill\nfind\nfire\nfirst\nfive\nfor\nformer\nformerly\nforty\nfound\nfour\nfrom\nfront\nfull\nfurther\nget\ngive\ngo\nhad\nhas\nhasnt\nhave\nhe\nhence\nher\nhere\nhereafter\nhereby\nherein\nhereupon\nhers\nherse\"\nhim\nhimse\"\nhis\nhow\nhowever\nhundred\ni\nie\nif\nin\ninc\nindeed\ninterest\ninto\nis\nit\nits\nitse\"\nkeep\nlast\nlatter\nlatterly\nleast\nless\nltd\nmade\nmany\nmay\nme\nmeanwhile\nmight\nmill\nmine\nmore\nmoreover\nmost\nmostly\nmove\nmuch\nmust\nmy\nmyse\"\nname\nnamely\nneither\nnever\nnevertheless\nnext\nnine\nno\nnobody\nnone\nnoone\nnor\nnot\nnothing\nnow\nnowhere\nof\noff\noften\non\nonce\none\nonly\nonto\nor\nother\nothers\notherwise\nour\nours\nourselves\nout\nover\nown\npart\nper\nperhaps\nplease\nput\nrather\nre\nsame\nsee\nseem\nseemed\nseeming\nseems\nserious\nseveral\nshe\nshould\nshow\nside\nsince\nsincere\nsix\nsixty\nso\nsome\nsomehow\nsomeone\nsomething\nsometime\nsometimes\nsomewhere\nstill\nsuch\nsystem\ntake\nten\nthan\nthat\nthe\ntheir\nthem\nthemselves\nthen\nthence\nthere\nthereafter\nthereby\ntherefore\ntherein\nthereupon\nthese\nthey\nthick\nthin\nthird\nthis\nthose\nthough\nthree\nthrough\nthroughout\nthru\nthus\nto\ntogether\ntoo\ntop\ntoward\ntowards\ntwelve\ntwenty\ntwo\nun\nunder\nuntil\nup\nupon\nus\nvery\nvia\nwas\nwe\nwell\nwere\nwhat\nwhatever\nwhen\nwhence\nwhenever\nwhere\nwhereafter\nwhereas\nwhereby\nwherein\nwhereupon\nwherever\nwhether\nwhich\nwhile\nwhither\nwho\nwhoever\nwhole\nwhom\nwhose\nwhy\nwill\nwith\nwithin\nwithout\nwould\nyet\nyou\nyour\nyours\nyourself\nyourselves\nwhom\nm\ncouldn't\nuntil\nduring\nunder\nwasn\nboth\nout\ndidn\nbefore\naren't\nweren\nwhy\neach\nmightn\ndoesn\nbelow\nshould\nhers\nherself\nwho\ntoo\nmost\nand\nso\nabout\nshould've\nme\nyou'll\nno\nup\nshouldn\ncan\noff\nthan\njust\nonce\nain\nisn\nwon't\nthat'll\nthose\ndon\nhadn't\nisn't\nwhich\nshouldn't\nto\nthemselves\nyourself\nwas\non\nother\no\nhad\nher\nourselves\nmightn't\nhe\ndoes\nany\nyour\nthese\ndoing\nan\nby\nthrough\nwe\nfrom\nmy\nits\nit\nhaven\nma\nhasn't\nbeing\nve\nsome\nshan't\nover\nmustn't\nhimself\ntheirs\nwhere\nif\nmyself\ndo\ndon't\nwouldn't\nthe\nof\nneedn\nwere\naren\nin\nwasn't\nfew\nnow\nmustn\ns\ny\nyou're\ntheir\nbeen\nour\ni\nbecause\nnot\nbe\nthen\nagainst\nd\nhaven't\nhis\nagain\nhow\nall\nas\nweren't\nmore\nwouldn\nwill\ninto\nthis\nyou\nshe's\nare\nyourselves\ndidn't\nabove\nown\nneedn't\nwith\nyou'd\nhave\nam\nfurther\nthere\nvery\nnor\ndoesn't\nwhat\ndid\nthat\nwhile\nthem\nsuch\nhadn\nshe\nbetween\nhaving\ncouldn\nhas\na\nwon\nhim\nhere\nit's\nyou've\nat\nshan\nis\nonly\nthey\nll\nours\nbut\nafter\nhasn\nfor\nwhen\ndown\nsame\nor\nyours\nt\nre\nitself","90":"class Connection:\n    def __init__(self):\n        ...\n\n    def __enter__(self):\n        # Initialize connection...\n\n    def __exit__(self, type, value, traceback):\n        # Close connection...\n\nwith Connection() as c:\n    # __enter__() executes\n    ...\n    # conn.__exit__() executes\n    \n##################################################\nfrom contextlib import contextmanager\n\n@contextmanager\ndef tag(name):\n    print(f\"&lt;{name}&gt;\")\n    yield\n    print(f\"&lt;\/{name}&gt;\")\n\nwith tag(\"h1\"):\n    print(\"This is Title.\")","91":"import nltk, re\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.stem import WordNetLemmatizer\n\ndef expand_contractions(text):\n    text = re.sub(r\"can't\", \"can not\", text)\n    text = re.sub(r\"what's\", \"what is \", text)\n    text = re.sub(r\"'s\", \" \", text)\n    text = re.sub(r\"'ve\", \" have \", text)\n    text = re.sub(r\"n't\", \" not \", text)\n    text = re.sub(r\"i'm\", \"i am \", text)\n    text = re.sub(r\"'re\", \" are \", text)\n    text = re.sub(r\"'d\", \" would \", text)\n    text = re.sub(r\"'ll\", \" will \", text)\n    return text\n\ndef remove_url(text):\n    URL_REGEX = re.compile(r'''((http[s]?:\/\/)[^ &lt;&gt;'\"{}|\\^`[\\]]*)''')\n    return URL_REGEX.sub(r' ', text)\n\ndef remove_handles(text):\n    HANDLES_REGEX = re.compile(r'@\\S+')\n    return HANDLES_REGEX.sub(r' ', text)\n\ndef remove_incomplete_last_word(text):\n    INCOMPLETE_LAST_WORD_REGEX = re.compile(r'\\S+\u00c3\u0192\u00c6\u2019\u00c3\u2020\u00e2\u20ac\u2122\u00c3\u0192\u00e2\u20ac\u00a0\u00c3\u00a2\u00e2\u201a\u00ac\u00e2\u201e\u00a2\u00c3\u0192\u00c6\u2019\u00c3\u00a2\u00e2\u201a\u00ac\u00c5\u00a1\u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00a2\u00c3\u0192\u00c6\u2019\u00c3\u2020\u00e2\u20ac\u2122\u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00a2\u00c3\u0192\u00c6\u2019\u00c3\u201a\u00c2\u00a2\u00c3\u0192\u00c2\u00a2\u00c3\u00a2\u00e2\u201a\u00ac\u00c5\u00a1\u00c3\u201a\u00c2\u00ac\u00c3\u0192\u00e2\u20ac\u00a6\u00c3\u201a\u00c2\u00a1\u00c3\u0192\u00c6\u2019\u00c3\u00a2\u00e2\u201a\u00ac\u00c5\u00a1\u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00ac\u00c3\u0192\u00c6\u2019\u00c3\u2020\u00e2\u20ac\u2122\u00c3\u0192\u00c2\u00a2\u00c3\u00a2\u00e2\u20ac\u0161\u00c2\u00ac\u00c3\u2026\u00c2\u00a1\u00c3\u0192\u00c6\u2019\u00c3\u00a2\u00e2\u201a\u00ac\u00c5\u00a1\u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00a6')\n    return INCOMPLETE_LAST_WORD_REGEX.sub(r' ', text )\n\nremove_punc = lambda x : re.sub(r\"\\W\", ' ', x)\n\nremove_num = lambda x : re.sub(r\"\\d\", ' ', x)\n\nremove_extra_spaces = lambda x : re.sub(r\"\\s+\", ' ', x)\n\nremove_shortwords = lambda x: ' '.join(word for word in x.split() if len(word) &gt; 2)\n\nlower_case = lambda x : x.lower()\n\nwith open('stopwords.txt') as f:\n    sw = map(lambda x : x.strip(), f.readlines())\nstop_words = set(nltk.corpus.stopwords.words('english'))|set(sw)\nremove_stopwords = lambda x: ' '.join(word for word in x.split() if word not in stop_words)\n\nps = PorterStemmer()\nps_stem = lambda x: ' '.join(ps.stem(word) for word in x.split())\n\nwnl = WordNetLemmatizer()\nwnl_lemmatize = lambda x: ' '.join(wnl.lemmatize(word) for word in x.split())\n\ndef tag_pos(x):\n    tag_list =  nltk.pos_tag(nltk.word_tokenize(x))\n    pos = \"\"\n    for t in tag_list:\n        pos += t[0] +'(' + t[1] +')' + ' '\n    return pos\n\ndef cleanText(x, rsw, stm, lem, tgps):\n    x = str(x)\n    x = remove_url(x)\n    x = lower_case(x)\n    x = expand_contractions(x)\n    x = remove_punc(x)\n    x = remove_num(x)\n    x = remove_extra_spaces(x)\n    x = remove_shortwords(x)\n    \n    if rsw:\n        x = remove_stopwords(x)\n    if stm:\n        x = ps_stem(x)\n    if lem:\n        x = wnl_lemmatize(x)\n    if tgps:\n        x = tag_pos(x)\n    return x","92":"::selection {\n  background-color: #FFA;\n  color: #000;\n}","93":"You can obtain the result of the last expression with the underscore operator, \ne.g. in IPython this looks like:\n\nIn [1]: 3 * 3\nOut[1]: 9\n\nIn [2]: _ + 3\nOut[2]: 12\n\nThis works in the Python shell too. In addition, the IPython shell allows you \nto use Out[n] to get the value of the expression In[n]. E.g., Out[1] would \ngive us the number 9 in the example above.","94":"import time, datetime\r\n\r\ndef timestamp():\r\n    ts = time.time()\r\n    st = datetime.datetime.fromtimestamp(ts).strftime('%Y%m%d%H%M%S')\r\n    return st","95":"from functools import wraps\n\ndef timer(orig_func):\n    import time\n\n    @wraps(orig_func)\n    def wrapper(*args, **kwargs):\n        t1 = time.time()\n        result = orig_func(*args, **kwargs)\n        t2 = time.time() - t1\n        print('{} ran in: {} sec'.format(orig_func.__name__, t2))\n        return result\n\n    return wrapper\n\n@timer\ndef display_info(name, age):\n    print('display_info ran with arguments ({}, {})'.format(name, age))\n\ndisplay_info('Tom', 22)","96":"from IPython.display import clear_output\nfor i in range(n):\n    clear_output(wait=True)\n\n    print('Current Progress', i, '\/', n)","97":".truncate {\n  width: 250px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}","98":"try:\n    2*3\nexcept TypeError:\n    print(\"An exception was raised\")\nelse:\n    print(\"Thank God, no exceptions were raised.\")","99":"a, b, *c, d = (1,2,3,4,5)\n\nprint(a) # 1\nprint(b) # 2\nprint(c) # [3,4]\nprint(d) # 5","100":"from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer \n\ndef sentiment_scores(sentence): \n    sia_obj = SentimentIntensityAnalyzer() \n    sentiment_dict = sia_obj.polarity_scores(sentence) \n    if sentiment_dict['compound'] &gt;= 0.05 : \n        return 1\n    elif sentiment_dict['compound'] &lt;= - 0.05 : \n        return -1\n    else : \n        return 0","101":"headers = {\n    'User-Agent': 'Mozilla\/5.0 (Windows NT 6.1)'\n}\n\nres = requests.get(url, headers=headers)\nif res.status_code == requests.codes.ok:\n    ressoup = bs4.BeautifulSoup(res.text, 'lxml')\n    elems = ressoup.select('.link')\n    elems[i].getText()\n    elems[i].get('attr')\nelse:\n    print('Something went wrong')","102":"import numpy as np\nimport pandas as pd\n\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\ndef buildWordCloud(text):\n    wordcloud = WordCloud(width = W, height = H,\n                background_color =BGC,\n                min_font_size = 10,\n                max_words = mw).generate(text)\n    plt.figure(figsize = (W\/\/100, H\/\/100), facecolor = None)\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")\n    plt.tight_layout(pad = 0)\n    plt.show()","103":"word-wrap: break-word;\nwhite-space: pre-wrap;","104":"import xml.etree.ElementTree as etree\ntree = etree.ElementTree(etree.fromstring(xml_string))\nroot = tree.getroot()\nroot.getchildren()\nnode.attrib","105":"app = Flask(__name__)\n...\napp.jinja_env.filters['zip'] = zip\n\n\n{% for value1, value2 in iterable1|zip(iterable2) %}\n    {{ value1 }} is paired with {{ value2 }}\n{% endfor %}","106":"# any()\n# This expression returns True if any element of the iterable is true.\n# If the iterable is empty, it will return False.\n\n&gt;&gt;&gt; any([1&gt;0,1==0,1&lt;0])\nTrue\n&gt;&gt;&gt; any([1&lt;0,2&lt;1,3&lt;2])\nFalse\n\n# all()\n# This expression returns True if all of the elements of the iterable are true. \n# If the iterable is empty, it will return True.\n\n&gt;&gt;&gt; all(['a'&lt;'b','b'&lt;'c'])\nTrue\n&gt;&gt;&gt; all(['a'&lt;'b','c'&lt;'b'])\nFalse","107":"<p style=\"word-wrap: break-word;white-space: pre-wrap;\">\nIf you are a web developer, you must have seen the \u2018CORS\u2019 error appearing often on your screen when you try to call an API. But, Why does it happen?\nWell, For security reasons, browsers restrict cross-origin HTTP requests initiated from scripts. For example, if you want to access your API hosted at https:\/\/api.github.com from your client-side frontend application which is hosted at https:\/\/example.com. The browser will not allow this request to complete.\nYou only need to think about CORS when :\n    API accessed by the browser\n    API is hosted on a separate domain\n    \n<b>So, why does it happens?<\/b>\nThe browsers enforce a security feature called Same Origin Policy. According to Same Origin Policy, the Same Origin calls are allowed and Different Origin calls are not allowed.\n\n<b>What is this Same Origin, Different Origin?<\/b>\nBrowsers define the Origin as a combination of Scheme, Host, and Port.\n    Scheme name \u2014 It is the protocol to be used to access the resource on the Internet. The scheme names followed by the three characters :\/\/ .The most commonly used protocols are http:\/\/, https:\/\/, ftp:\/\/, and mailto:\/\/.\n    Hostname \u2014 It is the address of the host where the resource is located. A hostname is a domain name assigned to a host computer. This is usually a combination of the host\u2019s local name with its parent domain\u2019s name. For example, www.dev.to consists of the host's machine name www and the domain name dev.to\n    Port Number \u2014 Port is a communication endpoint where your application run. \nIf these three combinations of Scheme, Hostname, and Port are same then the browser identifies it as the Same Origin. And, the request gets complete.\n\nSo, Does it means that it is impossible to make Cross-Origin HTTP request ??\nThe answer is NO.\nThat\u2019s where the CORS comes into picture, Cross-Origin Resource Sharing mechanism.\n\n<b>How CORS Works<\/b>\nCORS allows the server to explicitly whitelist certain origin and help to bypass the same-origin policy.\nIf your server is configured for CORS, it will return an extra header with \u201cAccess-Control-Allow-Origin\u201d on each response.\nFor example, if my API server hosted at https:\/\/api.dipakkr.com\/users is CORS configured and I am making a request from my client application https:\/\/github.com to fetch some data. The response will have this header.\n\n    Access-Control-Allow-Origin: https:\/\/github.com\n<\/p>\nSource: <a href=\"https:\/\/medium.com\/swlh\/how-cors-cross-origin-resource-sharing-works-79f959a84f0e\" target=\"_blank\" style=\"text-decoration:underline;\">medium<\/a>","108":"<p class=\"blog\">\nEver used one of those fancy color palette generators? You know, the ones where you pick a starting color, tweak some options that probably include some musical jargon like \"triad\" or \"major fourth\", and are then bestowed the five perfect color swatches you should use to build your website?\n\n<img src=\"data\/imgs\/whats-in-a-color-palette-01.png\">\n\nThis calculated and scientific approach to picking the perfect color scheme is extremely seductive, but not very useful.\nWell, unless you want your site to look like this:\n\n<img src=\"data\/imgs\/whats-in-a-color-palette-02.png\">\n\n<b>What you actually need<\/b>\nYou can't build anything with five hex codes. To build something real, you need a much more comprehensive set of colors to choose from.\n\n<img src=\"data\/imgs\/whats-in-a-color-palette-03.png\">\n\nYou can break a good color palette down into three categories.\n\n<b>Greys<\/b>\nText, backgrounds, panels, form controls \u2014 almost everything in an interface is grey.\n\n<img src=\"data\/imgs\/whats-in-a-color-palette-04.png\">\n\nYou'll need more greys than you think, too \u2014 three or four shades might sound like plenty but it won't be long before you wish you had something a little darker than shade #2 but a little lighter than shade #3.\n\nIn practice, you want 8-10 shades to choose from (more on this later). Not so many that you waste time deciding between shade #77 and shade #78, but enough to make sure you don't have to compromise too much .\n\n<img src=\"data\/imgs\/whats-in-a-color-palette-05.png\">\n\nTrue black tends to look pretty unnatural, so start with a really dark grey and work your way up to white in steady increments.\n\n<b>Primary color(s)<\/b>\nMost sites need one, maybe two colors that are used for primary actions, emphasizing navigation elements, etc. These are the colors that determine the overall look of a site \u2014 the ones that make you think of Facebook as \"blue\", even though it's really mostly grey.\n\nJust like with greys, you need a variety (5-10) of lighter and darker shades to choose from.\n\n<img src=\"data\/imgs\/whats-in-a-color-palette-06.png\">\n\nUltra-light shades can be useful as a tinted background for things like alerts, while darker shades work great for text.\n\n<b>Accent colors<\/b>\nOn top of primary colors, every site needs a few accent colors for communicating different things to the user.\n\nFor example, you might want to use an eye-grabbing color like yellow, pink, or teal to highlight a new feature:\n\n<img src=\"data\/imgs\/whats-in-a-color-palette-07.png\">\n\nYou might also need colors to emphasize different semantic states, like red for confirming a destructive action:\n\n<img src=\"data\/imgs\/whats-in-a-color-palette-08.png\">\n\n...yellow for a warning message:\n\n<img src=\"data\/imgs\/whats-in-a-color-palette-09.png\">\n\n...or green to highlight a positive trend:\n\n<img src=\"data\/imgs\/whats-in-a-color-palette-10.png\">\n\nYou'll want multiple shades for these colors too, even though they should be used pretty sparingly throughout the UI.\n\nIf you're building something where you need to use color to distinguish or categorize similar elements (like lines on graphs, events in a calendar, or tags on a project), you might need even more accent colors.\n\nAll in, it's not uncommon to need as many as ten different colors with 5-10 shades each for a complex UI.\n\n<b>Define your shades up front<\/b>\nWhen you need to create a lighter or darker variation of a color in your palette, don't get clever using CSS preprocessor functions like \"lighten\" or \"darken\" to create shades on the fly. That's how you end up with 35 slightly different blues that all look the same.\n\nInstead, define a fixed set of shades up front that you can choose from as you work.\n\n<img src=\"data\/imgs\/define-your-shades-up-front-01.png\">\n\nSo how do you put together a palette like this anyways?\n\n<b>Choose the base color first<\/b>\nStart by picking a base color for the scale you want to create \u2014 the color in the middle that your lighter and darker shades are based on.\n\nThere's no real scientific way to do this, but for primary and accent colors, a good rule of thumb is to pick a shade that would work well as a button background.\n\n<img src=\"data\/imgs\/define-your-shades-up-front-02.png\">\n\nIt's important to note that there are no real rules here like \"start at 50% lightness\" or anything \u2014 every color behaves a bit differently, so you'll have to rely on your eyes for this one.\n\n<b>Finding the edges<\/b>\nNext, pick your darkest shade and your lightest shade. There's no real science to this either, but it helps to think about where they will be used and choose them using that context.\n\nThe darkest shade of a color is usually reserved for text, while the lightest shade might be used to tint the background of an element.\n\nA simple alert component is a good example that combines both of these use cases, so it can be a great place to pick these colors.\n\n<img src=\"data\/imgs\/define-your-shades-up-front-03.png\">\n\nStart with a color that matches the hue of your base color, and adjust the saturation and lightness until you're satisfied.\n\n<b>Filling in the gaps<\/b>\nOnce you've got your base, darkest, and lightest shades, you just need to fill in the gaps in between them.\n\nFor most projects, you'll need at least 5 shades per color, and probably closer to 10 if you don't want to feel too constrained.\n\nNine is a great number because it's easy to divide and makes filling in the gaps a little more straightforward. Let's call our darkest shade 900, our base shade 500, and our lightest shade 100.\n\nStart by picking shades 700 and 300, the ones right in the middle of the gaps. You want these shades to feel like the perfect compromise between the shades on either side.\n\n<img src=\"data\/imgs\/define-your-shades-up-front-04.png\">\n\nThis creates four more holes in the scale (800, 600, 400, and 200), which you can fill using the same approach.\n\n<img src=\"data\/imgs\/define-your-shades-up-front-05.png\">\n\nYou should end up with a pretty balanced set of colors that provide just enough options to accommodate your design ideas without feeling limiting.\n\n<b>What about greys?<\/b>\nWith greys the base color isn't as important, but otherwise the process is the same. Start at the edges and fill in the gaps until you have what you need.\n\n<img src=\"data\/imgs\/define-your-shades-up-front-06.png\">\n\nPick your darkest grey by choosing a color for the darkest text in your project, and your lightest grey by choosing something that works well for a subtle off-white background.\n\n<b>It's not a science<\/b>\nAs tempting as it is, you can't rely purely on math to craft the perfect color palette.\n\nA systematic approach like the one described above is great to get you started, but don't be afraid to make little tweaks if you need to.\n\nOnce you actually start using your colors in your designs, it's almost inevitable that you'll want to tweak the saturation on a shade, or make a couple of shades lighter or darker. Trust your eyes, not the numbers.\n\nJust try to avoid adding new shades too often if you can avoid it. If you're not dilligent about limiting your palette, you might as well have no color system at all.\n<\/p>\nSource: <a href=\"https:\/\/refactoringui.com\/previews\/building-your-color-palette\/\" target=\"_blank\" class=\"blog\">RefactoringUI<\/a>","109":"<img src=\"data\/imgs\/mlchecklist.png\">\nSource: <a href=\"https:\/\/towardsdatascience.com\/the-essential-machine-learning-project-checklist-3ad6a7a49c37\" target=\"_blank\" class=\"blog\">Medium<\/a>\n<a href=\"https:\/\/github.com\/pdeguzman96\/data_cleaning_workshop\/raw\/master\/Machine%20Learning%20Project%20Checklist.pdf\" target=\"_blank\" class=\"blog\">Download pdf<\/a>","110":"&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; \n&gt;&gt;&gt; myList = [1,1,2,3,4,5,3,2,3,4,2,1,2,3]\n&gt;&gt;&gt; print Counter(myList)\nCounter({2: 4, 3: 4, 1: 3, 4: 2, 5: 1})\n&gt;&gt;&gt;\n&gt;&gt;&gt; print Counter(myList).items()\n[(1, 3), (2, 4), (3, 4), (4, 2), (5, 1)]\n&gt;&gt;&gt; \n&gt;&gt;&gt; print Counter(myList).keys()\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; \n&gt;&gt;&gt; print Counter(myList).values()\n[3, 4, 4, 2, 1]","111":"&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; \n&gt;&gt;&gt; ordinary_dictionary = {}\n&gt;&gt;&gt; ordinary_dictionary['a'] = 1\n&gt;&gt;&gt; ordinary_dictionary['b'] = 2\n&gt;&gt;&gt; ordinary_dictionary['c'] = 3\n&gt;&gt;&gt; ordinary_dictionary['d'] = 4\n&gt;&gt;&gt; ordinary_dictionary['e'] = 5\n&gt;&gt;&gt; \n&gt;&gt;&gt; print ordinary_dictionary\n{'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4}\n&gt;&gt;&gt; \n&gt;&gt;&gt; ordered_dictionary = OrderedDict()\n&gt;&gt;&gt; ordered_dictionary['a'] = 1\n&gt;&gt;&gt; ordered_dictionary['b'] = 2\n&gt;&gt;&gt; ordered_dictionary['c'] = 3\n&gt;&gt;&gt; ordered_dictionary['d'] = 4\n&gt;&gt;&gt; ordered_dictionary['e'] = 5\n&gt;&gt;&gt; \n&gt;&gt;&gt; print ordered_dictionary\nOrderedDict([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)])","112":"# The defaultdict tool is a container in the collections class of Python. \n# It's similar to the usual dictionary (dict) container, \n# but the only difference is that a defaultdict will have a default value if that key has not been set yet. \n# If you didn't use a defaultdict you'd have to check to see if that key exists, \n# and if it doesn't, set it to what you want.\n&gt;&gt;&gt; from collections import defaultdict\n&gt;&gt;&gt; d = defaultdict(list)\n&gt;&gt;&gt; d['python'].append(\"awesome\")\n&gt;&gt;&gt; d['something-else'].append(\"not relevant\")\n&gt;&gt;&gt; d['python'].append(\"language\")\n&gt;&gt;&gt; for i in d.items():\n...     print(i)\n...\n('python', ['awesome', 'language'])\n('something-else', ['not relevant'])","113":"&gt;&gt;&gt; from collections import deque\n&gt;&gt;&gt; d = deque()\n&gt;&gt;&gt; d.append(1)\n&gt;&gt;&gt; print d\ndeque([1])\n&gt;&gt;&gt; d.appendleft(2)\n&gt;&gt;&gt; print d\ndeque([2, 1])\n&gt;&gt;&gt; d.clear()\n&gt;&gt;&gt; print d\ndeque([])\n&gt;&gt;&gt; d.extend('1')\n&gt;&gt;&gt; print d\ndeque(['1'])\n&gt;&gt;&gt; d.extendleft('234')\n&gt;&gt;&gt; print d\ndeque(['4', '3', '2', '1'])\n&gt;&gt;&gt; d.count('1')\n1\n&gt;&gt;&gt; d.pop()\n'1'\n&gt;&gt;&gt; print d\ndeque(['4', '3', '2'])\n&gt;&gt;&gt; d.popleft()\n'4'\n&gt;&gt;&gt; print d\ndeque(['3', '2'])\n&gt;&gt;&gt; d.extend('7896')\n&gt;&gt;&gt; print d\ndeque(['3', '2', '7', '8', '9', '6'])\n&gt;&gt;&gt; d.remove('2')\n&gt;&gt;&gt; print d\ndeque(['3', '7', '8', '9', '6'])\n&gt;&gt;&gt; d.reverse()\n&gt;&gt;&gt; print d\ndeque(['6', '9', '8', '7', '3'])\n&gt;&gt;&gt; d.rotate(3)\n&gt;&gt;&gt; print d\ndeque(['8', '7', '3', '6', '9'])","114":"&gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; Point = namedtuple('Point','x,y')\n&gt;&gt;&gt; pt1 = Point(1,2)\n&gt;&gt;&gt; pt2 = Point(3,4)\n&gt;&gt;&gt; dot_product = ( pt1.x * pt2.x ) +( pt1.y * pt2.y )\n&gt;&gt;&gt; print dot_product\n11\n\n&gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; Car = namedtuple('Car','Price Mileage Colour Class')\n&gt;&gt;&gt; xyz = Car(Price = 100000, Mileage = 30, Colour = 'Cyan', Class = 'Y')\n&gt;&gt;&gt; print xyz\nCar(Price=100000, Mileage=30, Colour='Cyan', Class='Y')\n&gt;&gt;&gt; print xyz.Class\nY","115":"look inside a Python object and see what attributes it has\n\n&gt;&gt;&gt; dir()\n&gt;&gt;&gt; dir(\"Hello World\")\n&gt;&gt;&gt; dir(dir)\n\nThis can be a really useful feature when running Python interactively, and for dynamically exploring objects and modules you are working with.","116":"def check_nulls():\n    fig, ax = plt.subplots(figsize=(20,8))\n    sns.heatmap(data.isnull(), cmap='viridis', yticklabels=False, cbar=None, ax=ax)","117":"def heatmap_numeric_w_dependent_variable(df, dependent_variable):\n    plt.figure(figsize=(8, 10))\n    sns.heatmap(df.corr()[[dependent_variable]].sort_values(by=dependent_variable), \n                    annot=True, \n                    cmap='coolwarm', \n                    vmin=-1,\n                    vmax=1)","118":"def distribution_by_class(target_col, feature_col):\n    sns.FacetGrid(data, hue=target_col, size=5).map(sns.distplot, feature_col).add_legend()","119":"def histograms_numeric_columns(df, numerical_columns):\n    f = pd.melt(df, value_vars=numerical_columns) \n    sns.FacetGrid(f, col='variable',  col_wrap=4, sharex=False, sharey=False).map(sns.distplot, 'value')","120":"# == tests equality\n# is test identity\n\nl1 = [1,2,3,4]\nl2 = [1,2,3,4]\n\nprint(l1 == l2) # True\nprint(l1 is l2) # False\n\nl3 = l1\nl1[0] = 5\n\nprint(l1 == l3) # True\nprint(l1 is l3) # True\nprint(l1, id(l1))       # [5, 2, 3, 4] 2391232377608\nprint(l3, id(l3))       # [5, 2, 3, 4] 2391232377608","121":"&gt;&gt;&gt; from itertools import combinations\n&gt;&gt;&gt; \n&gt;&gt;&gt; print list(combinations('12345',2))\n[('1', '2'), ('1', '3'), ('1', '4'), ('1', '5'), ('2', '3'), ('2', '4'), ('2', '5'), ('3', '4'), ('3', '5'), ('4', '5')]\n&gt;&gt;&gt; \n&gt;&gt;&gt; A = [1,1,3,3,3]\n&gt;&gt;&gt; print list(combinations(A,4))\n[(1, 1, 3, 3), (1, 1, 3, 3), (1, 1, 3, 3), (1, 3, 3, 3), (1, 3, 3, 3)]\n&gt;&gt;&gt; from itertools import combinations_with_replacement\n&gt;&gt;&gt; \n&gt;&gt;&gt; print list(combinations_with_replacement('12345',2))\n[('1', '1'), ('1', '2'), ('1', '3'), ('1', '4'), ('1', '5'), ('2', '2'), ('2', '3'), ('2', '4'), ('2', '5'), ('3', '3'), ('3', '4'), ('3', '5'), ('4', '4'), ('4', '5'), ('5', '5')]\n&gt;&gt;&gt; \n&gt;&gt;&gt; A = [1,1,3,3,3]\n&gt;&gt;&gt; print list(combinations(A,2))\n[(1, 1), (1, 3), (1, 3), (1, 3), (1, 3), (1, 3), (1, 3), (3, 3), (3, 3), (3, 3)]","122":"&gt;&gt;&gt; from itertools import permutations\n&gt;&gt;&gt; print permutations(['1','2','3'])\n&lt;itertools.permutations object at 0x02A45210&gt;\n&gt;&gt;&gt; \n&gt;&gt;&gt; print list(permutations(['1','2','3']))\n[('1', '2', '3'), ('1', '3', '2'), ('2', '1', '3'), ('2', '3', '1'), ('3', '1', '2'), ('3', '2', '1')]\n&gt;&gt;&gt; \n&gt;&gt;&gt; print list(permutations(['1','2','3'],2))\n[('1', '2'), ('1', '3'), ('2', '1'), ('2', '3'), ('3', '1'), ('3', '2')]\n&gt;&gt;&gt;\n&gt;&gt;&gt; print list(permutations('abc',3))\n[('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]","123":"&gt;&gt;&gt; from itertools import product\n&gt;&gt;&gt;\n&gt;&gt;&gt; print list(product([1,2,3],repeat = 2))\n[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]\n&gt;&gt;&gt;\n&gt;&gt;&gt; print list(product([1,2,3],[3,4]))\n[(1, 3), (1, 4), (2, 3), (2, 4), (3, 3), (3, 4)]\n&gt;&gt;&gt;\n&gt;&gt;&gt; A = [[1,2,3],[3,4,5]]\n&gt;&gt;&gt; print list(product(*A))\n[(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 3), (3, 4), (3, 5)]\n&gt;&gt;&gt;\n&gt;&gt;&gt; B = [[1,2,3],[3,4,5],[7,8]]\n&gt;&gt;&gt; print list(product(*B))\n[(1, 3, 7), (1, 3, 8), (1, 4, 7), (1, 4, 8), (1, 5, 7), (1, 5, 8), (2, 3, 7), (2, 3, 8), (2, 4, 7), (2, 4, 8), (2, 5, 7), (2, 5, 8), (3, 3, 7), (3, 3, 8), (3, 4, 7), (3, 4, 8), (3, 5, 7), (3, 5, 8)]","124":"const func = () => { return 'something'; }\nfunc();\n\/\/ OR\nconst func = () => 'something';\n\/\/ OR WITH PARAM (SINGLE)\nfunc();\nconst func = arg => {\n   console.log(arg);\n}\nfunc('hello');\n\/\/ OR WITH MULTI PARAMS\nconst func = (arg, arg1) => {\n    console.log('arg: ', arg);\n    console.log('arg1: ', arg1);\n};\n\nfunc('hello', 'there');","125":"Sometimes, we need to check if a variable exists or if it has a valid value, \nto consider them as a true value. For this kind of validation, \nyou can use the !! (double-negation operator).\nA simple !!variable, which will automatically convert any kind of data to a\nboolean and this variable will return false only if it has some of these \nvalues: 0, null, \"\", undefined, or NaN, otherwise, it will return true.\n\nfunction Account(cash) {\n    this.cash = cash;\n    this.hasMoney = !!cash;\n}\n\nvar account = new Account(100.50);\nconsole.log(account.cash); \/\/ 100.50\nconsole.log(account.hasMoney); \/\/ true\n\nvar emptyAccount = new Account(0);\nconsole.log(emptyAccount.cash); \/\/ 0\nconsole.log(emptyAccount.hasMoney); \/\/ false","126":"A simple +variable, but it only works with string numbers, otherwise, it will return NaN (Not a Number).\n\nfunction toNumber(strNumber) {\n    return +strNumber;\n}\nconsole.log(toNumber(\"1234\")); \/\/ 1234\nconsole.log(toNumber(\"ACB\")); \/\/ NaN\nThis magic will work with Date too and, in this case, it will return the timestamp number:\nconsole.log(+new Date()) \/\/ 1461288164385","127":"Today, in ES6, there is the default argument feature. To simulate \nthis feature in old browsers, you can use the || (OR operator) by\nincluding the default value as a second parameter to be used.\nIf the first parameter returns false, the second one will be used as a default value. \n\nfunction User(name, age) {\n    this.name = name || \"Oliver Queen\";\n    this.age = age || 27;\n}\nvar user1 = new User();\nconsole.log(user1.name); \/\/ Oliver Queen\nconsole.log(user1.age); \/\/ 27\nvar user2 = new User(\"Barry Allen\", 25);\nconsole.log(user2.name); \/\/ Barry Allen\nconsole.log(user2.age); \/\/ 25","128":"const array = ['1', '2', '3'];\narray.forEach(val => {\n    \/\/ do something\n})","129":"The rest operator allows an indefinite number of arguments, represented as an array.\n\n\nfunction add(...nums) {\n  return sum(...nums);\n}\n\nadd(1, 2, 3, 4, 5);\nadd(1, 3);\nadd(4, 5, 3, 4);","130":"\/\/ There is a special syntax called the rest parameter syntax to create\n\/\/ a function that accepts any number of arguments\n\nfunction sum(...values) {\n    let sum = 0;\n    for (let i = 0; i < values.length; i++) {\n        sum += values[i];\n    }\n  \n    return sum;\n}\nconsole.log(sum(1));\nconsole.log(sum(1, 2));\nconsole.log(sum(1, 2, 3));\nconsole.log(sum(1, 2, 3, 4));","131":"Longhand:\nconst welcome = 'You have logged in as ' + first + ' ' + last + '.'\nconst db = 'http:\/\/' + host + ':' + port + '\/' + database;\n\nShorthand:\nconst welcome = `You have logged in as ${first} ${last}`;\nconst db = `http:\/\/${host}:${port}\/${database}`;","132":"\/\/ This snippet returns true if the predicate function returns true for all \n\/\/ elements in a collection and false otherwise. You can omit the second argument\n\/\/ fn if you want to use Boolean as a default value.\n\nconst all = (arr, fn = Boolean) =&gt; arr.every(fn);\n\nall([4, 2, 3], x =&gt; x &gt; 1); \/\/ true\nall([1, 2, 3]); \/\/ true","133":"\/\/ This snippet checks whether all elements of the array are equal.\n\nconst allEqual = arr =&gt; arr.every(val =&gt; val === arr[0]);\n\nallEqual([1, 2, 3, 4, 5, 6]); \/\/ false\nallEqual([1, 1, 1, 1]); \/\/ true","134":"\/\/ This snippet checks whether two numbers are approximately equal \n\/\/ to each other, with a small difference.\n\nconst approximatelyEqual = (v1, v2, epsilon = 0.001) =&gt; Math.abs(v1 - v2) &lt; epsilon;\n\napproximatelyEqual(Math.PI \/ 2.0, 1.5708); \/\/ true","135":"\/\/ This snippet converts the elements that don\u00c3\u0192\u00c2\u00a2\u00c3\u00a2\u00e2\u20ac\u0161\u00c2\u00ac\u00c3\u00a2\u00e2\u20ac\u017e\u00c2\u00a2t have commas or double\n\/\/ quotes to strings with comma-separated values..\n\nconst arrayToCSV = (arr, delimiter = ',') =&gt;\n  arr.map(v =&gt; v.map(x =&gt; `\"${x}\"`).join(delimiter)).join('\n');\n  \narrayToCSV([['a', 'b'], ['c', 'd']]); \/\/ '\"a\",\"b\"\n\"c\",\"d\"'\narrayToCSV([['a', 'b'], ['c', 'd']], ';'); \/\/ '\"a\";\"b\"\n\"c\";\"d\"'","136":"\/\/ This snippet converts the elements of an array into &lt;li&gt; tags and appends \n\/\/ them to the list of the given ID\n\nconst arrayToHtmlList = (arr, listID) =&gt;\n  (el =&gt; (\n    (el = document.querySelector('#' + listID)),\n    (el.innerHTML += arr.map(item =&gt; `&lt;li&gt;${item}&lt;\/li&gt;`).join(''))\n  ))();\n  \narrayToHtmlList(['item 1', 'item 2'], 'myListID');","137":"\/\/ This snippet executes a function, returning either the result or the caught error object.\n\nconst attempt = (fn, ...args) =&gt; {\n  try {\n    return fn(...args);\n  } catch (e) {\n    return e instanceof Error ? e : new Error(e);\n  }\n};\nvar elements = attempt(function(selector) {\n  return document.querySelectorAll(selector);\n}, '&gt;_&gt;');\nif (elements instanceof Error) elements = []; \/\/ elements = []","138":"\/\/ This snippet splits values into two groups and then puts a truthy\n\/\/ element of filter in the first group, and in the second group otherwise.\n\nconst bifurcate = (arr, filter) =&gt;\n  arr.reduce((acc, val, i) =&gt; (acc[filter[i] ? 0 : 1].push(val), acc), [[], []]);\nbifurcate(['beep', 'boop', 'foo', 'bar'], [true, true, false, true]); \n\/\/ [ ['beep', 'boop', 'bar'], ['foo'] ]","139":"\/\/ This snippet splits values into two groups, based on a predicate function.\n\/\/ If the predicate function returns a truthy value, the element will be placed \n\/\/ in the first group. Otherwise, it will be placed in the second group.\n\nconst bifurcateBy = (arr, fn) =&gt;\n  arr.reduce((acc, val, i) =&gt; (acc[fn(val, i) ? 0 : 1].push(val), acc), [[], []]);\n  \nbifurcateBy(['beep', 'boop', 'foo', 'bar'], x =&gt; x[0] === 'b'); \n\/\/ [ ['beep', 'boop', 'bar'], ['foo'] ]","140":"\/\/ This snippet checks whether the bottom of a page is visible.\n\nconst bottomVisible = () =&gt;\n  document.documentElement.clientHeight + window.scrollY &gt;=\n  (document.documentElement.scrollHeight || document.documentElement.clientHeight);\n\nbottomVisible(); \/\/ true","141":"\/\/ This snippet returns the length of a string in bytes.\n\nconst byteSize = str =&gt; new Blob([str]).size;\n\nbyteSize('\u00c3\u0192\u00c2\u00b0\u00c3\u2026\u00c2\u00b8\u00c3\u2039\u00c5\u201c\u00c3\u00a2\u00e2\u20ac\u0161\u00c2\u00ac'); \/\/ 4\nbyteSize('Hello World'); \/\/ 11","142":"\/\/ This snippet capitalizes the first letter of a string.\n\nconst capitalize = ([first, ...rest]) =&gt;\n  first.toUpperCase() + rest.join('');\n  \ncapitalize('fooBar'); \/\/ 'FooBar'\ncapitalize('fooBar', true); \/\/ 'FooBar'","143":"\/\/ This snippet capitalizes the first letter of every word in a given string.\n\n\nconst capitalizeEveryWord = str =&gt; str.replace(\/\b[a-z]\/g, char =&gt; char.toUpperCase());\n\ncapitalizeEveryWord('hello world!'); \/\/ 'Hello World!'","144":"\/\/ This snippet converts a non-array value into array.\n\nconst castArray = val =&gt; (Array.isArray(val) ? val : [val]);\n\ncastArray('foo'); \/\/ ['foo']\ncastArray([1]); \/\/ [1]","145":"\/\/ This snippet removes false values from an array.\n\nconst compact = arr =&gt; arr.filter(Boolean);\n\ncompact([0, 1, false, 2, '', 3, 'a', 'e' * 23, NaN, 's', 34]); \n\/\/ [ 1, 2, 3, 'a', 's', 34 ]","146":"function copyStringToClipboard(str) {\n    var el = document.createElement('textarea');\n    el.value = str;\n    el.setAttribute('readonly', '');\n    el.style = { position: 'absolute', left: '-9999px' };\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n}","147":"function copyToClipboard(containerid) {\n    var el = document.getElementById(containerid);\n    var range = document.createRange();\n    range.selectNodeContents(el);\n    var sel = window.getSelection();\n    sel.removeAllRanges();\n    sel.addRange(range);\n    document.execCommand('copy');\n    return false;\n}","148":"\/\/ This snippet counts the occurrences of a value in an array.\n\nconst countOccurrences = (arr, val) =&gt; arr.reduce((a, v) =&gt; (v === val ? a + 1 : a), 0);\ncountOccurrences([1, 1, 2, 1, 2, 3], 1); \/\/ 3","149":"\/\/ This snippet returns the current URL.\n\nconst currentURL = () =&gt; window.location.href;\n\ncurrentURL(); \/\/ https:\/\/snippy19.surge.sh","150":"\/\/ This snippet flattens an array recursively.\n\nconst deepFlatten = arr =&gt; [].concat(...arr.map(v =&gt; (Array.isArray(v) ? deepFlatten(v) : v)));\n\ndeepFlatten([1, [2], [[3], 4], 5]); \/\/ [1,2,3,4,5]","151":"\/\/ This snippet assigns default values for all properties in an object that are undefined.\n\nconst defaults = (obj, ...defs) =&gt; Object.assign({}, obj, ...defs.reverse(), obj);\n\ndefaults({ a: 1 }, { b: 2 }, { b: 6 }, { a: 3 }); \/\/ { a: 1, b: 2 }","152":"\/\/ This snippet gets a number as input and returns an array of its digits.\n\nconst digitize = n =&gt; [...`${n}`].map(i =&gt; parseInt(i));\n\ndigitize(431); \/\/ [4, 3, 1]","153":"\/\/ This snippet checks whether the parent element contains the child.\n\nconst elementContains = (parent, child) =&gt; parent !== child && parent.contains(child);\n\nelementContains(document.querySelector('head'), document.querySelector('title')); \/\/ true\nelementContains(document.querySelector('body'), document.querySelector('body')); \/\/ false","154":"\/\/ This snippet removes duplicate values in an array.\n\nconst filterNonUnique = arr =&gt; [ \u00c3\u0192\u00c2\u00a2\u00c3\u00a2\u00e2\u20ac\u0161\u00c2\u00ac\u00c3\u201a\u00c2\u00a6new Set(arr)];\nfilterNonUnique([1, 2, 2, 3, 4, 4, 5]); \/\/ [1, 2, 3, 4, 5]","155":"\/\/ This snippet returns the first key that satisfies a given function.\n\nconst findKey = (obj, fn) =&gt; Object.keys(obj).find(key =&gt; fn(obj[key], key, obj));\n\nfindKey(\n  {\n    barney: { age: 36, active: true },\n    fred: { age: 40, active: false },\n    pebbles: { age: 1, active: true }\n  },\n  o =&gt; o['active']\n); \/\/ 'barney'","156":"Longhand:\nconst fruits = ['mango', 'peach', 'banana'];\nfor (let i = 0; i < fruits.length; i++)\n\nShorthand:\nfor (let fruit of fruits)\n\nIf you just wanted to access the index, do:\nfor (let index in fruits)\n\nThis also works if you want to access keys in a literal object:\nconst obj = {continent: 'Africa', country: 'Kenya', city: 'Nairobi'}\nfor (let key in obj)\n  console.log(key) \/\/ output: continent, country, city","157":"\/\/ This snippet can be used to find the difference in days between two dates.\n\nconst getDaysDiffBetweenDates = (dateInitial, dateFinal) =&gt;\n  (dateFinal - dateInitial) \/ (1000 * 3600 * 24);\n  \ngetDaysDiffBetweenDates(new Date('2019-01-13'), new Date('2019-01-15')); \/\/ 2","158":"\/\/ This snippet can be used to get the type of a value.\n\nconst getType = v =&gt;\n  v === undefined ? 'undefined' : v === null ? 'null' : v.constructor.name.toLowerCase();\n  \ngetType(new Set([1, 2, 3])); \/\/ 'set'","159":"\/\/ This snippet can be used to hide all elements specified.\n\nconst hide = (...el) =&gt; [...el].forEach(e =&gt; (e.style.display = 'none'));\n\nhide(document.querySelectorAll('img')); \/\/ Hides all &lt;img&gt; elements on the page","160":"\/\/ This snippet can be used to redirect from HTTP to HTTPS in a particular domain.\n\nconst httpsRedirect = () =&gt; {\n  if (location.protocol !== 'https:') location.replace('https:\/\/' + location.href.split('\/\/')[1]);\n};\n\nhttpsRedirect(); \/\/ If you are on http:\/\/mydomain.com, you are redirected to https:\/\/mydomain.com","161":"\/\/ This snippet can be used to insert an HTML string after the end of a particular element.\n\nconst insertAfter = (el, htmlString) =&gt; el.insertAdjacentHTML('afterend', htmlString);\n\ninsertAfter(document.getElementById('myId'), '&lt;p&gt;after&lt;\/p&gt;'); \/\/ &lt;div id=\"myId\"&gt;...&lt;\/div&gt; &lt;p&gt;after&lt;\/p&gt;","162":"\/\/ This snippet can be used to insert an HTML string before a particular element\n\nconst insertBefore = (el, htmlString) =&gt; el.insertAdjacentHTML('beforebegin', htmlString);\n\ninsertBefore(document.getElementById('myId'), '&lt;p&gt;before&lt;\/p&gt;'); \/\/ &lt;p&gt;before&lt;\/p&gt; &lt;div id=\"myId\"&gt;...&lt;\/div&gt;","163":"\/\/ This snippet can be used to check if a value is of a particular type.\n\nconst is = (type, val) =&gt; ![, null].includes(val) && val.constructor === type;\n\nis(Array, [1]); \/\/ true\nis(ArrayBuffer, new ArrayBuffer()); \/\/ true\nis(Map, new Map()); \/\/ true\nis(RegExp, \/.\/g); \/\/ true\nis(Set, new Set()); \/\/ true\nis(WeakMap, new WeakMap()); \/\/ true\nis(WeakSet, new WeakSet()); \/\/ true\nis(String, ''); \/\/ true\nis(String, new String('')); \/\/ true\nis(Number, 1); \/\/ true\nis(Number, new Number(1)); \/\/ true\nis(Boolean, true); \/\/ true\nis(Boolean, new Boolean(true)); \/\/ true","164":"\/\/ This snippet can be used to check whether a particular string is an anagram with another string.\n\nconst isAnagram = (str1, str2) =&gt; {\n  const normalize = str =&gt;\n    str\n      .toLowerCase()\n      .replace(\/[^a-z0-9]\/gi, '')\n      .split('')\n      .sort()\n      .join('');\n  return normalize(str1) === normalize(str2);\n};\n\nisAnagram('iceman', 'cinema'); \/\/ true","165":"\/\/ This snippet can be used to check if a provided argument is iterable like an array.\n\nconst isArrayLike = obj =&gt; obj != null && typeof obj[Symbol.iterator] === 'function';\n\nisArrayLike(document.querySelectorAll('.className')); \/\/ true\nisArrayLike('abc'); \/\/ true\nisArrayLike(null); \/\/ false","166":"\/\/ This snippet can be used to determine whether the current runtime \n\/\/ environment is a browser. This is helpful for avoiding errors \n\/\/ when running front-end modules on the server (Node).\n\nconst isBrowser = () =&gt; ![typeof window, typeof document].includes('undefined');\n\nisBrowser(); \/\/ true (browser)\nisBrowser(); \/\/ false (Node)","167":"\/\/ This snippet can be used to determine whether the browser tab is focused.\n\nconst isBrowserTabFocused = () =&gt; !document.hidden;\n\nisBrowserTabFocused(); \/\/ true","168":"\/\/ This snippet can be used to check whether a value is null or undefined.\n\nconst isNil = val =&gt; val === undefined || val === null;\n\nisNil(null); \/\/ true\nisNil(undefined); \/\/ true","169":"\/\/ This snippet can be used to check whether a string is a valid JSON.\n\nconst isValidJSON = str =&gt; {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nisValidJSON('{\"name\":\"Adam\",\"age\":20}'); \/\/ true\nisValidJSON('{\"name\":\"Adam\",age:\"20\"}'); \/\/ false\nisValidJSON(null); \/\/ true","170":"\/\/ This snippet compares two objects to determine if the first \n\/\/ one contains the same property values as the second one.\n\nconst matches = (obj, source) =&gt;\n  Object.keys(source).every(key =&gt; obj.hasOwnProperty(key) && obj[key] === source[key]);\n  \nmatches({ age: 25, hair: 'long', beard: true }, { hair: 'long', beard: true }); \/\/ true\nmatches({ hair: 'long', beard: true }, { age: 25, hair: 'long', beard: true }); \/\/ false","171":"\/\/ This snippet can be used to convert a nodeList to an array.\n\nconst nodeListToArray = nodeList =&gt; [...nodeList];\n\nnodeListToArray(document.childNodes); \/\/ [ &lt;!DOCTYPE html&gt;, html ]","172":"\/\/ This snippet can be used to pad a string on both sides with a \n\/\/ specified character if it is shorter than the specified length.\n\nconst pad = (str, length, char = ' ') =&gt;\n  str.padStart((str.length + length) \/ 2, char).padEnd(length, char);\n  \npad('cat', 8); \/\/ '  cat   '\npad(String(42), 6, '0'); \/\/ '004200'\npad('foobar', 3); \/\/ 'foobar'","173":"\/\/ This snippet can be used to do a redirect to a specified URL.\n\nconst redirect = (url, asLink = true) =&gt;\n  asLink ? (window.location.href = url) : window.location.replace(url);\n  \nredirect('https:\/\/google.com');","174":"\/\/ This snippet can be used to round a number to a specified number of digits.\n\nconst round = (n, decimals = 0) =&gt; Number(`${Math.round(`${n}e${decimals}`)}e-${decimals}`);\n\nround(1.005, 2); \/\/ 1.01","175":"\/\/ This snippet can be used to get a random number from an array.\n\nconst sample = arr =&gt; arr[Math.floor(Math.random() * arr.length)];\n\nsample([3, 7, 9, 11]); \/\/ 9","176":"\/\/ This snippet can be used to get n random elements from unique\n\/\/ positions from an array up to the size of the array. Elements \n\/\/ in the array are shuffled using the Fisher-Yates algorithm.\n\nconst sampleSize = ([...arr], n = 1) =&gt; {\n  let m = arr.length;\n  while (m) {\n    const i = Math.floor(Math.random() * m--);\n    [arr[m], arr[i]] = [arr[i], arr[m]];\n  }\n  return arr.slice(0, n);\n};\n\nsampleSize([1, 2, 3], 2); \/\/ [3,1]\nsampleSize([1, 2, 3], 4); \/\/ [2,3,1]","177":"\/\/ This snippet can be used to do a smooth scroll to the top of the current page.\n\nconst scrollToTop = () =&gt; {\n  const c = document.documentElement.scrollTop || document.body.scrollTop;\n  if (c &gt; 0) {\n    window.requestAnimationFrame(scrollToTop);\n    window.scrollTo(0, c - c \/ 8);\n  }\n};\n\nscrollToTop();","178":"\/\/ This snippet can be used to serialize a cookie name-value pair into a Set-Cookie header string.\n\nconst serializeCookie = (name, val) =&gt; `${encodeURIComponent(name)}=${encodeURIComponent(val)}`;\n\nserializeCookie('foo', 'bar'); \/\/ 'foo=bar'","179":"\/\/ This snippet can be used to show all the elements specified.\n\nconst show = (...el) =&gt; [...el].forEach(e =&gt; (e.style.display = ''));\n\nshow(...document.querySelectorAll('img')); \/\/ Shows all &lt;img&gt; elements on the page","180":"\/\/ This snippet can be used to smoothly scroll the element on \n\/\/ which it is called into the visible area of the browser window.\n\nconst smoothScroll = element =&gt;\n  document.querySelector(element).scrollIntoView({\n    behavior: 'smooth'\n  });\n  \nsmoothScroll('#fooBar'); \/\/ scrolls smoothly to the element with the id fooBar\nsmoothScroll('.fooBar'); \/\/ scrolls smoothly to the first element with a class of fooBar","181":"\/\/ This snippet can be used to alphabetically sort the characters in a string.\n\nconst sortCharactersInString = str =&gt; [...str].sort((a, b) =&gt; a.localeCompare(b)).join('');\n\nsortCharactersInString('cabbage'); \/\/ 'aabbceg'","182":"\/\/ This snippet can be used to remove HTML\/XML tags from a string.\n\nconst stripHTMLTags = str =&gt; str.replace(\/&lt;[^&gt;]*&gt;\/g, '');\n\nstripHTMLTags('&lt;p&gt;&lt;em&gt;lorem&lt;\/em&gt; &lt;strong&gt;ipsum&lt;\/strong&gt;&lt;\/p&gt;'); \/\/ 'lorem ipsum'","183":"\/\/ This snippet can be used to find out the time it takes to execute a function.\n\nconst timeTaken = callback =&gt; {\n  console.time('timeTaken');\n  const r = callback();\n  console.timeEnd('timeTaken');\n  return r;\n};\n\ntimeTaken(() =&gt; Math.pow(2, 10)); \/\/ 1024, (logged): timeTaken: 0.02099609375ms","184":"\/\/ This snippet can be used to format a number like a currency.\n\nconst toCurrency = (n, curr, LanguageFormat = undefined) =&gt;\n  Intl.NumberFormat(LanguageFormat, { style: 'currency', currency: curr }).format(n);\n  \ntoCurrency(123456.789, 'EUR'); \/\/ \u00c3\u0192\u00c2\u00a2\u00c3\u00a2\u00e2\u201a\u00ac\u00c5\u00a1\u00c3\u201a\u00c2\u00ac123,456.79  | currency: Euro | currencyLangFormat: Local\ntoCurrency(123456.789, 'USD', 'en-us'); \/\/ $123,456.79  | currency: US Dollar | currencyLangFormat: English (United States)\ntoCurrency(123456.789, 'USD', 'fa'); \/\/ \u00c3\u0192\u00e2\u20ac\u00ba\u00c3\u201a\u00c2\u00b1\u00c3\u0192\u00e2\u20ac\u00ba\u00c3\u201a\u00c2\u00b2\u00c3\u0192\u00e2\u20ac\u00ba\u00c3\u201a\u00c2\u00b3\u00c3\u0192\u00e2\u201e\u00a2\u00c3\u201a\u00c2\u00ac\u00c3\u0192\u00e2\u20ac\u00ba\u00c3\u201a\u00c2\u00b4\u00c3\u0192\u00e2\u20ac\u00ba\u00c3\u201a\u00c2\u00b5\u00c3\u0192\u00e2\u20ac\u00ba\u00c3\u201a\u00c2\u00b6\u00c3\u0192\u00e2\u201e\u00a2\u00c3\u201a\u00c2\u00ab\u00c3\u0192\u00e2\u20ac\u00ba\u00c3\u201a\u00c2\u00b7\u00c3\u0192\u00e2\u20ac\u00ba\u00c3\u201a\u00c2\u00b9 \u00c3\u0192\u00cb\u0153\u00c3\u2026\u00e2\u20ac\u0153$ | currency: US Dollar | currencyLangFormat: Farsi\ntoCurrency(322342436423.2435, 'JPY'); \/\/ \u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00a5322,342,436,423 | currency: Japanese Yen | currencyLangFormat: Local\ntoCurrency(322342436423.2435, 'JPY', 'fi'); \/\/ 322 342 436 423 \u00c3\u0192\u00e2\u20ac\u0161\u00c3\u201a\u00c2\u00a5 | currency: Japanese Yen | currencyLangFormat: Finnish","185":"\/\/ This snippet uses the toLocaleString() function to convert \n\/\/ float-point arithmetic to the decimal mark form by using a\n\/\/ number to make a comma-separated string.\n\nconst toDecimalMark = num =&gt; num.toLocaleString('en-US');\n\ntoDecimalMark(12305030388.9087); \/\/ \"12,305,030,388.909\"","186":"function trim(x) {\n    return x.replace(\/^\\s+|\\s+$\/g, '');\n}","187":"\/\/ This snippet can be used to check whether a value is a number.\n\nconst validateNumber = n =&gt; !isNaN(parseFloat(n)) && isFinite(n) && Number(n) == n;\n\nvalidateNumber('10'); \/\/ true","188":"\/\/ This snippet converts a string into an array of words.\n\nconst words = (str, pattern = \/[^a-zA-Z-]+\/) =&gt; str.split(pattern).filter(Boolean);\n\nwords('I love javaScript!!'); \/\/ [\"I\", \"love\", \"javaScript\"]\nwords('python, javaScript & coffee'); \/\/ [\"python\", \"javaScript\", \"coffee\"]","189":"Get the HTML elements in the console just like inspecting elements\n\n<img src=\"data\/imgs\/jsconsole05.png\">","190":"Want to view JSON in a proper and easily understandable way?\n\nuse console.table ( )\n\n<img src=\"data\/imgs\/jsconsole06.png\">","191":"Use the %c placeholder\n<img src=\"data\/imgs\/jsconsole03.png\">","192":"This comes quite handy when you only want to print some selected logs i.e. \nit will only print the false argument. It does nothing at all if the \nfirst argument is true.\n\n<img src=\"data\/imgs\/jsconsole09.png\">","193":"This function logs the number of times that this particular call to \ncount() has been called.\nThis function takes an optional argument label.\nIf label is supplied, this function logs the number of times count() \nhas been called with that particular label.\nIf label is omitted, the function logs the number of times count() \nhas been called at this particular line.\n\n<img src=\"data\/imgs\/jsconsole08.png\">","194":"Wondering how our JavaScript applications are using browser memory?\n\n<img src=\"data\/imgs\/jsconsole12.png\">","195":"A dedicated function for tracking the time taken for actions, \nconsole.time() is a better way to track the microtime taken for JavaScript executions.\n\n<img src=\"data\/imgs\/jsconsole11.png\">","196":"This method displays a trace that shows how the code ended up at a certain point.\n\n<img src=\"data\/imgs\/jsconsole10.png\">","197":"It is quite possible to group the messages with the console\n\n<img src=\"data\/imgs\/jsconsole07.png\">","198":"Use console.dir()\n<img src=\"data\/imgs\/jsconsole04.png\">","199":"There are different placeholders that can be used as listed below\n%o \u00e2\u20ac\u201d which takes an object,\n%s \u00e2\u20ac\u201d which takes a string, and\n%d \u00e2\u20ac\u201d which is for a decimal or integer\n\n<img src=\"data\/imgs\/jsconsole02.png\">","200":"console.log()\nconsole.info()\nconsole.debug()\nconsole.warn()\nconsole.error()\n\n<img src=\"data\/imgs\/jsconsole01.png\">","201":"&gt;&gt;&gt; import re\n&gt;&gt;&gt; re.findall(r'\\w','http:\/\/www.hackerrank.com\/')\n['h', 't', 't', 'p', 'w', 'w', 'w', 'h', 'a', 'c', 'k', 'e', 'r', 'r', 'a', 'n', 'k', 'c', 'o', 'm']\n\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; re.finditer(r'\\w','http:\/\/www.hackerrank.com\/')\n&lt;callable-iterator object at 0x0266C790&gt;\n&gt;&gt;&gt; map(lambda x: x.group(),re.finditer(r'\\w','http:\/\/www.hackerrank.com\/'))\n['h', 't', 't', 'p', 'w', 'w', 'w', 'h', 'a', 'c', 'k', 'e', 'r', 'r', 'a', 'n', 'k', 'c', 'o', 'm']","202":"&gt;&gt;&gt; import re\n&gt;&gt;&gt; m = re.match(r'(\\w+)@(\\w+)\\.(\\w+)','username@hackerrank.com')\n&gt;&gt;&gt; m.group(0)       # The entire match \n'username@hackerrank.com'\n&gt;&gt;&gt; m.group(1)       # The first parenthesized subgroup.\n'username'\n&gt;&gt;&gt; m.group(2)       # The second parenthesized subgroup.\n'hackerrank'\n&gt;&gt;&gt; m.group(3)       # The third parenthesized subgroup.\n'com'\n&gt;&gt;&gt; m.group(1,2,3)   # Multiple arguments give us a tuple.\n('username', 'hackerrank', 'com')\n\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; m = re.match(r'(\\w+)@(\\w+)\\.(\\w+)','username@hackerrank.com')\n&gt;&gt;&gt; m.groups()\n('username', 'hackerrank', 'com')\n\n&gt;&gt;&gt; m = re.match(r'(?P&lt;user&gt;\\w+)@(?P&lt;website&gt;\\w+)\\.(?P&lt;extension&gt;\\w+)','myname@hackerrank.com')\n&gt;&gt;&gt; m.groupdict()\n{'website': 'hackerrank', 'user': 'myname', 'extension': 'com'}","203":"pip freeze > requirements.txt\n\npip install -r \/path\/to\/requirements.txt"}}